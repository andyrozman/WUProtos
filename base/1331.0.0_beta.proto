syntax = "proto3";
//----- Begin auth -----

// ref: Com.Nianticproject.Platform.Auth.IdentityProvider
enum IdentityProvider {
	UNSET_IDENTITY_PROVIDER = 0;
	GOOGLE = 1;
	PTC = 2;
	FACEBOOK = 3;
	BACKGROUND = 4;
	INTERNAL = 5;
	SFIDA = 6;
	SUPER_AWESOME = 7;
}


//----- End auth -----
//------------------------------
//----- Begin clientconfig -----

// ref: Atlas.ClientConfig.ClientOs
enum ClientOs {
	UNKNOWN_OS = 0;
	IOS = 1;
	ANDROID = 2;
	DESKTOP = 3;
}

// ref: Atlas.ClientConfig.ClientConfigurationRequestProto
message ClientConfigurationRequestProto {
	// ref: Atlas.ClientConfig.ClientConfigurationRequestProto/DeviceInfoOneofCase
	enum DeviceInfoOneofCase {
		none = 0;
		ios_device_info = 6;
		android_device_info = 7;
	}

	// ref: Atlas.ClientConfig.ClientConfigurationRequestProto/Types/AndroidDeviceInfo
	message AndroidDeviceInfo {
		string gpu_category = 1;
		string gpu_model = 2;
	}

	// ref: Atlas.ClientConfig.ClientConfigurationRequestProto/Types/iOSDeviceInfo
	message iOSDeviceInfo {
	}

	string target_env_id = 1;
	string client_version = 2;
	ClientOs client_os = 3;
	string os_version = 4;
	string device_model = 5;
	iOSDeviceInfo ios_device_info = 6;
	AndroidDeviceInfo android_device_info = 7;
	string build_number = 8;
}

// ref: Atlas.ClientConfig.ClientConfigurationResponseProto
message ClientConfigurationResponseProto {
	bool force_update = 1;
	string server_uri = 2;
	string actual_env_id = 3;
	string manifest_version = 4;
	SharedQualityLevelProto quality_level = 5;
	string force_update_url = 6;
}


//----- End clientconfig -----
//------------------------------
//----- Begin debug -----

// ref: Atlas.Rpc.Debug.DebugChallengeWinRequestProto
message DebugChallengeWinRequestProto {
}

// ref: Atlas.Rpc.Debug.DebugChallengeWinResponseProto
message DebugChallengeWinResponseProto {
}

// ref: Atlas.Rpc.Debug.DebugGetChamberInfoRequestProto
message DebugGetChamberInfoRequestProto {
}

// ref: Atlas.Rpc.Debug.DebugGetChamberInfoResponseProto
message DebugGetChamberInfoResponseProto {
	string chamber_template_id = 1;
	uint32 total_population_allotment = 2;
	uint32 used_population_allotment = 3;
	uint32 challenge_rating = 4;
}

// ref: Atlas.Rpc.Debug.DebugGetLootRollInfoRequestProto
message DebugGetLootRollInfoRequestProto {
	string loot_table_id = 1;
	int32 num_rolls = 2;
}

// ref: Atlas.Rpc.Debug.DebugGetLootRollInfoResponseProto
message DebugGetLootRollInfoResponseProto {
	LootCollectionProto loot = 1;
}

// ref: Atlas.Rpc.Debug.DebugGetSpellcastInfoRequestProto
message DebugGetSpellcastInfoRequestProto {
	bytes encounter_id = 1;
	repeated string energy_gmt_id = 2;
	float accuracy_bonus = 3;
}

// ref: Atlas.Rpc.Debug.DebugGetSpellcastInfoResponseProto
message DebugGetSpellcastInfoResponseProto {
	double spell_hit_chance = 1;
	double spell_hit_roll = 2;
	double flee_chance = 3;
	double flee_roll = 4;
}

// ref: Atlas.Rpc.Debug.DebugGrantLootCollectionRequestProto
message DebugGrantLootCollectionRequestProto {
	// ref: Atlas.Rpc.Debug.DebugGrantLootCollectionRequestProto/Types/RequestType
	enum RequestType {
		ADD = 0;
		REMOVE = 1;
	}

	LootCollectionProto loot_collection = 1;
	RequestType request_type = 2;
}

// ref: Atlas.Rpc.Debug.DebugGrantLootCollectionResponseProto
message DebugGrantLootCollectionResponseProto {
	bool loot_granted = 1;
}

// ref: Atlas.Rpc.Debug.DebugModifyCollectionItemProto
message DebugModifyCollectionItemProto {
	string id = 1;
	int32 increment_times_encountered_by = 2;
	int32 increment_times_returned_by = 3;
}

// ref: Atlas.Rpc.Debug.DebugModifyCollectionItemsRequestProto
message DebugModifyCollectionItemsRequestProto {
	repeated DebugModifyCollectionItemProto collection_items = 1;
}

// ref: Atlas.Rpc.Debug.DebugModifyCollectionItemsResponseProto
message DebugModifyCollectionItemsResponseProto {
	repeated string updated_collection_item_ids = 1;
}

// ref: Atlas.Rpc.Debug.DebugResetPlayerRequestProto
message DebugResetPlayerRequestProto {
}

// ref: Atlas.Rpc.Debug.DebugResetPlayerResponseProto
message DebugResetPlayerResponseProto {
	bool success = 1;
}

// ref: Atlas.Rpc.Debug.DebugResetProfessionRequestProto
message DebugResetProfessionRequestProto {
}

// ref: Atlas.Rpc.Debug.DebugResetProfessionResponseProto
message DebugResetProfessionResponseProto {
	bool success = 1;
}

// ref: Atlas.Rpc.Debug.DebugResetStorePackPurchasedRequestProto
message DebugResetStorePackPurchasedRequestProto {
	repeated StorePackPurchasedProto store_pack = 1;
}

// ref: Atlas.Rpc.Debug.DebugResetStorePackPurchasedResponseProto
message DebugResetStorePackPurchasedResponseProto {
	bool successful = 1;
}

// ref: Atlas.Rpc.Debug.DebugReturnCollectionItemRequestProto
message DebugReturnCollectionItemRequestProto {
	string collection_item_id = 1;
}

// ref: Atlas.Rpc.Debug.DebugReturnCollectionItemResponseProto
message DebugReturnCollectionItemResponseProto {
	bool did_return_collection_item = 1;
}

// ref: Atlas.Rpc.Debug.DebugSetFeatureFlagRequestProto
message DebugSetFeatureFlagRequestProto {
	// ref: Atlas.Rpc.Debug.DebugSetFeatureFlagRequestProto/ValueOneofCase
	enum ValueOneofCase {
		none = 0;
		bval = 2;
		lval = 3;
		sval = 4;
		fval = 5;
	}

	string feature_flag_id = 1;
	bool bval = 2;
	int64 lval = 3;
	string sval = 4;
	float fval = 5;
}

// ref: Atlas.Rpc.Debug.DebugSetFeatureFlagResponseProto
message DebugSetFeatureFlagResponseProto {
	bool did_set_flag = 1;
}

// ref: Atlas.Rpc.Debug.DebugSimulateWalkingRequestProto
message DebugSimulateWalkingRequestProto {
	float distance_simulated_km = 1;
}

// ref: Atlas.Rpc.Debug.DebugSimulateWalkingResponseProto
message DebugSimulateWalkingResponseProto {
	// ref: Atlas.Rpc.Debug.DebugSimulateWalkingResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.Debug.DebugStartEncounterRequestProto
message DebugStartEncounterRequestProto {
	string encounter_gmt_id = 1;
	int32 starting_stage_index = 2;
	int32 level = 3;
}

// ref: Atlas.Rpc.Debug.DebugStartEncounterResponseProto
message DebugStartEncounterResponseProto {
	EncounterStartResponseProto response = 1;
}

// ref: Atlas.Rpc.Debug.DebugUpdatePlayerInventoryRequestProto
message DebugUpdatePlayerInventoryRequestProto {
	repeated AtlasInventoryItemProto insert_or_replace_items = 1;
	repeated AtlasInventoryKeyProto delete_items = 2;
}

// ref: Atlas.Rpc.Debug.DebugUpdatePlayerInventoryResponseProto
message DebugUpdatePlayerInventoryResponseProto {
	bool successful = 1;
	repeated AtlasInventoryKeyProto added_keys = 2;
	repeated AtlasInventoryKeyProto replaced_keys = 3;
	repeated AtlasInventoryKeyProto deleted_keys = 4;
}

// ref: Atlas.Rpc.Debug.DebugWcAddBuffRequestProto
message DebugWcAddBuffRequestProto {
	string buff_gmt_id = 1;
	uint32 quantity = 2;
	bytes encounter_id = 3;
}

// ref: Atlas.Rpc.Debug.DebugWcAddBuffResponseProto
message DebugWcAddBuffResponseProto {
}

// ref: Atlas.Rpc.Debug.StorePackPurchasedProto
message StorePackPurchasedProto {
	string store_pack_id = 1;
	int64 new_count = 2;
}


//----- End debug -----
//------------------------------
//----- Begin events -----

// ref: Niantic.Platform.Ditto.Events.ChannelAuthEventParams
message ChannelAuthEventParams {
	uint32 status = 1;
}

// ref: Niantic.Platform.Ditto.Events.DownstreamActionEventParams
message DownstreamActionEventParams {
	repeated uint32 methods = 1;
	repeated bytes payloads = 2;
	repeated uint64 ids = 3;
}

// ref: Niantic.Platform.Ditto.Events.GoogleAuthEventParams
message GoogleAuthEventParams {
	string payload = 1;
	string account_name = 2;
}

// ref: Niantic.Platform.Ditto.Events.LocationUpdateEventParams
message LocationUpdateEventParams {
	double latitude_deg = 1;
	double longitude_deg = 2;
	double altitude_m = 3;
	double accuracy_m = 4;
	double timestamp_s = 5;
	uint32 provider_status = 6;
	uint32 location_type = 7;
}

// ref: Niantic.Platform.Ditto.Events.RpcResponseEventParams
message RpcResponseEventParams {
	uint32 rpc_id = 1;
	uint32 status = 2;
	repeated bytes payloads = 3;
}

// ref: Niantic.Platform.Ditto.Events.SyncRequestedEventParams
message SyncRequestedEventParams {
}


//----- End events -----
//------------------------------
//----- Begin gamemaster -----

// ref: Niantic.Platform.GameMaster.ClientGameMasterTemplateProto
message ClientGameMasterTemplateProto {
	string template_id = 1;
	bytes data = 2;
}

// ref: Niantic.Platform.GameMaster.DownloadGmTemplatesRequestProto
message DownloadGmTemplatesRequestProto {
	int64 basis_batch_id = 1;
	int64 batch_id = 2;
	int32 page_offset = 3;
}

// ref: Niantic.Platform.GameMaster.DownloadGmTemplatesResponseProto
message DownloadGmTemplatesResponseProto {
	// ref: Niantic.Platform.GameMaster.DownloadGmTemplatesResponseProto/Types/Result
	enum Result {
		UNSET = 0;
		COMPLETE = 1;
		MORE_RESULTS = 2;
		BATCH_ID_NOT_LIVE = 3;
		INVALID_BASIS_BATCH_ID = 4;
	}

	Result result = 1;
	repeated ClientGameMasterTemplateProto template = 2;
	repeated string deleted_template = 3;
	uint64 batch_id = 4;
	int32 page_offset = 5;
}


//----- End gamemaster -----
//------------------------------
//----- Begin google -----

// ref: Niantic.Platform.Auth.Plugins.Google.GoogleToken
message GoogleToken {
	string id_token = 1;
}


//----- End google -----
//------------------------------
//----- Begin iap -----

// ref: Niantic.Platform.Iap.IapStoreItem
message IapStoreItem {
}


//----- End iap -----
//------------------------------
//----- Begin inventory -----

// ref: Niantic.Platform.Inventory.GetInventoryProto
message GetInventoryProto {
	int64 timestamp_millis = 1;
}

// ref: Niantic.Platform.Inventory.GetInventoryResponseProto
message GetInventoryResponseProto {
	bool success = 1;
	InventoryDeltaProto inventory_delta = 2;
}

// ref: Niantic.Platform.Inventory.InventoryDeltaProto
message InventoryDeltaProto {
	int64 original_timestamp = 1;
	int64 new_timestamp = 2;
	repeated InventoryItemProto inventory_item = 3;
}

// ref: Niantic.Platform.Inventory.InventoryItemProto
message InventoryItemProto {
	// ref: Niantic.Platform.Inventory.InventoryItemProto/InventoryItemOneofCase
	enum InventoryItemOneofCase {
		none = 0;
		deleted_item_key = 2;
		item = 3;
	}

	int64 modified_timestamp = 1;
	bytes deleted_item_key = 2;
	bytes item = 3;
}

// ref: Niantic.Platform.Inventory.InventoryProto
message InventoryProto {
	repeated InventoryItemProto inventory_item = 1;
}


//----- End inventory -----
//------------------------------
//----- Begin platform -----

// ref: Com.Nianticproject.Platform.ProxyRequestProto
message ProxyRequestProto {
	uint32 action = 1;
	string host = 2;
	bytes payload = 3;
}

// ref: Com.Nianticproject.Platform.ProxyResponseProto
message ProxyResponseProto {
	// ref: Com.Nianticproject.Platform.ProxyResponseProto/Types/Status
	enum Status {
		UNSET = 0;
		COMPLETED = 1;
		COMPLETED_AND_REASSIGNED = 2;
		ACTION_NOT_FOUND = 3;
		ASSIGNMENT_ERROR = 4;
		PROXY_UNAUTHORIZED_ERROR = 5;
		INTERNAL_ERROR = 6;
		BAD_REQUEST = 7;
		ACCESS_DENIED = 8;
		TIMEOUT_ERROR = 9;
	}

	Status status = 1;
	string assigned_host = 2;
	bytes payload = 3;
}


//----- End platform -----
//------------------------------
//----- Begin proto -----

// ref: Atlas.Proto.ActiveEngagement
enum ActiveEngagement {
	ACTIVE_ENGAGEMENT_UNSET = 0;
	MOB_IS_ENGAGED = 1;
	MOB_IS_FREE = 2;
}

// ref: Atlas.Proto.AdditionalSelectionRule
enum AdditionalSelectionRule {
	none = 0;
	no_if_max_health = 1;
	no_if_max_focus = 2;
	no_if_alive = 3;
}

// ref: Atlas.Proto.AdviceOverlayAlignment
enum AdviceOverlayAlignment {
	bottom = 0;
	top = 1;
}

// ref: Atlas.Proto.ARMode
enum ARMode {
	AR_MODE_UNSET = 0;
	advanced = 1;
	simple = 2;
	park = 3;
}

// ref: Atlas.Proto.BonusReceiver
enum BonusReceiver {
	BONUS_RECEIVER_UNKNOWN = 0;
	TEAM = 1;
	PLAYER = 2;
}

// ref: Atlas.Proto.BonusTargetReward
enum BonusTargetReward {
	BONUS_TARGET_REWARD_UNKNOWN = 0;
	CHALLENGE_COLLECTIBLE_SHARDS = 1;
	CHALLENGE_FAMILY_XP = 2;
	PROFESSION_SPELLBOOKS = 3;
	TRACE_FAMILY_COLLECTIBLE_SHARDS = 4;
	ADVERSARY_COLLECTIBLE_SHARDS = 5;
}

// ref: Atlas.Proto.BoolLiteral
enum BoolLiteral {
	BOOL_UNKNOWN = 0;
	TRUE = 1;
	FALSE = 2;
}

// ref: Atlas.Proto.CategoryAssetType
enum CategoryAssetType {
	CATEGORY_ASSET_TYPE_UNSET = 0;
	CATEGORY_ASSET_LENS = 1;
	CATEGORY_ASSET_FILTER = 2;
	CATEGORY_ASSET_FRAME = 3;
	CATEGORY_ASSET_STICKER = 4;
}

// ref: Atlas.Proto.CategoryCapacityType
enum CategoryCapacityType {
	CAGETORY_CAPACITY_TYPE_UNSET = 0;
	DEFAULT = 1;
	INFINITE = 2;
}

// ref: Atlas.Proto.CategoryLens
enum CategoryLens {
	CATEGORY_LENS_UNSET = 0;
	CATEGORY_LENS_TOP = 1;
	CATEGORY_LENS_MIDDLE = 2;
	CATEGORY_LENS_BOTTOM = 3;
}

// ref: Atlas.Proto.CategoryRandomize
enum CategoryRandomize {
	CATEGORY_RANDOMIZE_UNSET = 0;
	RANDOMIZE_LENS = 1;
	RANDOMIZE_FILTER_FRAME = 2;
}

// ref: Atlas.Proto.CategoryShareLocation
enum CategoryShareLocation {
	CATEGORY_SHARE_LOCATION_UNSET = 0;
	CATEGORY_SAVE_PASSPORT = 1;
	CATEGORY_SAVE_SELFIE_FLOW = 2;
}

// ref: Atlas.Proto.CauldronType
enum CauldronType {
	CAULDRON_UNKNOWN = 0;
	CAULDRON_NORMAL = 1;
	CAULDRON_RENTAL = 2;
}

// ref: Atlas.Proto.CollectionFamilyType
enum CollectionFamilyType {
	COLLECTION_FAMILY_TYPE_UNKNOWN = 0;
	NORMAL = 1;
	APEX = 2;
}

// ref: Atlas.Proto.CombatPhaseOutcome
enum CombatPhaseOutcome {
	COMBAT_PHASE_OUTCOME_UNKNOWN = 0;
	SUCCEED = 1;
	FAIL_CHECKPOINT = 2;
	FAIL_TIME = 3;
}

// ref: Atlas.Proto.ComparisonOperator
enum ComparisonOperator {
	COMPARISON_UNKNOWN = 0;
	EQUAL = 1;
	GREATER_THAN = 2;
	LESS_THAN = 3;
	GREATER_OR_EQUAL = 4;
	LESS_OR_EQUAL = 5;
}

// ref: Atlas.Proto.ConditionTargetType
enum ConditionTargetType {
	CONDITION_TARGET_TYPE_UNSET = 0;
	SELF = 1;
	OPPONENT = 2;
}

// ref: Atlas.Proto.DevicePlatform
enum DevicePlatform {
	DEVICE_UNKNOWN = 0;
	DEVICE_IOS = 1;
	DEVICE_ANDROID = 2;
}

// ref: Atlas.Proto.DownloadType
enum DownloadType {
	DOWNLOAD_TYPE_UNSET = 0;
	PORTRAIT_DOWNLOAD_PASSPORT = 1;
	PORTRAIT_DOWNLOAD_PHOTO = 2;
}

// ref: Atlas.Proto.EqualityOperator
enum EqualityOperator {
	EQUALITY_OPERATOR_UNSET = 0;
	IS_EQUAL = 1;
	IS_NOT_EQUAL = 2;
}

// ref: Atlas.Proto.EventReqSubset
enum EventReqSubset {
	SUBSET_UNKNOWN = 0;
	SUBSET_ACTIVATION = 1;
	SUBSET_RUNNING = 2;
}

// ref: Atlas.Proto.GrowthType
enum GrowthType {
	GROWTH_TYPE_UNSET = 0;
	LINEAR = 1;
	LOGARITHMIC = 2;
	EXPONENTIAL = 3;
}

// ref: Atlas.Proto.LexiconMetricIds
enum LexiconMetricIds {
	UNSET_METRIC_ID = 0;
	GENERIC_METRIC_ID = 1;
}

// ref: Atlas.Proto.MapAbilityTargetType
enum MapAbilityTargetType {
	TARGET_NONE = 0;
	TARGET_CHOOSE_ONE = 1;
	TARGET_CHOOSE_FRIEND = 2;
	TARGET_CHOOSE_ENEMY = 3;
	TARGET_SELF = 4;
	TARGET_RANGE = 5;
	TARGET_ENEMIES_IN_RANGE = 6;
	TARGET_ENTIRE_FRIENDS = 7;
	TARGET_RANDOM_ONE = 8;
	TARGET_RANDOM_FRIEND = 9;
	TARGET_RANDOM_ENEMY = 10;
	TARGET_ENTIRE_ENEMIES = 11;
	TARGET_CHOOSE_FRIEND_NOT_SELF = 12;
}

// ref: Atlas.Proto.MasterNoteGesture
enum MasterNoteGesture {
	GESTURE_NONE = 0;
	GESTURE_HORIZONTAL = 1;
	GESTURE_VERTICAL = 2;
	GESTURE_CLOCKWISE = 3;
	GESTURE_COUNTER_CLOCKWISE = 4;
	GESTURE_PINCH_OUT = 5;
	GESTURE_PINCH_IN = 6;
	GESTURE_TAP = 7;
	GESTURE_SHAKE = 8;
}

// ref: Atlas.Proto.MobRewardRecipient
enum MobRewardRecipient {
	MOB_REWARD_RECIPIENT_UNSET = 0;
	MOB_REWARD_RECIPIENT_PLAYER = 1;
	MOB_REWARD_RECIPIENT_TEAM = 2;
	MOB_REWARD_RECIPIENT_RANDOM_PLAYER = 3;
}

// ref: Atlas.Proto.PoiAccessibility
enum PoiAccessibility {
	UNKNOWN_POI_STATE = 0;
	POI_OPEN = 1;
	POI_CLOSED = 2;
	POI_CLOSING = 3;
}

// ref: Atlas.Proto.PortraitAction
enum PortraitAction {
	PORTRATE_ACTION_UNSET = 0;
	PORTRAIT_ACTION_SAVE = 1;
	PORTRAIT_ACTION_DOWNLOAD = 2;
	PORTRAIT_ACTION_SHARE = 3;
}

// ref: Atlas.Proto.PortraitType
enum PortraitType {
	PORTRAIT_TYPE_UNSET = 0;
	PORTRAIT_PHOTO = 1;
	PORTRAIT_VIDEO = 2;
}

// ref: Atlas.Proto.PotionConsumableScenario
enum PotionConsumableScenario {
	UNKNOWN_CONSUMABLE_SCENARIO = 0;
	OVERWORLD = 1;
	ENCOUNTER = 2;
	SWISH_ENCOUNTER = 3;
	COMBAT_ENCOUNTER = 4;
	WC_ENCOUNTER = 5;
}

// ref: Atlas.Proto.ProfileTabSource
enum ProfileTabSource {
	PROFILE_TAB_SOURCE_UNSET = 0;
	TAB_NEW = 1;
	TAB_LAST_PHOTO = 2;
	TAB_STOCK_PHOTO = 3;
	TAB_GALLERY = 4;
}

// ref: Atlas.Proto.QuestType
enum QuestType {
	QUEST_TYPE_UNKNOWN = 0;
	QUEST_TYPE_NONREPEATABLE = 1;
	QUEST_TYPE_REPEATABLE = 2;
	QUEST_TYPE_DAILY = 3;
	QUEST_TYPE_EVENT = 4;
	QUEST_TYPE_ACHIEVEMENT = 5;
	QUEST_TYPE_EVENT_CHAIN = 6;
}

// ref: Atlas.Proto.StatType
enum StatType {
	STAT_UNKNOWN = 0;
	STAT_COMBAT_HP = 1;
	STAT_COMBAT_ATTACK = 2;
	PLAYER_STAT_XP_MULTIPLIER = 3;
	PLAYER_STAT_COMBAT_CRIT_CHANCE = 4;
	PLAYER_STAT_COMBAT_CRIT_DAMAGE = 5;
	PLAYER_STAT_COMBAT_BLOCK_AMOUNT = 6;
	PLAYER_STAT_SPELLCAST_SUCCESS_CHANCE_BOOST = 7;
	PLAYER_STAT_FLEE_CHANCE_DEBOOST = 8;
	MAP_ABILITY_COOLDOWN_TIME_MS = 9;
	STAT_COMBAT_HP_HEAL_PERCENT = 10;
	STAT_COMBAT_ATTACK_MULTIPLIER = 11;
	STAT_COMBAT_HP_HEAL_AMOUNT = 12;
	STAT_COMBAT_AFFINITY_POWER = 13;
	STAT_COMBAT_AFFINITY_RESIST = 14;
	STAT_COMBAT_MITIGATION = 15;
	STAT_COMBAT_SUNDER = 16;
	STAT_COMBAT_DODGE = 17;
	STAT_COMBAT_PRECISION = 18;
	STAT_COMBAT_REVIVE_WITH_HEAL_PERCENT = 19;
	STAT_COMBAT_FOCUS = 20;
	STAT_COMBAT_STARTING_FOCUS = 21;
	STAT_COMBAT_FOCUS_BONUS = 22;
	STAT_COMBAT_FOCUS_TRANSFER = 23;
}

// ref: Atlas.Proto.StorePackConfigSize
enum StorePackConfigSize {
	SIZE_SMALL = 0;
	SIZE_MEDIUM = 1;
	SIZE_LARGE = 2;
}

// ref: Atlas.Proto.StoryboardResetMode
enum StoryboardResetMode {
	STORYBOARD_RESET_UNKNOWN = 0;
	STORYBOARD_RESET_NOT_ALLOWED = 1;
	STORYBOARD_RESET_WHEN_INCOMPLETE = 2;
	STORYBOARD_RESET_WHEN_COMPLETE = 3;
}

// ref: Atlas.Proto.AccountCreationDateRequirement
message AccountCreationDateRequirement {
	int64 account_creation_date = 1;
	ComparisonOperator comparison_operator = 2;
}

// ref: Atlas.Proto.ActiveArModeRequirement
message ActiveArModeRequirement {
	ARMode ar_mode = 1;
	EqualityOperator operator = 2;
}

// ref: Atlas.Proto.ActiveBuffExpiration
message ActiveBuffExpiration {
	// ref: Atlas.Proto.ActiveBuffExpiration/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		time = 1;
		charges = 2;
		profession = 3;
		permanent = 4;
		challenge = 6;
	}

	TimeActiveBuffExpiration time = 1;
	ChargesActiveBuffExpiration charges = 2;
	ProfessionBuffExpiration profession = 3;
	PermanentBuffExpiration permanent = 4;
	ChallengeBuffExpiration challenge = 6;
}

// ref: Atlas.Proto.ActiveBuffListProto
message ActiveBuffListProto {
	repeated ActiveBuffProto buffs = 1;
}

// ref: Atlas.Proto.ActiveBuffProto
message ActiveBuffProto {
	string gmt_buff_id = 1;
	ActiveBuffExpiration expiration = 2;
	ActiveBuffSource source = 3;
	int64 start_time_ms = 5;
}

// ref: Atlas.Proto.ActiveBuffSource
message ActiveBuffSource {
	// ref: Atlas.Proto.ActiveBuffSource/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		vault_item = 1;
		profession = 2;
		map_ability = 3;
	}

	VaultItemActiveBuffSource vault_item = 1;
	ProfessionActiveBuffSource profession = 2;
	MapAbilityActiveBuffSource map_ability = 3;
}

// ref: Atlas.Proto.AnalyticsEventProto
message AnalyticsEventProto {
	string event_name = 1;
	int64 event_timestamp = 2;
	map<string, string> event_metadata = 3;
}

// ref: Atlas.Proto.AnalyticsEventsProto
message AnalyticsEventsProto {
	repeated AnalyticsEventProto event = 1;
}

// ref: Atlas.Proto.AudioConfigProto
message AudioConfigProto {
	// ref: Atlas.Proto.AudioConfigProto/MusicPlayLocation
	enum MusicPlayLocation {
		loading_screen = 0;
		map = 1;
		menu = 2;
		pub = 3;
		fortress_hub = 4;
		challenge_map = 5;
		rewards_screen = 6;
	}

	string music_event = 1;
	repeated MusicConfigProto music_config = 2;
}

// ref: Atlas.Proto.AudioParameterProto
message AudioParameterProto {
	string param_name = 1;
	float param_value = 2;
}

// ref: Atlas.Proto.BatterySaverProfile
message BatterySaverProfile {
	repeated string profiles = 1;
	string name = 2;
}

// ref: Atlas.Proto.BonusCategoryProto
message BonusCategoryProto {
	string id = 1;
}

// ref: Atlas.Proto.BonusConfigProto
message BonusConfigProto {
	// ref: Atlas.Proto.BonusConfigProto/Types/BonusTier
	message BonusTier {
		float tier_threshold = 1;
		LootCollectionProto bonus = 2;
	}

	repeated BonusTier swish_game_accuracy_reward = 1;
	LootCollectionProto first_time_success_reward = 2;
	LootCollectionProto life_time_first_success_reward = 3;
	repeated string accuracy_tier_bonus_text = 4;
}

// ref: Atlas.Proto.BonusMetadataProto
message BonusMetadataProto {
	// ref: Atlas.Proto.BonusMetadataProto/MetadataTypeOneofCase
	enum MetadataTypeOneofCase {
		none = 0;
		potion = 1;
		wrackspurt = 2;
		first_time_collection = 3;
		challenge = 4;
		spell_game = 5;
		challenge_bonus = 6;
		shard_conversion = 7;
		challenge_chamber_bonus = 8;
	}

	PotionBonusMetadataProto potion = 1;
	WrackspurtBonusMetadataProto wrackspurt = 2;
	FirstTimeCollectionBonusMetadataProto first_time_collection = 3;
	ChallengeBonusProto challenge = 4;
	SpellGameBonusMetadataProto spell_game = 5;
	ChallengeBonusMetadataProto challenge_bonus = 6;
	ShardConversionBonusMetadataProto shard_conversion = 7;
	ChallengeChamberBonusMetadataProto challenge_chamber_bonus = 8;
}

// ref: Atlas.Proto.BrewPotionsQuestProgress
message BrewPotionsQuestProgress {
	int64 current_brew_count = 1;
}

// ref: Atlas.Proto.BrewPotionsQuestTask
message BrewPotionsQuestTask {
	int64 required_brew_count = 1;
}

// ref: Atlas.Proto.BuffCountCondition
message BuffCountCondition {
	string target_type = 1;
	ComparisonOperator comparison_operator = 2;
	int32 target_comparison_value = 3;
	bool look_for_buffs = 4;
	ConditionTargetType condition_target_type = 5;
}

// ref: Atlas.Proto.BuffDuration
message BuffDuration {
	// ref: Atlas.Proto.BuffDuration/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		time = 1;
		charges = 2;
		profession = 3;
		permanent = 4;
		instant = 5;
		challenge = 6;
	}

	TimeBuffDuration time = 1;
	ChargesBuffDuration charges = 2;
	ProfessionBuffDuration profession = 3;
	PermanentBuffDuration permanent = 4;
	InstantBuffDuration instant = 5;
	ChallengeBuffDuration challenge = 6;
}

// ref: Atlas.Proto.BuffExclusivityGroup
message BuffExclusivityGroup {
	string exclusivity_group = 1;
	int32 exclusivity_priority = 2;
}

// ref: Atlas.Proto.BuffProto
message BuffProto {
	// ref: Atlas.Proto.BuffProto/Types/BuffType
	enum BuffType {
		NONE = 0;
		BUFF = 1;
		DEBUFF = 2;
	}

	string id = 1;
	BuffDuration duration = 3;
	BuffExclusivityGroup exclusivity_group = 4;
	BuffType buff_type = 5;
	map<string, int64> modifiers = 6;
	repeated ConditionalModifiers conditional_modifiers = 7;
}

// ref: Atlas.Proto.CastSpellsProgress
message CastSpellsProgress {
	int64 current_spell_count = 1;
}

// ref: Atlas.Proto.CastSpellsQuestTask
message CastSpellsQuestTask {
	int64 required_spell_count = 1;
	float required_mastery_level = 2;
}

// ref: Atlas.Proto.CauldronProto
message CauldronProto {
	string id = 1;
	CauldronType type = 2;
	float discount = 3;
}

// ref: Atlas.Proto.CauldronRewardProto
message CauldronRewardProto {
	string template_id = 1;
	int64 cauldron_id = 2;
	int64 availability_time = 3;
}

// ref: Atlas.Proto.CauldronTimeItemProto
message CauldronTimeItemProto {
	int64 availability_time = 1;
}

// ref: Atlas.Proto.ChallengeBonusMetadataProto
message ChallengeBonusMetadataProto {
	string challenge_bonus_gmt_id = 1;
}

// ref: Atlas.Proto.ChallengeBonusProto
message ChallengeBonusProto {
	// ref: Atlas.Proto.ChallengeBonusProto/BonusKindOneofCase
	enum BonusKindOneofCase {
		none = 0;
		player_count = 20;
		fast_completion = 21;
		rune_level = 22;
		defeated_mob_count = 23;
		player_ratio = 24;
	}

	string id = 1;
	BonusReceiver receiver = 2;
	BonusTargetReward target_reward = 3;
	float modifier = 4;
	int32 modifier_percentage = 5;
	PlayerCountChallengeBonusProto player_count = 20;
	FastCompletionChallengeBonusProto fast_completion = 21;
	RuneLevelChallengeBonusProto rune_level = 22;
	DefeatedMobCountChallengeBonusProto defeated_mob_count = 23;
	PlayerRatioChallengeBonusProto player_ratio = 24;
}

// ref: Atlas.Proto.ChallengeBuffDuration
message ChallengeBuffDuration {
}

// ref: Atlas.Proto.ChallengeBuffExpiration
message ChallengeBuffExpiration {
}

// ref: Atlas.Proto.ChallengeChamberBonusMetadataProto
message ChallengeChamberBonusMetadataProto {
	string chamber_template_gmt_id = 1;
}

// ref: Atlas.Proto.ChallengeLootTableProto
message ChallengeLootTableProto {
	string id = 1;
}

// ref: Atlas.Proto.ChallengeSpawnLogicProto
message ChallengeSpawnLogicProto {
	string id = 1;
}

// ref: Atlas.Proto.ChamberTemplateProto
message ChamberTemplateProto {
	string id = 1;
	Requirements unlock_requirements = 2;
	Requirements visibility_requirements = 3;
	uint32 min_runestone_level = 4;
	uint32 max_runestone_level = 5;
	uint32 player_cap = 6;
	int64 duration_ms = 7;
	int64 knockout_time_ms = 10;
	map<int32, PlayerCountMultipliers> player_count_multipliers = 11;
	uint32 base_chamber_rating = 12;
}

// ref: Atlas.Proto.ChargesActiveBuffExpiration
message ChargesActiveBuffExpiration {
	bytes encounter_id = 1;
	int32 remaining_charges = 2;
}

// ref: Atlas.Proto.ChargesBuffDuration
message ChargesBuffDuration {
	int32 num_charges = 1;
	bool is_override = 2;
}

// ref: Atlas.Proto.ClientBadgeProto
message ClientBadgeProto {
	string name = 1;
	string icon = 2;
	bool disabled = 3;
	bool show_badge = 4;
	Requirements visibility_conditions = 5;
	Requirements unlock_conditions = 6;
}

// ref: Atlas.Proto.ClientBonusCategoryProto
message ClientBonusCategoryProto {
	string id = 1;
	ColorProto color = 2;
	string name_loc_key = 3;
	string background_image = 4;
}

// ref: Atlas.Proto.ClientBonusConfigProto
message ClientBonusConfigProto {
	string id = 1;
	repeated float accuracy_tier = 2;
	repeated string accuracy_tier_bonus_id = 3;
	repeated string accuracy_tier_bonus_text = 4;
	string first_time_bonus_id = 5;
	string first_time_bonus_text = 6;
	string life_time_bonus_id = 7;
	string life_time_bonus_text = 8;
}

// ref: Atlas.Proto.ClientBuffProto
message ClientBuffProto {
	string id = 1;
	string reward_bonus_loc_key = 3;
	string reward_bonus_icon = 4;
	string status_icon = 5;
	string display_name = 6;
	repeated ClientConditionalModifiers conditional_modifiers = 7;
}

// ref: Atlas.Proto.ClientCauldronProto
message ClientCauldronProto {
	string id = 1;
}

// ref: Atlas.Proto.ClientChallengeBonusProto
message ClientChallengeBonusProto {
	string id = 1;
	string display_text = 2;
	string icon = 3;
}

// ref: Atlas.Proto.ClientChamberTemplateProto
message ClientChamberTemplateProto {
	string id = 1;
	string name = 2;
	float challenge_leaving_warning_radius = 3;
	string arena_scene = 4;
	int32 base_difficulty = 5;
	map<int32, int32> runestone_difficulties = 6;
	map<string, string> parkmode_bgs = 7;
}

// ref: Atlas.Proto.ClientCollectionFamilyProto
message ClientCollectionFamilyProto {
	string id = 1;
	string name = 3;
	string description = 4;
	string icon = 5;
	string landmark_texture = 6;
	string landmark_prefab = 7;
	string landmark_description = 8;
	bool show_in_ui = 9;
	string landmark_icon = 11;
	ColorProto color = 12;
	ColorProto color_highlight = 13;
	string trace_prefab = 14;
	repeated string border_images = 15;
	string family_runestone_icon = 16;
	SoundConfigProto sound = 17;
}

// ref: Atlas.Proto.ClientCollectionItemProto
message ClientCollectionItemProto {
	string id = 1;
	string name = 2;
	string return_location = 3;
	string description = 4;
	string icon_returned = 5;
	bool show_in_ui = 6;
	repeated MysteryItemInfoProto mystery_data = 7;
	string sticker_placed_storyboard_id = 8;
}

// ref: Atlas.Proto.ClientCollectionPageProto
message ClientCollectionPageProto {
	string id = 1;
	string name = 2;
	string page_prefab = 3;
	string icon_bg = 4;
	bool show_in_ui = 5;
}

// ref: Atlas.Proto.ClientCombatEnemyTraitProto
message ClientCombatEnemyTraitProto {
	string id = 1;
	string name = 2;
	string icon = 3;
	string description = 4;
}

// ref: Atlas.Proto.ClientCombatMoveTypeProto
message ClientCombatMoveTypeProto {
	// ref: Atlas.Proto.ClientCombatMoveTypeProto/CombatMoveOneofCase
	enum CombatMoveOneofCase {
		none = 0;
		player_attack = 1;
		player_defend = 2;
		player_auto_advance = 3;
	}

	ClientCombatPlayerAttackProto player_attack = 1;
	ClientCombatPlayerDefendProto player_defend = 2;
	ClientCombatPlayerAutoAdvanceProto player_auto_advance = 3;
	string enemy_action_timeline = 4;
	string player_succeed_timeline = 5;
	string player_failed_timeline = 6;
}

// ref: Atlas.Proto.ClientCombatPlayerAttackProto
message ClientCombatPlayerAttackProto {
	string enemy_bone_name = 1;
	float ui_target_radius = 2;
	float reticle_time_to_fill = 3;
}

// ref: Atlas.Proto.ClientCombatPlayerAutoAdvanceProto
message ClientCombatPlayerAutoAdvanceProto {
}

// ref: Atlas.Proto.ClientCombatPlayerDefendPatternProto
message ClientCombatPlayerDefendPatternProto {
	int32 weight = 1;
	string protego_pattern = 2;
}

// ref: Atlas.Proto.ClientCombatPlayerDefendProto
message ClientCombatPlayerDefendProto {
	repeated ClientCombatPlayerDefendPatternProto pattern_list = 1;
}

// ref: Atlas.Proto.ClientCombatStateProto
message ClientCombatStateProto {
	repeated ClientCombatMoveTypeProto possible_moves = 1;
}

// ref: Atlas.Proto.ClientConditionalModifier
message ClientConditionalModifier {
	string desc = 1;
}

// ref: Atlas.Proto.ClientConditionalModifiers
message ClientConditionalModifiers {
	map<string, ClientConditionalModifier> modifiers = 2;
}

// ref: Atlas.Proto.ClientDailyRewardMonthlyScheduleProto
message ClientDailyRewardMonthlyScheduleProto {
	string id = 1;
	map<uint32, ClientDailyRewardProto> daily_rewards = 2;
}

// ref: Atlas.Proto.ClientDailyRewardProto
message ClientDailyRewardProto {
	bool hide_as_crate = 1;
	bool make_sparkly = 2;
}

// ref: Atlas.Proto.ClientDarkDetectorAmplifierProto
message ClientDarkDetectorAmplifierProto {
	int32 num_slots = 1;
	map<int32, ClientDarkDetectorProto> active_dark_detectors = 2;
}

// ref: Atlas.Proto.ClientDarkDetectorProto
message ClientDarkDetectorProto {
	string dark_detector_gmt_id = 1;
	int64 end_time_ms = 2;
	string deploying_player_id = 3;
	string deploying_player_nickname = 4;
}

// ref: Atlas.Proto.ClientEncounterProto
message ClientEncounterProto {
	string id = 1;
	string encounter_searching_timeline = 2;
	repeated string encounter_searching_idle_timelines = 3;
	string encounter_flee_timeline = 4;
	string encounter_target = 5;
	repeated ClientEncounterStageProto stages = 6;
	string encounter_target_layout = 7;
	string search_target_layout = 8;
	repeated string encounter_assets = 9;
	string encounter_map_sprite = 10;
	repeated AudioParameterProto encounter_music_params = 11;
	string name = 12;
	string encounter_map_sprite_frame = 13;
	ColorProto map_health_bar_color = 14;
	ColorProto hud_health_bar_color = 15;
}

// ref: Atlas.Proto.ClientEncounterStageCombatProto
message ClientEncounterStageCombatProto {
	repeated ClientCombatStateProto state_graph_nodes = 1;
	repeated ClientCombatEnemyTraitProto enemy_traits = 2;
	repeated ClientEncounterTypeProto enemy_rank_tags = 3;
	string enemy_flavor_text = 4;
}

// ref: Atlas.Proto.ClientEncounterStagePictureProto
message ClientEncounterStagePictureProto {
	string id = 1;
	float spawn_scale = 2;
	float min_scale = 3;
	float max_scale = 4;
	Vector3Proto simple_ar_pos_offset = 5;
}

// ref: Atlas.Proto.ClientEncounterStagePortkeyProto
message ClientEncounterStagePortkeyProto {
	string scene_id = 1;
	string portal_id = 2;
	string object_placement_id = 3;
	string portal_placement_id = 4;
	string portkey_asset = 5;
}

// ref: Atlas.Proto.ClientEncounterStageProto
message ClientEncounterStageProto {
	// ref: Atlas.Proto.ClientEncounterStageProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		swish = 1;
		combat = 2;
		portkey = 3;
		picture = 4;
	}

	ClientEncounterStageSwishProto swish = 1;
	ClientEncounterStageCombatProto combat = 2;
	ClientEncounterStagePortkeyProto portkey = 3;
	ClientEncounterStagePictureProto picture = 4;
	float disappear_delay = 5;
	string intro_text = 6;
	repeated ClientSequenceDataProto stage_setup_sequence = 7;
	repeated ClientSequenceDataProto stage_completion_sequence = 8;
	string spell_aim_layout = 9;
	repeated string idle_loop_timelines = 10;
	string rng_intro_timeline = 11;
	string rng_loop_timeline = 12;
	string spell_failed_timeline = 13;
	repeated string combat_spell_list = 14;
}

// ref: Atlas.Proto.ClientEncounterStageSwishProto
message ClientEncounterStageSwishProto {
	AudioParameterProto trace_succeeds_fanfare = 1;
	AudioParameterProto trace_fails_fanfare = 2;
}

// ref: Atlas.Proto.ClientEncounterTypeProto
message ClientEncounterTypeProto {
	string id = 1;
	bool show_in_look_in = 2;
	string look_in_description = 3;
	string look_in_icon = 4;
	string conditional_tag_stat_desc = 5;
}

// ref: Atlas.Proto.ClientFlooNetworkConfigProto
message ClientFlooNetworkConfigProto {
	// ref: Atlas.Proto.ClientFlooNetworkConfigProto/Types/ElectoralVotesPerFlooPoints
	message ElectoralVotesPerFlooPoints {
		repeated string fortress_prefabs = 1;
	}

	repeated ElectoralVotesPerFlooPoints electoral_votes_per_floo_points = 1;
}

// ref: Atlas.Proto.ClientFtueVideoConfigProto
message ClientFtueVideoConfigProto {
	// ref: Atlas.Proto.ClientFtueVideoConfigProto/VideoSourceOneofCase
	enum VideoSourceOneofCase {
		none = 0;
		from_assets = 1;
		from_url = 2;
	}

	ClientFtueVideoFallbackDefinitionProto from_assets = 1;
	ClientFtueVideoNameDefinitionProto from_url = 2;
	repeated string quality_buckets = 3;
	map<string, ClientFtueVideoQualityMappingProto> quality_mappings = 4;
}

// ref: Atlas.Proto.ClientFtueVideoFallbackDefinitionProto
message ClientFtueVideoFallbackDefinitionProto {
	repeated ClientFtueVideoNameDefinitionProto name_definitions = 1;
}

// ref: Atlas.Proto.ClientFtueVideoFromAssetProto
message ClientFtueVideoFromAssetProto {
	string asset_name_format = 1;
	string fallback_asset_name_format = 2;
}

// ref: Atlas.Proto.ClientFtueVideoFromUrlProto
message ClientFtueVideoFromUrlProto {
	string url_format = 1;
}

// ref: Atlas.Proto.ClientFtueVideoNameDefinitionProto
message ClientFtueVideoNameDefinitionProto {
	string name_format = 1;
}

// ref: Atlas.Proto.ClientFtueVideoQualityMappingProto
message ClientFtueVideoQualityMappingProto {
	// ref: Atlas.Proto.ClientFtueVideoQualityMappingProto/Types/Measure
	enum Measure {
		camera_pixel_width = 0;
		camera_pixel_height = 1;
		screen_pixel_width = 2;
		screen_pixel_height = 3;
	}

	Measure measure = 1;
	int32 lower_bound = 2;
	int32 upper_bound = 3;
}

// ref: Atlas.Proto.ClientGameConfigProto
message ClientGameConfigProto {
	string id = 1;
	ColorProto target_glyph_color = 2;
	ColorProto reticle_glyph_color = 3;
	ColorProto aligned_glyph_color = 4;
	float encounter_angle_of_spawn = 5;
	float time_before_ar_hint_display = 6;
	float max_lock_distance_from_origin = 7;
	float distance_behind_camera_to_spawn_marker = 8;
	float time_before_switch_to_ar_simple = 9;
	string tutorial_encounter_id = 10;
	float encounter_reset_gforce = 11;
	float local_map_update_interval_seconds = 12;
	ClientFlooNetworkConfigProto floo_network_config = 13;
	repeated int64 floo_contribution_button_values = 14;
	int32 app_background_map = 15;
	int32 app_background_full = 16;
	float triggerable_cooldown = 17;
	int32 level_up_trigger_priority = 18;
	int32 walkbox_trigger_priority = 19;
	PermissionsConfigStaticList permissions_config = 20;
	repeated float swish_game_scoring_thresholds = 22;
	repeated float swish_game_scoring_bonuses = 23;
	AudioConfigProto audio_config = 24;
	repeated string audio_initial_banks = 25;
	repeated CollectionSubfeaturePrestigeLevelsProto subfeature_prestige_levels = 26;
	ClientBonusConfigProto bonus_config = 27;
	string portkey_wrackspurt_collection_haptic_key = 28;
	map<string, string> parkmode_bgs = 29;
	int32 potion_masternote_unlock_treshold = 30;
	repeated CollectionSubfeatureFamilyOrdersProto subfeature_family_orders = 31;
	repeated BatterySaverProfile battery_saver_profiles = 32;
	int32 rate_app_min_player_level = 33;
	int32 rate_app_cooldown_days = 34;
	int32 too_fast_cooldown = 35;
	repeated EncounterSoundBanks encounter_banks = 36;
	int32 daily_reward_popup_trigger_priority = 37;
	int32 rate_app_trigger_priority = 38;
	ClientFtueVideoConfigProto ftue_video = 43;
	string tutorial_potion_brew = 44;
	string generic_trace_spell_fail_sfx = 45;
	string tracing_spell_glyph_sfx = 46;
	string tracing_complete_sfx = 47;
	string spell_bar_increasing_sfx = 48;
	string bad_spell_cast_sfx = 49;
	string good_spell_cast_sfx = 50;
	string great_spell_cast_sfx = 51;
	string perfect_spell_cast_sfx = 52;
	string registry_sticker_placed_haptic_key = 53;
	repeated string rewards_vessel_by_rarity = 54;
	repeated string rewards_sound_banks = 55;
	string first_sticker_storyboard_id = 56;
	string first_sticker_collection_id = 57;
	ColorProto avatar_default_color = 58;
	SoundConfigProto lock_on_completion_sfx = 59;
	SoundConfigProto lock_on_time_up_sfx = 60;
	SoundConfigProto protego_cast_sfx = 61;
	SoundConfigProto protego_time_up_sfx = 62;
	int32 ms_before_final_intensity = 63;
	int32 ms_before_secondary_intensity = 64;
	repeated AudioParameterProto challenge_thirty_seconds_left_stinger = 65;
	repeated AudioParameterProto challenge_encounter_player_victorious_stinger = 66;
	repeated AudioParameterProto challenge_encounter_player_defeated_stinger = 67;
	repeated AudioParameterProto challenge_begin_stinger = 68;
	repeated AudioParameterProto challenge_finish_victory = 69;
	repeated AudioParameterProto challenge_finish_defeat = 70;
	repeated AudioParameterProto challenge_elite_mob_spawns_stinger = 71;
	string internet_reachability_check_url = 72;
	int32 rate_app_max_prompts = 73;
	int32 rate_app_version = 74;
	int32 rate_app_trigger_wizarding_challenge = 75;
	int32 rate_app_trigger_sticker_page_complete = 76;
	int32 rate_app_trigger_event_quest_line_complete = 77;
	int32 checks_until_gps_prompt = 78;
	repeated string fortress_sound_banks = 79;
	SoundConfigProto ten_seconds_left_in_challenge_sfx = 80;
	SoundConfigProto long_second_left_in_challenge_sfx = 81;
	SoundConfigProto short_half_second_left_in_challenge_sfx = 82;
	SoundConfigProto one_minute_warning_sfx = 83;
	bool rate_app_trigger_map_enter = 84;
	string professions_affinity_advantage_icon = 85;
	string professions_affinity_neutral_icon = 86;
	string professions_affinity_disadvantage_icon = 87;
	int32 internet_outage_backoff_time = 88;
	string ar_core_storyboard_trigger = 89;
	repeated VoiceOverLanguageMapping voice_over_mappings = 90;
	int32 in_app_message_trigger_priority = 91;
	float internal_fortress_interact_range = 92;
	float low_connectivity_threshold_bytes_per_ms = 93;
}

// ref: Atlas.Proto.ClientGameDataWrapper
message ClientGameDataWrapper {
	repeated ClientGmTemplate messages = 1;
}

// ref: Atlas.Proto.ClientGmTemplate
message ClientGmTemplate {
	// ref: Atlas.Proto.ClientGmTemplate/MessageTypeOneofCase
	enum MessageTypeOneofCase {
		none = 0;
		collection_family = 1;
		collection_item = 2;
		walkbox_template = 3;
		encounter = 4;
		portkey = 5;
		vault_item = 6;
		game_config = 7;
		store_pack = 8;
		spell = 9;
		protego_pattern = 10;
		chamber_template = 11;
		collection_page = 12;
		team_control = 13;
		store_config = 14;
		store_subcategory = 15;
		haptic = 16;
		profession = 17;
		bonus_category = 18;
		vault_category = 19;
		profile_config = 20;
		map_ingredient = 21;
		map_ability = 22;
		storyboard = 23;
		rpgstat = 24;
		rpgstats_block = 25;
		selfie_avatar_asset = 26;
		buff = 27;
		outpost_template = 29;
		challenge_bonus = 30;
		recipe = 31;
		master_note = 32;
		quest = 33;
		daily_reward_monthly_schedule = 34;
		encounter_type = 35;
	}

	ClientCollectionFamilyProto collection_family = 1;
	ClientCollectionItemProto collection_item = 2;
	ClientWalkboxTemplateProto walkbox_template = 3;
	ClientEncounterProto encounter = 4;
	ClientPortkeyProto portkey = 5;
	ClientVaultItemProto vault_item = 6;
	ClientGameConfigProto game_config = 7;
	ClientStorePackProto store_pack = 8;
	ClientSpellProto spell = 9;
	ClientProtegoPatternProto protego_pattern = 10;
	ClientChamberTemplateProto chamber_template = 11;
	ClientCollectionPageProto collection_page = 12;
	ClientTeamControlProto team_control = 13;
	ClientStoreConfigProto store_config = 14;
	ClientStoreSubcategoryProto store_subcategory = 15;
	ClientHapticProto haptic = 16;
	ClientProfessionProto profession = 17;
	ClientBonusCategoryProto bonus_category = 18;
	ClientVaultCategoryProto vault_category = 19;
	ClientProfileConfigProto profile_config = 20;
	ClientMapIngredientProto map_ingredient = 21;
	ClientMapAbilityProto map_ability = 22;
	ClientStoryboardProto storyboard = 23;
	ClientRpgstatProto rpgstat = 24;
	ClientRpgstatsBlockProto rpgstats_block = 25;
	ClientSelfieAvatarAssetProto selfie_avatar_asset = 26;
	ClientBuffProto buff = 27;
	ClientOutpostTemplateProto outpost_template = 29;
	ClientChallengeBonusProto challenge_bonus = 30;
	ClientRecipeProto recipe = 31;
	ClientMasterNoteProto master_note = 32;
	ClientQuestProto quest = 33;
	ClientDailyRewardMonthlyScheduleProto daily_reward_monthly_schedule = 34;
	ClientEncounterTypeProto encounter_type = 35;
}

// ref: Atlas.Proto.ClientHapticProto
message ClientHapticProto {
	string id = 1;
	repeated int32 ioswait_timings = 2;
	repeated int32 ioshaptic_types = 3;
	repeated int32 android_wait_timings = 4;
	repeated int32 android_amplitudes = 5;
	repeated int32 android_durations = 6;
}

// ref: Atlas.Proto.ClientHouseProto
message ClientHouseProto {
	string name = 1;
	string description = 2;
	string icon = 3;
	string anim_in = 4;
	string anim_loop = 5;
	string anim_out = 6;
	ColorProto color = 7;
	string sound_select = 8;
	string intro_sound_select = 9;
}

// ref: Atlas.Proto.ClientMapAbilityProto
message ClientMapAbilityProto {
	string id = 1;
	string name = 2;
	string icon = 3;
	string description = 4;
	string effect_sprite = 5;
	string status_icon = 6;
	int32 slot = 7;
	string effect_prefab = 8;
	AdditionalSelectionRule rule = 9;
}

// ref: Atlas.Proto.ClientMapFortressProto
message ClientMapFortressProto {
	string fortress_template_gmt_id = 1;
	string owning_team_id = 2;
	int64 electoral_votes = 3;
	string season_id = 4;
	string region_id = 5;
	int64 wc_active_until_ms = 6;
}

// ref: Atlas.Proto.ClientMapGreenhouseProto
message ClientMapGreenhouseProto {
	int64 next_loot_time = 1;
	string greenhouse_template_gmt_id = 2;
}

// ref: Atlas.Proto.ClientMapIngredientProto
message ClientMapIngredientProto {
	string id = 1;
	string prefab = 2;
}

// ref: Atlas.Proto.ClientMapLandmarkProto
message ClientMapLandmarkProto {
	string collection_family_id = 1;
	double poi_latitude = 2;
	double poi_longitude = 3;
	repeated double border_latitude = 4;
	repeated double border_longitude = 5;
}

// ref: Atlas.Proto.ClientMapOutpostProto
message ClientMapOutpostProto {
	int64 next_loot_time = 1;
	ClientDarkDetectorAmplifierProto dark_detector_amplifier = 2;
	string outpost_template_gmt_id = 3;
}

// ref: Atlas.Proto.ClientMapPoiProto
message ClientMapPoiProto {
	// ref: Atlas.Proto.ClientMapPoiProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		outpost = 6;
		fortress = 7;
		greenhouse = 8;
	}

	string id = 1;
	string name = 2;
	double latitude = 3;
	double longitude = 4;
	string description = 5;
	ClientMapOutpostProto outpost = 6;
	ClientMapFortressProto fortress = 7;
	ClientMapGreenhouseProto greenhouse = 8;
	PoiAccessibility poi_accessibility = 9;
}

// ref: Atlas.Proto.ClientMapPotionIngredientProto
message ClientMapPotionIngredientProto {
	// ref: Atlas.Proto.ClientMapPotionIngredientProto/Types/Source
	enum Source {
		UNKNOWN = 0;
		STANDARD = 1;
		SOCIAL_GROWING = 2;
	}

	string ingredient_gmt_id = 1;
	double latitude = 2;
	double longitude = 3;
	bytes ticket = 4;
	int64 expiry_time_ms = 5;
	Source source = 6;
}

// ref: Atlas.Proto.ClientMapTraceProto
message ClientMapTraceProto {
	// ref: Atlas.Proto.ClientMapTraceProto/Types/Source
	enum Source {
		UNKNOWN = 0;
		STANDARD = 1;
		DARK_DETECTOR = 2;
	}

	string encounter_gmt_id = 1;
	double latitude = 2;
	double longitude = 3;
	bytes encounter_ticket = 4;
	Source source = 5;
	int64 expiry_time_ms = 6;
}

// ref: Atlas.Proto.ClientMasterNoteProto
message ClientMasterNoteProto {
	string id = 1;
	string name = 2;
	string description = 3;
}

// ref: Atlas.Proto.ClientOutpostTemplateProto
message ClientOutpostTemplateProto {
	string id = 1;
	string interior = 2;
	string exterior = 3;
}

// ref: Atlas.Proto.ClientPlayerChallengeState
message ClientPlayerChallengeState {
	string fortress_id = 1;
	ClientMapPoiProto fortress_poi = 2;
}

// ref: Atlas.Proto.ClientPlayerMapState
message ClientPlayerMapState {
}

// ref: Atlas.Proto.ClientPlayerProto
message ClientPlayerProto {
	// ref: Atlas.Proto.ClientPlayerProto/StateOneofCase
	enum StateOneofCase {
		none = 0;
		map = 2;
		challenge = 3;
	}

	int64 creation_time_ms = 1;
	ClientPlayerMapState map = 2;
	ClientPlayerChallengeState challenge = 3;
}

// ref: Atlas.Proto.ClientPlayerSnapshotProto
message ClientPlayerSnapshotProto {
	map<string, int64> vault_items = 1;
	repeated ActiveBuffProto buffs = 2;
}

// ref: Atlas.Proto.ClientPortkeyProto
message ClientPortkeyProto {
	string id = 1;
	string name = 2;
	string icon = 3;
	string localized_complete_text = 4;
}

// ref: Atlas.Proto.ClientProfessionNodeLevelProto
message ClientProfessionNodeLevelProto {
	bool is_grant_new_map_ability = 1;
}

// ref: Atlas.Proto.ClientProfessionNodeProto
message ClientProfessionNodeProto {
	string name = 1;
	string icon = 2;
	repeated ClientProfessionNodeLevelProto levels = 3;
	string unlock_desc = 4;
	string completed_desc = 5;
	string completed_icon = 6;
}

// ref: Atlas.Proto.ClientProfessionProto
message ClientProfessionProto {
	string id = 1;
	repeated ClientProfessionRankProto profession_ranks = 2;
	string name = 3;
	string desc = 4;
	string icon = 5;
	string mentor_name = 6;
	string mentor_desc = 7;
	string mentor_icon = 8;
	string screen_background = 9;
	string icon_stamp = 10;
	string screen_background_header = 11;
	bool show_coming_soon = 12;
	string icon_highlighted = 13;
	bool show_profession_rank_meter = 14;
	string profession_activated_sfx = 15;
	map<string, ClientProfessionRankProto> profession_ranks_map = 16;
}

// ref: Atlas.Proto.ClientProfessionRankProto
message ClientProfessionRankProto {
	map<string, ClientProfessionNodeProto> profession_nodes_map = 1;
	string name = 2;
	repeated ClientProfessionNodeProto profession_nodes = 3;
	string image_unlocked = 4;
	string image_unlocked_open = 5;
	string image_locked = 6;
	string image_locked_open = 7;
	int32 professin_rank_order = 8;
}

// ref: Atlas.Proto.ClientProfileConfigProto
message ClientProfileConfigProto {
	string id = 1;
	map<string, ClientTitleProto> titles = 2;
	map<string, ClientBadgeProto> badges = 3;
	map<string, ClientHouseProto> houses = 4;
	map<string, ClientThemeProto> themes = 5;
	map<string, ClientWandCoreProto> wand_cores = 6;
	map<string, ClientWandWoodProto> wand_woods = 7;
	map<string, ClientWandFlexibilityProto> wand_flexibilities = 8;
	map<string, ClientWandLengthProto> wand_lengths = 9;
}

// ref: Atlas.Proto.ClientProtegoPatternProto
message ClientProtegoPatternProto {
	string id = 1;
	Vector2Proto ui_target_start_pos = 2;
	float ui_target_start_radius = 3;
	Vector2Proto ui_target_end_pos = 4;
	float ui_target_end_radius = 5;
}

// ref: Atlas.Proto.ClientQuestProto
message ClientQuestProto {
	string id = 1;
	int32 sort_order = 2;
	string quest_name_loc_key = 3;
	string quest_desc_loc_key = 4;
}

// ref: Atlas.Proto.ClientRecipeProto
message ClientRecipeProto {
	string id = 1;
	string name = 2;
	string description = 3;
	string icon = 4;
	string model = 5;
	string collect_fx = 6;
	string crafting_fx = 7;
	string reveal_fx = 8;
	ColorProto primary_color = 9;
	ColorProto secondary_color = 10;
	int32 index = 11;
}

// ref: Atlas.Proto.ClientRpgstatProto
message ClientRpgstatProto {
	string id = 1;
	string tooltip = 2;
	bool percentage = 3;
	bool show_ui = 4;
	string stat_name = 5;
	int32 display_threshold = 6;
	string icon_display_type = 7;
	string info_desc = 8;
	map<string, string> icons = 9;
}

// ref: Atlas.Proto.ClientRpgstatsBlockProto
message ClientRpgstatsBlockProto {
	string id = 1;
	repeated string relevant_stats = 2;
}

// ref: Atlas.Proto.ClientSelfieAvatarAssetProto
message ClientSelfieAvatarAssetProto {
	// ref: Atlas.Proto.ClientSelfieAvatarAssetProto/Types/SelfieAvatarAssetType
	enum SelfieAvatarAssetType {
		UNKNOWN_ASSET_TYPE = 0;
		LENSE = 1;
		FILTER = 2;
		FRAME = 3;
		STICKER = 4;
		STOCK = 5;
	}

	// ref: Atlas.Proto.ClientSelfieAvatarAssetProto/Types/SelfieAvatarLensType
	enum SelfieAvatarLensType {
		UNKNOWN_LENS_TYPE = 0;
		HEAD = 1;
		FACE = 2;
		NECK = 3;
	}

	// ref: Atlas.Proto.ClientSelfieAvatarAssetProto/Types/SelfieAvatarMediaSupportedType
	enum SelfieAvatarMediaSupportedType {
		UNKNOWN_MEDIA_TYPE = 0;
		ALL = 1;
		VIDEO = 2;
		PHOTO = 3;
	}

	string id = 1;
	repeated Requirements unlock_conditions = 2;
	string asset_script_name = 3;
	string icon = 4;
	SelfieAvatarAssetType asset_type = 5;
	SelfieAvatarLensType lens_type = 6;
	bool visible = 7;
	SelfieAvatarMediaSupportedType media_supported_type = 8;
	bool animated = 9;
	string store_pack_id = 10;
	int32 order_id = 11;
	bool is_full_body_lens = 12;
	bool is_empty_asset = 13;
	bool show_badge = 14;
	Requirements visibility_conditions = 15;
	string stock_asset_name = 16;
}

// ref: Atlas.Proto.ClientSequenceDataProto
message ClientSequenceDataProto {
	int32 sequence_type = 1;
	string obstacle = 2;
	string obstacle_alias = 3;
	string encounter_target = 4;
	string timeline_file = 5;
	float sequence_delay_time = 6;
	string sequence_layout_node = 7;
}

// ref: Atlas.Proto.ClientSpellProto
message ClientSpellProto {
	string id = 1;
	string name = 2;
	repeated string charge_up_effect = 3;
	map<string, string> timelines = 4;
	map<string, string> critical_hits = 5;
	string pattern = 6;
	string glyph_image = 7;
	string protego_player_succeed_tl = 8;
	string protego_player_failed_tl = 9;
	string protego_player_succeed_intro_tl = 10;
	string end_burst_effect = 11;
	string rng_vfx_tl = 12;
	string spell_rng_loop_tl = 13;
	string spell_rng_succeed_tl = 14;
	string spell_rng_fail_tl = 15;
}

// ref: Atlas.Proto.ClientStoreConfigProto
message ClientStoreConfigProto {
	string id = 1;
	repeated StoreCategoryProto store_categories = 2;
	repeated StoreRarityProto store_rarities = 3;
	string default_store_pack_icon_path = 4;
}

// ref: Atlas.Proto.ClientStorePackProto
message ClientStorePackProto {
	string id = 1;
	bool show_in_inline_buy = 2;
	string name = 3;
	repeated StorePackConfigProto store_pack_config = 4;
	string sku_id = 5;
	string override_title_loc_key = 6;
	int32 max_reward_item_count = 7;
}

// ref: Atlas.Proto.ClientStoreSubcategoryProto
message ClientStoreSubcategoryProto {
	string id = 1;
	int32 priority = 2;
}

// ref: Atlas.Proto.ClientStoryboardProto
message ClientStoryboardProto {
	string id = 1;
	repeated ClientStoryboardStep steps = 2;
	string trigger_point = 3;
	int32 priority = 4;
}

// ref: Atlas.Proto.ClientStoryboardStep
message ClientStoryboardStep {
	// ref: Atlas.Proto.ClientStoryboardStep/DataOneofCase
	enum DataOneofCase {
		none = 0;
		generic_dialog = 2;
		pause = 3;
		advice_overlay = 4;
		advice_interjection = 5;
		conversation_interjection = 6;
	}

	string custom_state = 1;
	StoryboardGenericDialogStep generic_dialog = 2;
	StoryboardPauseStep pause = 3;
	StoryboardAdviceOverlayStep advice_overlay = 4;
	StoryboardAdviceInterjectionStep advice_interjection = 5;
	StoryboardConversationInterjectionStep conversation_interjection = 6;
	string call_to_action_asset = 7;
	string call_to_action_button_identifier = 8;
}

// ref: Atlas.Proto.ClientTeamControlProto
message ClientTeamControlProto {
	string id = 1;
	string team_name = 2;
	string team_icon = 3;
	ColorProto team_color = 4;
	string team_header_icon = 5;
	string team_banner = 6;
	string team_flag = 7;
}

// ref: Atlas.Proto.ClientTelemetryAssetLoad
message ClientTelemetryAssetLoad {
	string asset_name = 1;
	double total_load_time = 2;
	repeated string bundle_name = 3;
}

// ref: Atlas.Proto.ClientTelemetryAvatarInteract
message ClientTelemetryAvatarInteract {
	int64 player_level = 1;
}

// ref: Atlas.Proto.ClientTelemetryBundleDownload
message ClientTelemetryBundleDownload {
	string bundle_name = 1;
	string bundle_url = 2;
	double load_time = 3;
}

// ref: Atlas.Proto.ClientTelemetryButtonPress
message ClientTelemetryButtonPress {
	string pressed_button_id = 1;
}

// ref: Atlas.Proto.ClientTelemetryCombatGameOffensiveLockOnAttempt
message ClientTelemetryCombatGameOffensiveLockOnAttempt {
	int32 player_level = 1;
	string encounter_id = 2;
	string node_location = 3;
	CombatPhaseOutcome outcome = 4;
}

// ref: Atlas.Proto.ClientTelemetryCombatGameOffensiveTraceAttempt
message ClientTelemetryCombatGameOffensiveTraceAttempt {
	int32 player_level = 1;
	string encounter_id = 2;
	string spell_id = 3;
	CombatPhaseOutcome outcome = 4;
	int32 checkpoint_fail_round = 5;
}

// ref: Atlas.Proto.ClientTelemetryCombatGameOutOfEnergyDialogShown
message ClientTelemetryCombatGameOutOfEnergyDialogShown {
	int32 player_level = 1;
	string encounter_id = 2;
}

// ref: Atlas.Proto.ClientTelemetryCombatGameOutOfEnergyPurchaseButton
message ClientTelemetryCombatGameOutOfEnergyPurchaseButton {
	int32 player_level = 1;
	string encounter_id = 2;
}

// ref: Atlas.Proto.ClientTelemetryCombatGamePotionButton
message ClientTelemetryCombatGamePotionButton {
	int32 player_level = 1;
	string encounter_id = 2;
	int32 attempt = 3;
}

// ref: Atlas.Proto.ClientTelemetryCombatGameProtegoCastAttempt
message ClientTelemetryCombatGameProtegoCastAttempt {
	int32 player_level = 1;
	string encounter_id = 2;
	string spell_id = 3;
	CombatPhaseOutcome outcome = 4;
	int32 checkpoint_fail_round = 5;
}

// ref: Atlas.Proto.ClientTelemetryDeeplinkTriggered
message ClientTelemetryDeeplinkTriggered {
	string link = 1;
	bool rejected = 2;
	string rejection_reason = 3;
}

// ref: Atlas.Proto.ClientTelemetryDescriptionClickthrough
message ClientTelemetryDescriptionClickthrough {
	string outpost_id = 1;
	string partner_id = 2;
}

// ref: Atlas.Proto.ClientTelemetryEncounterStart
message ClientTelemetryEncounterStart {
	bool battery_saver_on = 1;
}

// ref: Atlas.Proto.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged
message ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged {
	int32 player_level = 1;
	string warning_severity = 2;
}

// ref: Atlas.Proto.ClientTelemetryEnvironmentalTagsUIEntered
message ClientTelemetryEnvironmentalTagsUIEntered {
	int32 player_level = 1;
	string warning_severity = 2;
	string weather_tag = 3;
	string moon_tag = 4;
	string time_of_day_tag = 5;
}

// ref: Atlas.Proto.ClientTelemetryException
message ClientTelemetryException {
	string exception_type = 1;
	string stack_trace = 2;
}

// ref: Atlas.Proto.ClientTelemetryFamilyDetails
message ClientTelemetryFamilyDetails {
	string family_id = 1;
}

// ref: Atlas.Proto.ClientTelemetryGreenhouseInteract
message ClientTelemetryGreenhouseInteract {
	POIInteract common_data = 1;
}

// ref: Atlas.Proto.ClientTelemetryHyperlinkClickthrough
message ClientTelemetryHyperlinkClickthrough {
	string url = 1;
	string outpost_id = 2;
	string partner_id = 3;
}

// ref: Atlas.Proto.ClientTelemetryImpression
message ClientTelemetryImpression {
	string outpost_id = 1;
	string partner_id = 2;
}

// ref: Atlas.Proto.ClientTelemetryLandmarkInteract
message ClientTelemetryLandmarkInteract {
	string landmark_type = 1;
	POIInteract common_data = 2;
}

// ref: Atlas.Proto.ClientTelemetryLoginComplete
message ClientTelemetryLoginComplete {
	string auth_provider_id = 1;
	string auth_status = 2;
}

// ref: Atlas.Proto.ClientTelemetryLoginStart
message ClientTelemetryLoginStart {
	string auth_provider_id = 1;
}

// ref: Atlas.Proto.ClientTelemetryOutpostInteract
message ClientTelemetryOutpostInteract {
	string outpost_type = 1;
	POIInteract common_data = 2;
}

// ref: Atlas.Proto.ClientTelemetryPermissionsCheckFailed
message ClientTelemetryPermissionsCheckFailed {
	string permission_type = 1;
}

// ref: Atlas.Proto.ClientTelemetryPermissionsRequested
message ClientTelemetryPermissionsRequested {
	string permission_type = 1;
	bool granted = 2;
}

// ref: Atlas.Proto.ClientTelemetryPortkeysAdvancedARCheck
message ClientTelemetryPortkeysAdvancedARCheck {
	bool advanced_ar_on = 1;
	string portkey_id = 2;
	ARMode ar_mode = 3;
}

// ref: Atlas.Proto.ClientTelemetryPortkeysOutOfBoundsReached
message ClientTelemetryPortkeysOutOfBoundsReached {
	string portkey_id = 2;
}

// ref: Atlas.Proto.ClientTelemetryPortkeysWrackspurtTapped
message ClientTelemetryPortkeysWrackspurtTapped {
	string wrackspurt_id = 1;
	string portkey_id = 2;
}

// ref: Atlas.Proto.ClientTelemetryPotionsMasterNoteAttempt
message ClientTelemetryPotionsMasterNoteAttempt {
	string potion_name_id = 1;
	string cauldron_id = 2;
	string master_note_id = 3;
	int32 gesture_count = 4;
	repeated string gesture_steps = 5;
	bool master_note_start = 6;
	int32 gesture_attempt_step = 7;
	bool gesture_success = 8;
}

// ref: Atlas.Proto.ClientTelemetryProfessionMainMenu
message ClientTelemetryProfessionMainMenu {
	int32 player_level = 1;
	string active_profession_gmt_id = 2;
	repeated ClientTelemetryProfessionProgress profession_progress = 3;
}

// ref: Atlas.Proto.ClientTelemetryProfessionNodeSelected
message ClientTelemetryProfessionNodeSelected {
	int32 player_level = 1;
	string active_profession_gmt_id = 2;
	repeated ClientTelemetryProfessionProgress profession_progress = 3;
	string node_id = 4;
}

// ref: Atlas.Proto.ClientTelemetryProfessionProgress
message ClientTelemetryProfessionProgress {
	string profession_gmt_id = 1;
	uint32 rank_points = 2;
}

// ref: Atlas.Proto.ClientTelemetryProfileButtonAssset
message ClientTelemetryProfileButtonAssset {
	string pressed_button_id = 1;
	bool sticker_add = 2;
	CategoryAssetType asset_type = 3;
}

// ref: Atlas.Proto.ClientTelemetryProfileButtonLens
message ClientTelemetryProfileButtonLens {
	string pressed_button_id = 1;
	CategoryLens lens_category = 2;
}

// ref: Atlas.Proto.ClientTelemetryProfileButtonRandomize
message ClientTelemetryProfileButtonRandomize {
	CategoryRandomize category = 1;
}

// ref: Atlas.Proto.ClientTelemetryProfilePortraitAction
message ClientTelemetryProfilePortraitAction {
	ProfileTabSource baseline_src = 1;
	PortraitType portrait_format = 2;
	PortraitAction portrait_action = 3;
	string portrait_lens_top = 4;
	string portrait_lens_mid = 5;
	string portrait_lens_bottom = 6;
	string portrait_frame = 7;
	string portrait_filter = 8;
	repeated string portrait_sticker_ids = 9;
	int32 portrait_sticker_count = 10;
	CategoryShareLocation share_source = 11;
	DownloadType share_type = 12;
	string share_network = 13;
	CategoryShareLocation download_source = 14;
	DownloadType download_type = 15;
}

// ref: Atlas.Proto.ClientTelemetryProfileScreenGrab
message ClientTelemetryProfileScreenGrab {
	CategoryShareLocation screengrab_location = 1;
}

// ref: Atlas.Proto.ClientTelemetryRateApp
message ClientTelemetryRateApp {
	bool having_fun_response = 1;
	string platform = 2;
	string client_version = 3;
}

// ref: Atlas.Proto.ClientTelemetryRegistryInfo
message ClientTelemetryRegistryInfo {
}

// ref: Atlas.Proto.ClientTelemetryRewardsFlow
message ClientTelemetryRewardsFlow {
	bool skipped_long_rewards = 1;
}

// ref: Atlas.Proto.ClientTelemetrySettingsARModeToggled
message ClientTelemetrySettingsARModeToggled {
	ARMode ar_mode = 1;
}

// ref: Atlas.Proto.ClientTelemetrySettingsAuthUpdated
message ClientTelemetrySettingsAuthUpdated {
	string primary_auth_channel = 1;
	string secondary_auth_channel = 2;
	string platform = 3;
}

// ref: Atlas.Proto.ClientTelemetrySettingsBatteryModeToggled
message ClientTelemetrySettingsBatteryModeToggled {
	bool battery_mode = 1;
}

// ref: Atlas.Proto.ClientTelemetrySmokeTest
message ClientTelemetrySmokeTest {
	string current_bot_program_name = 1;
	double time_start = 2;
	double time_end = 3;
	double time_delta = 4;
	int32 smoke_test_count = 5;
}

// ref: Atlas.Proto.ClientTelemetryStartup
message ClientTelemetryStartup {
	string client_version = 2;
	string device_type = 3;
	bool first_time = 4;
	double load_to_tos_login_time = 5;
	double load_to_map_time = 6;
	string device_os = 7;
	string graphics_device_vendor = 8;
	string graphics_device_name = 9;
	string graphics_device_type = 10;
	double graphics_shader_level = 11;
	repeated ClientTelemetrySubsystemStartup subsystem_load_times = 12;
}

// ref: Atlas.Proto.ClientTelemetryStickerDetails
message ClientTelemetryStickerDetails {
	string collection_id = 1;
}

// ref: Atlas.Proto.ClientTelemetryStopwatch
message ClientTelemetryStopwatch {
	string event_name = 1;
	double min = 2;
	double max = 3;
	double average = 4;
}

// ref: Atlas.Proto.ClientTelemetryStorePopupOpen
message ClientTelemetryStorePopupOpen {
	string pack_id = 1;
	bool player_can_afford = 2;
	repeated string currency_type = 3;
	repeated int64 cost = 4;
	repeated int64 player_wallet = 5;
	double real_money_cost = 6;
	string real_money_currency_code = 7;
}

// ref: Atlas.Proto.ClientTelemetryStoreTabOpen
message ClientTelemetryStoreTabOpen {
	string page_id = 1;
}

// ref: Atlas.Proto.ClientTelemetrySubsystemStartup
message ClientTelemetrySubsystemStartup {
	string system_name = 1;
	float load_time = 2;
}

// ref: Atlas.Proto.ClientTelemetrySurfaceDetection
message ClientTelemetrySurfaceDetection {
	string encounter_gmt_id = 1;
	bool found_surface = 2;
}

// ref: Atlas.Proto.ClientTelemetrySwishSpellGameEnd
message ClientTelemetrySwishSpellGameEnd {
	// ref: Atlas.Proto.ClientTelemetrySwishSpellGameEnd/Types/FailReason
	enum FailReason {
		none = 0;
		timer = 1;
		checkpoint = 2;
		score = 3;
	}

	string encounter_id = 1;
	int32 attempt_number = 2;
	bool success = 3;
	FailReason fail_reason = 4;
	double cast_time = 5;
	int32 failed_checkpoint_number = 6;
	double average_drawing_error = 7;
	double median_drawing_error = 8;
	double final_spellbar_score = 9;
	string encounter_proto_id = 10;
}

// ref: Atlas.Proto.ClientTelemetrySwishSpellGameStart
message ClientTelemetrySwishSpellGameStart {
	string encounter_id = 1;
	int32 attempt_number = 2;
	int32 player_level = 3;
	string encounter_proto_id = 4;
	string spell_pattern = 5;
	ARMode ar_mode = 6;
}

// ref: Atlas.Proto.ClientTelemetryVaultItemImpression
message ClientTelemetryVaultItemImpression {
	string vault_item_id = 1;
}

// ref: Atlas.Proto.ClientTelemetryVaultTabImpression
message ClientTelemetryVaultTabImpression {
	string category_name = 1;
}

// ref: Atlas.Proto.ClientTelemetryWizardingChallengeMoreInfo
message ClientTelemetryWizardingChallengeMoreInfo {
	int32 mob_level = 1;
	string mob_affinity = 2;
	int32 player_profession_rank = 3;
	string player_profession_gmt_id = 4;
	ActiveEngagement is_mob_already_engaged = 5;
}

// ref: Atlas.Proto.ClientTelemetryWizardingChallengeSelectMob
message ClientTelemetryWizardingChallengeSelectMob {
	int32 mob_level = 1;
	string mob_affinity = 2;
	string mob_gmt_id = 3;
	int32 player_profession_rank = 4;
	string player_profession_gmt_id = 5;
	ActiveEngagement is_mob_already_engaged = 6;
	string player_engagement_with_mob = 7;
}

// ref: Atlas.Proto.ClientThemeProto
message ClientThemeProto {
	string icon = 1;
}

// ref: Atlas.Proto.ClientTitleProto
message ClientTitleProto {
	string name = 1;
	string unlocked_description = 2;
	bool disabled = 3;
	bool show_badge = 4;
	Requirements visibility_conditions = 5;
	Requirements unlock_conditions = 6;
}

// ref: Atlas.Proto.ClientVaultCategoryProto
message ClientVaultCategoryProto {
	string id = 1;
	string name = 2;
	string description = 3;
	string icon = 4;
	bool show_in_vault = 5;
	float warning_threshold = 6;
	int32 category_display_order = 7;
	string increase_capacity_store_pack_proto_id = 8;
	repeated string increase_capacity_store_pack_proto_ids = 9;
	string store_item_name = 10;
	string store_item_icon = 11;
}

// ref: Atlas.Proto.ClientVaultItemProto
message ClientVaultItemProto {
	string id = 1;
	string name = 2;
	string icon = 3;
	string prefab = 4;
	int64 rarity = 5;
	string description = 6;
	bool show_in_vault_item_menu = 8;
	bool deletable = 9;
	bool show_in_rewards_flow = 10;
	ColorProto color = 11;
	string background = 12;
	int32 ordering = 13;
	SoundConfigProto reward_sound = 14;
	int32 reward_sound_priority = 15;
	string spine_animated_icon = 16;
}

// ref: Atlas.Proto.ClientWalkboxTemplateProto
message ClientWalkboxTemplateProto {
	string id = 1;
	string name = 2;
	string icon = 3;
	string unlocked_icon = 4;
}

// ref: Atlas.Proto.ClientWandCoreProto
message ClientWandCoreProto {
	string name = 1;
	string icon = 2;
	string sound_select = 3;
}

// ref: Atlas.Proto.ClientWandFlexibilityProto
message ClientWandFlexibilityProto {
	string name = 1;
	string icon = 2;
	string model_path = 3;
	int32 slidervalue = 4;
	float fontsize = 5;
	float interspace = 6;
	float movespeed = 7;
	float curvewidth = 8;
	float curveheight = 9;
}

// ref: Atlas.Proto.ClientWandLengthProto
message ClientWandLengthProto {
	string name = 1;
	string model_path = 2;
	int32 slidervalue = 3;
}

// ref: Atlas.Proto.ClientWandWoodProto
message ClientWandWoodProto {
	string name = 1;
	string btn_icon = 2;
	string icon = 3;
	string texture = 4;
	string material = 5;
}

// ref: Atlas.Proto.CollectionFamilyLevelProto
message CollectionFamilyLevelProto {
	int64 xp = 1;
	repeated LootCollectionProto returned_rewards = 2;
	LootCollectionProto one_time_rewards = 3;
	string level_desc = 4;
}

// ref: Atlas.Proto.CollectionFamilyLootRewardProto
message CollectionFamilyLootRewardProto {
	string family_id = 1;
	int32 amount = 2;
}

// ref: Atlas.Proto.CollectionFamilyProto
message CollectionFamilyProto {
	// ref: Atlas.Proto.CollectionFamilyProto/Types/SubfeatureType
	enum SubfeatureType {
		UNSET = 0;
		EXPLORATION = 1;
		CHALLENGE = 2;
		MYSTERIES = 3;
		EVENTS = 4;
	}

	string id = 1;
	CollectionFamilyType family_type = 2;
	repeated string items = 3;
	repeated CollectionFamilyLevelProto levels = 4;
	repeated string pages = 5;
	string family_rune_name = 6;
	string family_rank_table_id = 7;
	repeated LootCollectionProto returned_rewards = 8;
	repeated string rune_id = 9;
	repeated string apex_items = 10;
	Requirements unlock_requirements = 11;
	SubfeatureType subfeature_type = 12;
}

// ref: Atlas.Proto.CollectionFamilyRankProto
message CollectionFamilyRankProto {
	int64 total_xp_req = 1;
	int32 chest_count = 2;
	string small_loottable_id = 3;
	string level_up_loottable_id = 4;
}

// ref: Atlas.Proto.CollectionFamilyRankTableProto
message CollectionFamilyRankTableProto {
	string id = 1;
	repeated CollectionFamilyRankProto rank_data = 2;
}

// ref: Atlas.Proto.CollectionFamilyRequirement
message CollectionFamilyRequirement {
	string family_id = 1;
	int32 family_level = 2;
	ComparisonOperator comparison_operator = 3;
}

// ref: Atlas.Proto.CollectionItemPlacedRequirement
message CollectionItemPlacedRequirement {
	string item_gmt_id = 1;
	bool check_for_current_prestige_only = 2;
	string page_gmt_id = 3;
}

// ref: Atlas.Proto.CollectionItemProto
message CollectionItemProto {
	string id = 1;
	string family_id = 2;
	int32 shard_count = 3;
	int32 rarity = 4;
	LootCollectionProto one_time_rewards = 5;
	string page_id = 6;
	Requirements unlock_requirements = 7;
	repeated int32 shard_counts = 8;
	bool sticker_disabled = 10;
}

// ref: Atlas.Proto.CollectionItemRequirement
message CollectionItemRequirement {
	string item_id = 1;
	ComparisonOperator comparison_operator = 2;
	int32 shards = 3;
}

// ref: Atlas.Proto.CollectionItemRewardProto
message CollectionItemRewardProto {
	string item_id = 1;
	uint32 shard_count = 2;
}

// ref: Atlas.Proto.CollectionPageLevelRequirement
message CollectionPageLevelRequirement {
	string page_gmt_id = 1;
	int32 level = 2;
	ComparisonOperator comparison_operator = 3;
}

// ref: Atlas.Proto.CollectionPageProto
message CollectionPageProto {
	string id = 1;
	string family_id = 2;
	repeated string items = 3;
	repeated LootCollectionProto completion_rewards = 4;
	Requirements unlock_requirements = 5;
}

// ref: Atlas.Proto.CollectionPrestigeLevelProto
message CollectionPrestigeLevelProto {
	string border_image = 1;
	string name = 2;
	ColorProto color = 3;
	bool is_metallic = 4;
	string frame_mesh = 5;
	string normal_map = 6;
	string albedo_map = 7;
	float roughness = 8;
}

// ref: Atlas.Proto.CollectionSubfeatureFamilyOrdersProto
message CollectionSubfeatureFamilyOrdersProto {
	CollectionFamilyProto.SubfeatureType subfeature = 1;
	repeated string family_ids = 2;
}

// ref: Atlas.Proto.CollectionSubfeaturePrestigeLevelsProto
message CollectionSubfeaturePrestigeLevelsProto {
	CollectionFamilyProto.SubfeatureType subfeature = 1;
	repeated CollectionPrestigeLevelProto prestige_levels = 2;
}

// ref: Atlas.Proto.CollectPotionIngredientsQuestProgress
message CollectPotionIngredientsQuestProgress {
	int64 current_potion_ingredient_count = 1;
}

// ref: Atlas.Proto.CollectPotionIngredientsQuestTask
message CollectPotionIngredientsQuestTask {
	int64 required_potion_ingredient_count = 1;
	string ingredient_gmt_id = 2;
}

// ref: Atlas.Proto.CollectStickersProgress
message CollectStickersProgress {
	int64 current_collect_count = 1;
}

// ref: Atlas.Proto.CollectStickersQuestTask
message CollectStickersQuestTask {
	int64 required_collect_count = 1;
	string sticker_gmt_id = 2;
	string sticker_page_gmt_id = 3;
	string sticker_family_gmt_id = 4;
}

// ref: Atlas.Proto.ColorProto
message ColorProto {
	float r = 1;
	float g = 2;
	float b = 3;
	float a = 4;
}

// ref: Atlas.Proto.CombatEnemyStatsProto
message CombatEnemyStatsProto {
	map<string, int64> stat_block = 2;
	map<string, CombatGrowthProto> stat_growth = 3;
}

// ref: Atlas.Proto.CombatGrowthProto
message CombatGrowthProto {
	GrowthType grow_type = 1;
	float growth_adjustment = 2;
}

// ref: Atlas.Proto.CombatMoveTypeProto
message CombatMoveTypeProto {
	// ref: Atlas.Proto.CombatMoveTypeProto/CombatMoveOneofCase
	enum CombatMoveOneofCase {
		none = 0;
		player_attack = 1;
		player_defend = 2;
		player_auto_advance = 3;
	}

	CombatPlayerAttackProto player_attack = 1;
	CombatPlayerDefendProto player_defend = 2;
	CombatPlayerAutoAdvanceProto player_auto_advance = 3;
}

// ref: Atlas.Proto.CombatPlayerAttackProto
message CombatPlayerAttackProto {
}

// ref: Atlas.Proto.CombatPlayerAutoAdvanceProto
message CombatPlayerAutoAdvanceProto {
}

// ref: Atlas.Proto.CombatPlayerDefendProto
message CombatPlayerDefendProto {
}

// ref: Atlas.Proto.CombatStateProto
message CombatStateProto {
	repeated CombatMoveTypeProto possible_moves = 1;
}

// ref: Atlas.Proto.Condition
message Condition {
	// ref: Atlas.Proto.Condition/ConditionOneofCase
	enum ConditionOneofCase {
		none = 0;
		always = 1;
		enemy_tag_cond = 2;
		stats_tag_cond = 3;
		buff_count_cond = 4;
		rune_in_challenge_cond = 5;
		time_remaining_cond = 6;
		focus_level_cond = 7;
		team_composition_cond = 8;
		time_of_day_cond = 9;
		weather_cond = 10;
		team_property_cond = 11;
		enemies_defeated_cond = 12;
	}

	BoolLiteral always = 1;
	EnemyTagCondition enemy_tag_cond = 2;
	StatsTagCondition stats_tag_cond = 3;
	BuffCountCondition buff_count_cond = 4;
	RuneInChallengeCondition rune_in_challenge_cond = 5;
	TimeRemainingCondition time_remaining_cond = 6;
	FocusAmountCondition focus_level_cond = 7;
	TeamCompositionCondition team_composition_cond = 8;
	TimeOfDayCondition time_of_day_cond = 9;
	WeatherCondition weather_cond = 10;
	TeamPropertyCondition team_property_cond = 11;
	EnemiesDefeatedCountCondition enemies_defeated_cond = 12;
}

// ref: Atlas.Proto.ConditionalModifiers
message ConditionalModifiers {
	Conditions conditions = 1;
	map<string, int64> modifiers = 2;
}

// ref: Atlas.Proto.Conditions
message Conditions {
	repeated Condition conds = 1;
}

// ref: Atlas.Proto.ContainerVaultItemProto
message ContainerVaultItemProto {
	LootCollectionProto contents = 1;
	bool auto_consume = 2;
}

// ref: Atlas.Proto.CurrencyRewardProto
message CurrencyRewardProto {
	string currency_id = 1;
	int64 amount = 2;
}

// ref: Atlas.Proto.CurrencyVaultItemProto
message CurrencyVaultItemProto {
}

// ref: Atlas.Proto.DailyRewardMonthlyScheduleProto
message DailyRewardMonthlyScheduleProto {
	string id = 1;
	uint32 number_of_days = 2;
	LootCollectionProto default_reward = 3;
	map<uint32, DailyRewardProto> daily_rewards = 4;
}

// ref: Atlas.Proto.DailyRewardProto
message DailyRewardProto {
	LootCollectionProto reward = 1;
}

// ref: Atlas.Proto.DarkDetectorVaultItemProto
message DarkDetectorVaultItemProto {
	int64 duration = 1;
}

// ref: Atlas.Proto.DateRequirement
message DateRequirement {
	int64 epoch_date_in_seconds = 1;
	ComparisonOperator comparison_operator = 2;
}

// ref: Atlas.Proto.DeepLinkProto
message DeepLinkProto {
	string id = 1;
	string category = 2;
	Requirements requirements = 3;
	string item = 4;
}

// ref: Atlas.Proto.DefaultProfileProto
message DefaultProfileProto {
	string id = 1;
}

// ref: Atlas.Proto.DefeatedMobCountChallengeBonusProto
message DefeatedMobCountChallengeBonusProto {
	float threshold = 1;
}

// ref: Atlas.Proto.DefeatMobTypeInWizardingChallengeProgress
message DefeatMobTypeInWizardingChallengeProgress {
	int64 current_defeat_count = 1;
}

// ref: Atlas.Proto.DefeatMobTypeInWizardingChallengeQuestTask
message DefeatMobTypeInWizardingChallengeQuestTask {
	int64 required_defeat_count = 1;
	string encounter_gmt_id = 2;
}

// ref: Atlas.Proto.DisabledFeatureConfigProto
message DisabledFeatureConfigProto {
	string id = 1;
	Requirements failed_reqs = 2;
}

// ref: Atlas.Proto.DoEncounterHookQuestProgress
message DoEncounterHookQuestProgress {
	int64 current_win_count = 1;
}

// ref: Atlas.Proto.DoEncounterHookQuestTask
message DoEncounterHookQuestTask {
	string encounter_gmt_id = 1;
	int64 required_win_count = 2;
}

// ref: Atlas.Proto.DoubleRange
message DoubleRange {
	double avg = 1;
	double min = 2;
	double max = 3;
}

// ref: Atlas.Proto.EmailOptsProto
message EmailOptsProto {
	bool send_update_emails = 1;
	bool send_wb_marketing_emails = 2;
	int64 email_opts_last_updated_ms = 3;
}

// ref: Atlas.Proto.EncounterObstacleProto
message EncounterObstacleProto {
	string id = 1;
}

// ref: Atlas.Proto.EncounterProto
message EncounterProto {
	string id = 1;
	string collection_item_reward_gmt_id = 2;
	repeated EncounterStageProto stages = 3;
	int32 collection_item_reward_shards = 4;
	string collection_family_gmt_id = 5;
	string affinity_profession_id = 6;
}

// ref: Atlas.Proto.EncounterSoundBanks
message EncounterSoundBanks {
	string encounter_type = 1;
	repeated string sound_banks = 2;
}

// ref: Atlas.Proto.EncounterStageCombatProto
message EncounterStageCombatProto {
	repeated CombatStateProto state_graph_nodes = 1;
	CombatEnemyStatsProto enemy_stats = 2;
	repeated string enemy_ranks = 3;
}

// ref: Atlas.Proto.EncounterStagePictureProto
message EncounterStagePictureProto {
}

// ref: Atlas.Proto.EncounterStagePortkeyProto
message EncounterStagePortkeyProto {
}

// ref: Atlas.Proto.EncounterStageProto
message EncounterStageProto {
	// ref: Atlas.Proto.EncounterStageProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		swish = 1;
		combat = 2;
		portkey = 3;
		picture = 4;
	}

	EncounterStageSwishProto swish = 1;
	EncounterStageCombatProto combat = 2;
	EncounterStagePortkeyProto portkey = 3;
	EncounterStagePictureProto picture = 4;
	string spell_gmt_id = 5;
	repeated ClientCombatEnemyTraitProto combat_enemy_traits = 6;
	repeated ClientEncounterTypeProto enemy_rank_tags = 7;
}

// ref: Atlas.Proto.EncounterStageSwishProto
message EncounterStageSwishProto {
	float base_win_rate = 1;
}

// ref: Atlas.Proto.EncounterTypeProto
message EncounterTypeProto {
	string id = 1;
}

// ref: Atlas.Proto.EnemiesDefeatedCountCondition
message EnemiesDefeatedCountCondition {
	ComparisonOperator comparison_operator = 1;
	int32 target_comparison_value = 2;
}

// ref: Atlas.Proto.EnemyTagCondition
message EnemyTagCondition {
	string rank_tag = 1;
}

// ref: Atlas.Proto.EnergyVaultItemProto
message EnergyVaultItemProto {
	float impact = 1;
	int32 spell_effect = 2;
}

// ref: Atlas.Proto.EventProto
message EventProto {
	string id = 1;
	Requirements activation_reqs = 2;
	Requirements running_reqs = 3;
}

// ref: Atlas.Proto.EventRequirement
message EventRequirement {
	string event_id = 1;
	repeated EventReqSubset req_subsets = 2;
}

// ref: Atlas.Proto.FastCompletionChallengeBonusProto
message FastCompletionChallengeBonusProto {
	int32 completion_time_sec = 1;
}

// ref: Atlas.Proto.FeatureFlagProto
message FeatureFlagProto {
	// ref: Atlas.Proto.FeatureFlagProto/DefaultValueOneofCase
	enum DefaultValueOneofCase {
		none = 0;
		bval = 3;
		lval = 4;
		sval = 5;
		fval = 6;
	}

	string id = 1;
	string feature_id = 2;
	bool bval = 3;
	int64 lval = 4;
	string sval = 5;
	float fval = 6;
}

// ref: Atlas.Proto.FeatureFlagRequirement
message FeatureFlagRequirement {
	string feature_flag_id = 1;
}

// ref: Atlas.Proto.FirstTimeCollectionBonusMetadataProto
message FirstTimeCollectionBonusMetadataProto {
}

// ref: Atlas.Proto.FlooNetworkConfigProto
message FlooNetworkConfigProto {
	// ref: Atlas.Proto.FlooNetworkConfigProto/Types/ElectoralVotesPerFlooPoints
	message ElectoralVotesPerFlooPoints {
		int64 min_floo_points = 1;
		int64 electoral_votes = 2;
	}

	repeated ElectoralVotesPerFlooPoints electoral_votes_per_floo_points = 1;
	int32 points_per_decay_cycle = 2;
	int64 decay_cycle_length_ms = 3;
}

// ref: Atlas.Proto.FlooNetworkFortressStatistics
message FlooNetworkFortressStatistics {
	map<string, int64> points_per_team = 1;
	int64 electoral_votes = 2;
	string owning_team_id = 3;
}

// ref: Atlas.Proto.FlooNetworkRegionScores
message FlooNetworkRegionScores {
	string season_id = 1;
	string region_id = 2;
	map<string, int64> points_per_team = 3;
}

// ref: Atlas.Proto.FlooNetworkSeasonScores
message FlooNetworkSeasonScores {
	string season_id = 1;
	map<string, int64> points_per_team = 2;
}

// ref: Atlas.Proto.FocusAmountCondition
message FocusAmountCondition {
	ComparisonOperator comparison_operator = 1;
	int32 target_comparison_value = 2;
}

// ref: Atlas.Proto.FortressTemplateProto
message FortressTemplateProto {
	string id = 1;
	repeated string chamber_gmt_ids = 2;
}

// ref: Atlas.Proto.GameConfigProto
message GameConfigProto {
	// ref: Atlas.Proto.GameConfigProto/ChallengeSoundContext
	enum ChallengeSoundContext {
		THIRTY_SECONDS = 0;
		PLAYER_WINS_BATTLE = 1;
		PLAYER_LOSES_BATTLE = 2;
		START_CHALLENGE = 3;
		PLAYER_WINS_CHALLENGE = 4;
		PLAYER_LOSES_CHALLENGE = 5;
		ELITE_MOB_SPAWNS = 6;
	}

	string id = 1;
	float pickup_range = 2;
	int32 map_update_rate = 3;
	int32 map_event_update_rate = 4;
	int32 map_puzzle_update_rate = 5;
	float try_again_bonus_per_failure = 6;
	float ar_mode_range = 7;
	int32 ar_mode_max_encounters = 8;
	int32 event_cool_down_duration = 9;
	int32 combat_stun_time = 10;
	int32 professions_min_level = 11;
	float accuracy_min_bonus = 12;
	float accuracy_max_bonus = 13;
	float encounter_min_base_win_rate = 14;
	float encounter_max_base_win_rate = 15;
	int32 player_level_cap = 16;
	float level_bonus_weight = 17;
	float gameplay_bonus_weight = 18;
	float gameplay_bonus_min = 19;
	float gameplay_bonus_max = 20;
	float professions_rps_non_match_impact = 21;
	float professions_rps_match_impact = 22;
	int64 pub_menu_refresh_interval_seconds = 23;
	FlooNetworkConfigProto floo_network_config = 24;
	TempFlooNetworkConfigProto temp_floo_network_config = 25;
	float map_unsafe_move_speed_mps = 26;
	int32 portkey_num_wrackspurts_to_collect = 27;
	int32 portkey_num_wrackspurts_in_env = 28;
	map<string, int64> player_stats_base = 30;
	map<string, string> player_profession_affinity_strength = 31;
	map<string, string> enemy_affinity_profession_strength = 32;
	int32 cauldrons_num_queue_slots = 33;
	repeated float swish_game_accuracy_tiers = 34;
	float cauldrons_instant_finish_cost_per_second = 35;
	string cauldrons_instant_finish_currency_id = 36;
	map<int32, uint32> rune_ratings = 37;
	string tutorial_encounter_id = 38;
	string tutorial_encounter_feature_flag_id = 39;
	BonusConfigProto bonus_config = 40;
	int32 max_walkbox_capacity = 41;
	string challenge_collection_family_id = 42;
	repeated string daily_quest_gmt_ids = 43;
	string cap_player_level_gmt_id = 44;
	int64 greenhouse_cool_down_ms = 45;
	map<int32, int32> player_level_override = 46;
	int64 inn_cool_down_ms = 47;
	int64 inn_menu_staleness_threshold_ms = 48;
	string daily_reward_schedule_gmt_id = 49;
	int64 wc_encounter_first_interact_timeout_ms = 50;
	int64 wc_encounter_interact_timeout_ms = 51;
}

// ref: Atlas.Proto.GameDataWrapper
message GameDataWrapper {
	repeated GmTemplate messages = 1;
	int64 basis_batch_id = 2;
	int64 environment = 3;
}

// ref: Atlas.Proto.GenericCollectionFamilyLootRewardProto
message GenericCollectionFamilyLootRewardProto {
	int32 amount = 1;
}

// ref: Atlas.Proto.GenericRunestoneRewardProto
message GenericRunestoneRewardProto {
	int32 rank = 1;
	int64 amount = 2;
}

// ref: Atlas.Proto.GmTemplate
message GmTemplate {
	// ref: Atlas.Proto.GmTemplate/MessageTypeOneofCase
	enum MessageTypeOneofCase {
		none = 0;
		collection_family = 1;
		collection_item = 2;
		encounter = 3;
		encounter_obstacle = 4;
		spell = 5;
		vault_item = 6;
		game_config = 7;
		player_level = 8;
		store_pack = 9;
		walkbox_template = 10;
		feature_flag = 11;
		portkey = 12;
		buff = 13;
		fortress_template = 14;
		chamber_template = 15;
		quality_level = 16;
		protego_pattern = 17;
		collection_page = 18;
		team_control = 19;
		store_config = 20;
		store_subcategory = 21;
		haptic = 22;
		encounter_type = 23;
		challenge_spawn_logic = 24;
		profession = 25;
		bonus_category = 26;
		vault_category = 27;
		profile_config = 28;
		collection_family_rank_table = 29;
		map_ingredient = 30;
		map_ability = 31;
		recipe = 32;
		challenge_bonus = 33;
		storyboard = 34;
		master_note = 35;
		cauldron = 36;
		rpgstat = 37;
		rpgstats_block = 38;
		selfie_avatar_asset = 39;
		outpost_template = 40;
		daily_reward_monthly_schedule = 41;
		quest = 42;
		deep_link = 43;
		event = 44;
		greenhouse_template = 45;
		version = 46;
	}

	CollectionFamilyProto collection_family = 1;
	CollectionItemProto collection_item = 2;
	EncounterProto encounter = 3;
	EncounterObstacleProto encounter_obstacle = 4;
	SpellProto spell = 5;
	VaultItemProto vault_item = 6;
	GameConfigProto game_config = 7;
	PlayerLevelProto player_level = 8;
	StorePackProto store_pack = 9;
	WalkboxTemplateProto walkbox_template = 10;
	FeatureFlagProto feature_flag = 11;
	PortkeyProto portkey = 12;
	BuffProto buff = 13;
	FortressTemplateProto fortress_template = 14;
	ChamberTemplateProto chamber_template = 15;
	QualityLevelProto quality_level = 16;
	ProtegoPatternProto protego_pattern = 17;
	CollectionPageProto collection_page = 18;
	TeamControlProto team_control = 19;
	StoreConfigProto store_config = 20;
	StoreSubcategoryProto store_subcategory = 21;
	HapticProto haptic = 22;
	EncounterTypeProto encounter_type = 23;
	ChallengeSpawnLogicProto challenge_spawn_logic = 24;
	ProfessionProto profession = 25;
	BonusCategoryProto bonus_category = 26;
	VaultCategoryProto vault_category = 27;
	ProfileConfigProto profile_config = 28;
	CollectionFamilyRankTableProto collection_family_rank_table = 29;
	MapIngredientProto map_ingredient = 30;
	MapAbilityProto map_ability = 31;
	RecipeProto recipe = 32;
	ChallengeBonusProto challenge_bonus = 33;
	StoryboardProto storyboard = 34;
	MasterNoteProto master_note = 35;
	CauldronProto cauldron = 36;
	RpgstatProto rpgstat = 37;
	RpgstatsBlockProto rpgstats_block = 38;
	SelfieAvatarAssetProto selfie_avatar_asset = 39;
	OutpostTemplateProto outpost_template = 40;
	DailyRewardMonthlyScheduleProto daily_reward_monthly_schedule = 41;
	QuestProto quest = 42;
	DeepLinkProto deep_link = 43;
	EventProto event = 44;
	GreenhouseTemplateProto greenhouse_template = 45;
	VersionProto version = 46;
}

// ref: Atlas.Proto.GreenhouseTemplateProto
message GreenhouseTemplateProto {
	string id = 1;
	SharedSocialGrowingSettingsProto social_growing_settings = 2;
}

// ref: Atlas.Proto.HapticProto
message HapticProto {
	string id = 1;
	repeated int32 ioshaptic_types = 2;
	repeated int32 android_wait_timings = 3;
	repeated int32 android_amplitudes = 4;
	repeated int32 android_durations = 5;
}

// ref: Atlas.Proto.HasPortkeyRequirement
message HasPortkeyRequirement {
	ComparisonOperator comparison_operator = 1;
	int32 qty = 2;
}

// ref: Atlas.Proto.HasWalkboxRequirement
message HasWalkboxRequirement {
	ComparisonOperator comparison_operator = 1;
	int32 qty = 2;
}

// ref: Atlas.Proto.HookQuestProgress
message HookQuestProgress {
	// ref: Atlas.Proto.HookQuestProgress/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		do_encounter = 1;
		loot_outposts = 2;
		win_traces = 3;
		collect_potion_ingredients = 4;
		brew_potions = 5;
		walk_distance = 6;
		play_fortress_challenges = 7;
		defeat_mob_in_challenges = 8;
		unlock_portmanteau = 9;
		use_potions = 10;
		place_stickers = 11;
		collect_stickers = 12;
		cast_spells = 13;
	}

	DoEncounterHookQuestProgress do_encounter = 1;
	LootOutpostsQuestProgress loot_outposts = 2;
	WinTracesQuestProgress win_traces = 3;
	CollectPotionIngredientsQuestProgress collect_potion_ingredients = 4;
	BrewPotionsQuestProgress brew_potions = 5;
	WalkDistanceQuestProgress walk_distance = 6;
	PlayFortressChallengesQuestProgress play_fortress_challenges = 7;
	DefeatMobTypeInWizardingChallengeProgress defeat_mob_in_challenges = 8;
	UnlockPortmanteauProgress unlock_portmanteau = 9;
	UsePotionsProgress use_potions = 10;
	PlaceStickersProgress place_stickers = 11;
	CollectStickersProgress collect_stickers = 12;
	CastSpellsProgress cast_spells = 13;
}

// ref: Atlas.Proto.HookQuestTask
message HookQuestTask {
	// ref: Atlas.Proto.HookQuestTask/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		do_encounter = 1;
		loot_outposts = 2;
		win_traces = 3;
		collect_potion_ingredients = 4;
		brew_potions = 5;
		walk_distance = 6;
		play_fortress_challenges = 7;
		defeat_mob_in_challenges = 8;
		unlock_portmanteau = 9;
		use_potions = 10;
		place_stickers = 11;
		collect_stickers = 12;
		cast_spells = 13;
	}

	DoEncounterHookQuestTask do_encounter = 1;
	LootOutpostsQuestTask loot_outposts = 2;
	WinTracesQuestTask win_traces = 3;
	CollectPotionIngredientsQuestTask collect_potion_ingredients = 4;
	BrewPotionsQuestTask brew_potions = 5;
	WalkDistanceQuestTask walk_distance = 6;
	PlayFortressChallengesQuestTask play_fortress_challenges = 7;
	DefeatMobTypeInWizardingChallengeQuestTask defeat_mob_in_challenges = 8;
	UnlockPortmanteauQuestTask unlock_portmanteau = 9;
	UsePotionsQuestTask use_potions = 10;
	PlaceStickersQuestTask place_stickers = 11;
	CollectStickersQuestTask collect_stickers = 12;
	CastSpellsQuestTask cast_spells = 13;
}

// ref: Atlas.Proto.InstantBuffDuration
message InstantBuffDuration {
}

// ref: Atlas.Proto.LevelRequirement
message LevelRequirement {
	ComparisonOperator comparison_operator = 1;
	int32 level = 2;
}

// ref: Atlas.Proto.LexiconApprovedClientTelemetryProto
message LexiconApprovedClientTelemetryProto {
	// ref: Atlas.Proto.LexiconApprovedClientTelemetryProto/TelemetryDataOneofCase
	enum TelemetryDataOneofCase {
		none = 0;
		startup = 1;
		swish_spell_game_start = 2;
		swish_spell_game_end = 3;
		asset_load = 4;
		bundle_download = 5;
		stopwatch = 6;
		smoke_test = 7;
		environmental_tags_ui_entered = 8;
		environmental_tags_weather_acknowledged = 9;
		avatar_interact = 10;
		rewards_flow = 11;
		portkeys_wrackspurt_tapped = 12;
		portkeys_out_of_bounds_reached = 13;
		portkeys_advanced_ar_check = 14;
		profession_main_menu = 15;
		profession_node_selected = 16;
		button_press = 17;
		select_mob = 18;
		more_info = 19;
		landmark_interact = 20;
		lock_on_attempt = 21;
		offensive_trace_attempt = 22;
		protego_cast_attempt = 23;
		out_of_energy_shown = 24;
		out_of_energy_purchase = 25;
		combat_potion_button = 26;
		impression = 27;
		description_clickthrough = 28;
		hyperlink_clickthrough = 29;
		surface_detection = 30;
		encounter_start = 31;
		permission_requested = 32;
		permission_check_failed = 33;
		deeplink_triggered = 34;
		login_start = 35;
		login_complete = 36;
		potions_master_note_attempt = 37;
		profile_portrait_action = 38;
		profile_button_randomize = 39;
		profile_button_lens = 40;
		profile_button_asset = 41;
		profile_screengrab = 42;
		outpost_interact = 43;
		greenhouse_interact = 44;
		family_details_clicked = 45;
		sticker_details_clicked = 46;
		registry_info_clicked = 47;
		rate_app = 48;
		exception_info = 49;
		ar_mode_toggled = 50;
		battery_mode_toggled = 51;
		auth_updated = 52;
		store_popup_open = 53;
		store_tab_open = 54;
		vault_popup_open = 55;
		vault_tab_open = 56;
	}

	ClientTelemetryStartup startup = 1;
	ClientTelemetrySwishSpellGameStart swish_spell_game_start = 2;
	ClientTelemetrySwishSpellGameEnd swish_spell_game_end = 3;
	ClientTelemetryAssetLoad asset_load = 4;
	ClientTelemetryBundleDownload bundle_download = 5;
	ClientTelemetryStopwatch stopwatch = 6;
	ClientTelemetrySmokeTest smoke_test = 7;
	ClientTelemetryEnvironmentalTagsUIEntered environmental_tags_ui_entered = 8;
	ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged environmental_tags_weather_acknowledged = 9;
	ClientTelemetryAvatarInteract avatar_interact = 10;
	ClientTelemetryRewardsFlow rewards_flow = 11;
	ClientTelemetryPortkeysWrackspurtTapped portkeys_wrackspurt_tapped = 12;
	ClientTelemetryPortkeysOutOfBoundsReached portkeys_out_of_bounds_reached = 13;
	ClientTelemetryPortkeysAdvancedARCheck portkeys_advanced_ar_check = 14;
	ClientTelemetryProfessionMainMenu profession_main_menu = 15;
	ClientTelemetryProfessionNodeSelected profession_node_selected = 16;
	ClientTelemetryButtonPress button_press = 17;
	ClientTelemetryWizardingChallengeSelectMob select_mob = 18;
	ClientTelemetryWizardingChallengeMoreInfo more_info = 19;
	ClientTelemetryLandmarkInteract landmark_interact = 20;
	ClientTelemetryCombatGameOffensiveLockOnAttempt lock_on_attempt = 21;
	ClientTelemetryCombatGameOffensiveTraceAttempt offensive_trace_attempt = 22;
	ClientTelemetryCombatGameProtegoCastAttempt protego_cast_attempt = 23;
	ClientTelemetryCombatGameOutOfEnergyDialogShown out_of_energy_shown = 24;
	ClientTelemetryCombatGameOutOfEnergyPurchaseButton out_of_energy_purchase = 25;
	ClientTelemetryCombatGamePotionButton combat_potion_button = 26;
	ClientTelemetryImpression impression = 27;
	ClientTelemetryDescriptionClickthrough description_clickthrough = 28;
	ClientTelemetryHyperlinkClickthrough hyperlink_clickthrough = 29;
	ClientTelemetrySurfaceDetection surface_detection = 30;
	ClientTelemetryEncounterStart encounter_start = 31;
	ClientTelemetryPermissionsRequested permission_requested = 32;
	ClientTelemetryPermissionsCheckFailed permission_check_failed = 33;
	ClientTelemetryDeeplinkTriggered deeplink_triggered = 34;
	ClientTelemetryLoginStart login_start = 35;
	ClientTelemetryLoginComplete login_complete = 36;
	ClientTelemetryPotionsMasterNoteAttempt potions_master_note_attempt = 37;
	ClientTelemetryProfilePortraitAction profile_portrait_action = 38;
	ClientTelemetryProfileButtonRandomize profile_button_randomize = 39;
	ClientTelemetryProfileButtonLens profile_button_lens = 40;
	ClientTelemetryProfileButtonAssset profile_button_asset = 41;
	ClientTelemetryProfileScreenGrab profile_screengrab = 42;
	ClientTelemetryOutpostInteract outpost_interact = 43;
	ClientTelemetryGreenhouseInteract greenhouse_interact = 44;
	ClientTelemetryFamilyDetails family_details_clicked = 45;
	ClientTelemetryStickerDetails sticker_details_clicked = 46;
	ClientTelemetryRegistryInfo registry_info_clicked = 47;
	ClientTelemetryRateApp rate_app = 48;
	ClientTelemetryException exception_info = 49;
	ClientTelemetrySettingsARModeToggled ar_mode_toggled = 50;
	ClientTelemetrySettingsBatteryModeToggled battery_mode_toggled = 51;
	ClientTelemetrySettingsAuthUpdated auth_updated = 52;
	ClientTelemetryStorePopupOpen store_popup_open = 53;
	ClientTelemetryStoreTabOpen store_tab_open = 54;
	ClientTelemetryVaultItemImpression vault_popup_open = 55;
	ClientTelemetryVaultTabImpression vault_tab_open = 56;
	PlatformServerData server_data = 1001;
}

// ref: Atlas.Proto.LifetimeMetricRequirement
message LifetimeMetricRequirement {
	// ref: Atlas.Proto.LifetimeMetricRequirement/Types/LifetimeMetric
	enum LifetimeMetric {
		NONE = 0;
		INN_LOOTED = 1;
		GREENHOUSE_LOOTED = 2;
	}

	LifetimeMetric lifetime_metric = 1;
	ComparisonOperator comparison_operator = 2;
	int64 required_count = 3;
}

// ref: Atlas.Proto.LootCollectionProto
message LootCollectionProto {
	repeated LootRewardProto rewards = 1;
	repeated LootRewardProto escrowed_rewards = 2;
}

// ref: Atlas.Proto.LootOutpostsQuestProgress
message LootOutpostsQuestProgress {
	int64 current_outpost_count = 1;
}

// ref: Atlas.Proto.LootOutpostsQuestTask
message LootOutpostsQuestTask {
	int64 required_outposts_count = 1;
}

// ref: Atlas.Proto.LootRewardProto
message LootRewardProto {
	// ref: Atlas.Proto.LootRewardProto/RewardDataOneofCase
	enum RewardDataOneofCase {
		none = 0;
		item_reward = 1;
		collection_family_reward = 2;
		collection_reward = 3;
		walkbox_reward = 4;
		portkey_reward = 5;
		loot_table_reward = 6;
		vault_capacity_reward = 7;
		generic_runestone = 8;
		potion_reward = 9;
		portkey_collectible = 10;
		generic_collection_family_reward = 11;
		cauldron_reward = 12;
		currency_reward = 13;
		quest_reward = 14;
	}

	VaultItemLootRewardProto item_reward = 1;
	CollectionFamilyLootRewardProto collection_family_reward = 2;
	CollectionItemRewardProto collection_reward = 3;
	WalkboxRewardProto walkbox_reward = 4;
	PortkeyRewardProto portkey_reward = 5;
	LootTableRewardProto loot_table_reward = 6;
	VaultCapacityLootRewardProto vault_capacity_reward = 7;
	GenericRunestoneRewardProto generic_runestone = 8;
	PotionRewardProto potion_reward = 9;
	PortkeyCollectibleRewardProto portkey_collectible = 10;
	GenericCollectionFamilyLootRewardProto generic_collection_family_reward = 11;
	CauldronRewardProto cauldron_reward = 12;
	CurrencyRewardProto currency_reward = 13;
	QuestRewardProto quest_reward = 14;
	BonusMetadataProto bonus_metadata = 101;
}

// ref: Atlas.Proto.LootTableRewardProto
message LootTableRewardProto {
	string loot_table_id = 1;
}

// ref: Atlas.Proto.MapAbilityActiveBuffSource
message MapAbilityActiveBuffSource {
	string map_ability_gmt_id = 1;
	uint32 map_ability_level = 2;
	string casting_player_nickname = 3;
}

// ref: Atlas.Proto.MapAbilityLevelProto
message MapAbilityLevelProto {
	MapAbilityTargetType target_type = 1;
	float radius = 2;
	uint32 cooldown_ms = 3;
	int32 focus_cost = 4;
	string buff_gmt_id = 5;
}

// ref: Atlas.Proto.MapAbilityProto
message MapAbilityProto {
	string id = 1;
	MapAbilityTargetType target_type = 2;
	string base_buff_gmt_id = 3;
	float radius = 4;
	uint32 cooldown_ms = 5;
	int32 focus_cost = 6;
	repeated MapAbilityLevelProto map_ability_levels = 7;
}

// ref: Atlas.Proto.MapIngredientProto
message MapIngredientProto {
	string id = 1;
	LootCollectionProto loot = 2;
	LootCollectionProto cost = 3;
}

// ref: Atlas.Proto.MasterNoteEffectProto
message MasterNoteEffectProto {
	// ref: Atlas.Proto.MasterNoteEffectProto/Types/MasterNoteEffectType
	enum MasterNoteEffectType {
		UNSET = 0;
		BREW_SPEED_STATIC = 1;
		BREW_SPEED_PERCENT = 2;
		BREW_YIELD_STATIC = 3;
	}

	string id = 1;
	MasterNoteEffectType effect_type = 2;
	int64 power = 3;
}

// ref: Atlas.Proto.MasterNoteProto
message MasterNoteProto {
	string id = 1;
	repeated MasterNoteGesture gestures = 2;
	MasterNoteEffectProto effect = 3;
}

// ref: Atlas.Proto.MobReward
message MobReward {
	// ref: Atlas.Proto.MobReward/RewardOneofCase
	enum RewardOneofCase {
		none = 0;
		focus = 1;
		time = 2;
		victory_points = 3;
	}

	MobRewardFocus focus = 1;
	MobRewardTime time = 2;
	MobRewardVictoryPoints victory_points = 3;
}

// ref: Atlas.Proto.MobRewardFocus
message MobRewardFocus {
	int32 quantity = 1;
	MobRewardRecipient recipient = 2;
}

// ref: Atlas.Proto.MobRewardSet
message MobRewardSet {
	repeated MobReward rewards = 1;
}

// ref: Atlas.Proto.MobRewardTime
message MobRewardTime {
	int64 time_ms = 1;
}

// ref: Atlas.Proto.MobRewardVictoryPoints
message MobRewardVictoryPoints {
	int32 quantity = 1;
}

// ref: Atlas.Proto.MusicConfigProto
message MusicConfigProto {
	int32 music_location = 1;
	repeated AudioParameterProto parameters = 2;
}

// ref: Atlas.Proto.MysteryItemInfoProto
message MysteryItemInfoProto {
	string name = 1;
	string description = 2;
	string icon = 3;
	string placed_storyboard_id = 4;
}

// ref: Atlas.Proto.OutpostTemplateProto
message OutpostTemplateProto {
	string id = 1;
}

// ref: Atlas.Proto.PerformanceSnapshotProto
message PerformanceSnapshotProto {
	repeated DoubleRange frame_metric_ranges = 1;
	repeated double on_demand_metrics = 2;
	int64 frame_number = 3;
	float real_time_seconds = 4;
	string label = 5;
}

// ref: Atlas.Proto.PermanentBuffDuration
message PermanentBuffDuration {
}

// ref: Atlas.Proto.PermanentBuffExpiration
message PermanentBuffExpiration {
}

// ref: Atlas.Proto.PermissionsConfigLocalDataProto
message PermissionsConfigLocalDataProto {
	string id = 1;
	bool first_play = 2;
	bool first_request = 3;
	bool parental_approval = 4;
	bool permission_granted = 5;
}

// ref: Atlas.Proto.PermissionsConfigStaticDataProto
message PermissionsConfigStaticDataProto {
	string id = 1;
	string initial_prompt = 2;
	string denial_prompt = 3;
	bool optional = 4;
	string title = 5;
	bool begging_enabled = 6;
}

// ref: Atlas.Proto.PermissionsConfigStaticList
message PermissionsConfigStaticList {
	repeated PermissionsConfigStaticDataProto list = 1;
}

// ref: Atlas.Proto.PlaceStickersProgress
message PlaceStickersProgress {
	int64 current_sticker_place_count = 1;
}

// ref: Atlas.Proto.PlaceStickersQuestTask
message PlaceStickersQuestTask {
	int64 required_place_count = 1;
	string sticker_gmt_id = 2;
	string sticker_page_gmt_id = 3;
	string sticker_family_gmt_id = 4;
}

// ref: Atlas.Proto.PlatformRequirement
message PlatformRequirement {
	DevicePlatform platform = 1;
	EqualityOperator operator = 2;
}

// ref: Atlas.Proto.PlayerAccountAgeRequirement
message PlayerAccountAgeRequirement {
	int64 account_age_in_seconds = 1;
	ComparisonOperator comparison_operator = 2;
}

// ref: Atlas.Proto.PlayerCountChallengeBonusProto
message PlayerCountChallengeBonusProto {
	int32 number_of_players = 1;
}

// ref: Atlas.Proto.PlayerCountMultipliers
message PlayerCountMultipliers {
	repeated float multipliers = 1;
}

// ref: Atlas.Proto.PlayerFlagRequirement
message PlayerFlagRequirement {
	// ref: Atlas.Proto.PlayerFlagRequirement/FlagValueOneofCase
	enum FlagValueOneofCase {
		none = 0;
		bval = 4;
		lval = 5;
		sval = 6;
		fval = 7;
	}

	string player_flag_feature_id = 1;
	string player_flag_id = 2;
	ComparisonOperator comparison_operator = 3;
	bool bval = 4;
	int64 lval = 5;
	string sval = 6;
	float fval = 7;
}

// ref: Atlas.Proto.PlayerLevelProto
message PlayerLevelProto {
	string id = 1;
	int32 required_xp = 2;
}

// ref: Atlas.Proto.PlayerLifetimeMetricsConfig
message PlayerLifetimeMetricsConfig {
	map<string, string> collected_item_gmt_id = 1;
	map<string, string> collected_category_gmt_id = 2;
	map<string, string> used_item_gmt_id = 3;
	map<string, string> used_category_gmt_id = 4;
}

// ref: Atlas.Proto.PlayerRatioChallengeBonusProto
message PlayerRatioChallengeBonusProto {
	float threshold = 1;
}

// ref: Atlas.Proto.PlayFortressChallengesQuestProgress
message PlayFortressChallengesQuestProgress {
	int64 current_challenge_count = 1;
}

// ref: Atlas.Proto.PlayFortressChallengesQuestTask
message PlayFortressChallengesQuestTask {
	int64 required_challenge_count = 1;
	int64 required_least_player_count = 2;
}

// ref: Atlas.Proto.POIInteract
message POIInteract {
	double distance_from_poimeters = 1;
}

// ref: Atlas.Proto.PortkeyCollectibleRewardProto
message PortkeyCollectibleRewardProto {
	string collection_item_id = 1;
}

// ref: Atlas.Proto.PortkeyProto
message PortkeyProto {
	string id = 1;
	string portkey_encounter_id = 2;
}

// ref: Atlas.Proto.PortkeyRewardProto
message PortkeyRewardProto {
	string portkey_id = 1;
}

// ref: Atlas.Proto.PotionBonusMetadataProto
message PotionBonusMetadataProto {
	string potion_id = 1;
}

// ref: Atlas.Proto.PotionIngredientVaultItemProto
message PotionIngredientVaultItemProto {
	LootCollectionProto cost = 1;
}

// ref: Atlas.Proto.PotionRewardProto
message PotionRewardProto {
	LootCollectionProto rewards = 1;
	int64 time_to_brew = 2;
	int64 cauldron_id = 3;
	string recipe_gmt_id = 4;
}

// ref: Atlas.Proto.PotionVaultItemProto
message PotionVaultItemProto {
	repeated PotionConsumableScenario consumable_scenario = 3;
	repeated string applied_buff_gmt_id = 4;
}

// ref: Atlas.Proto.PotTimeItemProto
message PotTimeItemProto {
	int64 availability_time = 1;
}

// ref: Atlas.Proto.ProfessionActiveBuffSource
message ProfessionActiveBuffSource {
	string profession_gmt_id = 1;
	string profession_gmt_node_id = 2;
	uint32 profession_node_level = 3;
}

// ref: Atlas.Proto.ProfessionBuffDuration
message ProfessionBuffDuration {
}

// ref: Atlas.Proto.ProfessionBuffExpiration
message ProfessionBuffExpiration {
	string profession_gmt_id = 1;
}

// ref: Atlas.Proto.ProfessionNodeLevelProto
message ProfessionNodeLevelProto {
	// ref: Atlas.Proto.ProfessionNodeLevelProto/Purpose
	enum Purpose {
		none = 0;
		buff = 1;
		learn_new_map_ability = 2;
		upgrade_map_ability = 3;
	}

	string buff_gmt_id = 1;
	Requirements prerequisite = 2;
	LootCollectionProto cost = 3;
	repeated string map_abilities = 4;
	uint32 rank_points = 5;
}

// ref: Atlas.Proto.ProfessionNodeProto
message ProfessionNodeProto {
	string id = 1;
	repeated Requirements edges = 2;
	repeated ProfessionNodeLevelProto levels = 3;
	uint32 row_pos = 4;
	uint32 col_pos = 5;
}

// ref: Atlas.Proto.ProfessionNodeRequirement
message ProfessionNodeRequirement {
	string profession_node_id = 1;
	uint32 profession_node_level = 2;
	ComparisonOperator comparison_operator = 3;
	string profession_rank_id = 5;
}

// ref: Atlas.Proto.ProfessionProto
message ProfessionProto {
	string id = 1;
	repeated Requirements requirements = 3;
	bool show_in_ui = 4;
	map<string, ProfessionRankProto> profession_ranks_map = 5;
	repeated ProfessionTierProto profession_tiers = 6;
}

// ref: Atlas.Proto.ProfessionRankPointsRequirement
message ProfessionRankPointsRequirement {
	string profession_gmt_id = 1;
	int32 rank_points = 2;
	ComparisonOperator comparison_operator = 3;
}

// ref: Atlas.Proto.ProfessionRankProto
message ProfessionRankProto {
	uint32 potential_rank_points = 1;
	repeated Requirements requirements = 2;
	map<string, ProfessionNodeProto> profession_nodes_map = 3;
	bool show_in_ui = 4;
	string id = 5;
}

// ref: Atlas.Proto.ProfessionRequirement
message ProfessionRequirement {
	string profession_gmt_id = 1;
}

// ref: Atlas.Proto.ProfessionTierProto
message ProfessionTierProto {
	uint32 rank_points_upper_bound = 1;
}

// ref: Atlas.Proto.ProfessionTierRequirement
message ProfessionTierRequirement {
	string profession_gmt_id = 1;
	uint32 profession_tier = 2;
	ComparisonOperator comparison_operator = 3;
}

// ref: Atlas.Proto.ProfessionTotalNodeLevelRequirement
message ProfessionTotalNodeLevelRequirement {
	string profession_gmt_id = 1;
	int32 num_profession_node_levels = 2;
	ComparisonOperator comparison_operator = 3;
}

// ref: Atlas.Proto.ProfileConfigProto
message ProfileConfigProto {
	string id = 1;
	map<string, ClientBadgeProto> badges = 2;
	map<string, ClientHouseProto> houses = 3;
	map<string, ClientThemeProto> themes = 4;
	map<string, ClientWandCoreProto> wand_cores = 5;
	map<string, ClientWandWoodProto> wand_woods = 6;
	map<string, ClientWandFlexibilityProto> wand_flexibilities = 7;
	map<string, ClientWandLengthProto> wand_lengths = 8;
}

// ref: Atlas.Proto.ProtegoPatternProto
message ProtegoPatternProto {
	string id = 1;
}

// ref: Atlas.Proto.PushAnalyticsEventsRequest
message PushAnalyticsEventsRequest {
	AnalyticsEventsProto events = 1;
}

// ref: Atlas.Proto.PushAnalyticsEventsResponse
message PushAnalyticsEventsResponse {
}

// ref: Atlas.Proto.PushPerformanceMetricsRequest
message PushPerformanceMetricsRequest {
	PerformanceSnapshotProto performance_snapshot = 1;
}

// ref: Atlas.Proto.PushPerformanceMetricsResponse
message PushPerformanceMetricsResponse {
}

// ref: Atlas.Proto.QualityLevelOverridesProto
message QualityLevelOverridesProto {
	int32 target_fps = 1;
}

// ref: Atlas.Proto.QualityLevelProto
message QualityLevelProto {
	// ref: Atlas.Proto.QualityLevelProto/AntialiasingSetting
	enum AntialiasingSetting {
		off = 0;
		msaa2x = 2;
		msaa4x = 4;
		msaa8x = 8;
	}

	// ref: Atlas.Proto.QualityLevelProto/RealtimeShadowsSetting
	enum RealtimeShadowsSetting {
		off = 0;
		realtime_planar = 1;
		realtime_planar_and_self_shadowing = 2;
	}

	// ref: Atlas.Proto.QualityLevelProto/TextureQualitySetting
	enum TextureQualitySetting {
		full_res = 0;
		half_res = 1;
	}

	string id = 1;
	SharedQualityLevelProto quality_level = 2;
}

// ref: Atlas.Proto.QuestCompletedRequirement
message QuestCompletedRequirement {
	string quest_gmt_id = 1;
}

// ref: Atlas.Proto.QuestProgress
message QuestProgress {
	// ref: Atlas.Proto.QuestProgress/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		req_progress = 1;
		hook_progress = 2;
	}

	RequirementsQuestProgress req_progress = 1;
	HookQuestProgress hook_progress = 2;
}

// ref: Atlas.Proto.QuestProto
message QuestProto {
	string id = 1;
	QuestType type = 2;
	repeated QuestTask tasks = 3;
	LootCollectionProto rewards = 4;
	int32 version = 5;
	int32 chain_position = 6;
	int32 chain_total = 7;
	repeated Requirements start_requirements = 8;
}

// ref: Atlas.Proto.QuestRewardProto
message QuestRewardProto {
	string quest_gmt_id = 1;
}

// ref: Atlas.Proto.QuestTask
message QuestTask {
	// ref: Atlas.Proto.QuestTask/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		req_task = 1;
		hook_task = 2;
	}

	RequirementsQuestTask req_task = 1;
	HookQuestTask hook_task = 2;
}

// ref: Atlas.Proto.RangeInt64
message RangeInt64 {
	int64 min = 1;
	int64 max = 2;
}

// ref: Atlas.Proto.RangeUint32
message RangeUint32 {
	uint32 min = 1;
	uint32 max = 2;
}

// ref: Atlas.Proto.RecipeProto
message RecipeProto {
	string id = 1;
	LootCollectionProto recipe = 2;
	LootCollectionProto rewards = 3;
	int64 time_to_craft = 4;
	repeated string master_note_gmt_id = 5;
	bool disabled = 6;
	repeated Requirements unlock_conditions = 7;
}

// ref: Atlas.Proto.Requirement
message Requirement {
	// ref: Atlas.Proto.Requirement/RequirementOneofCase
	enum RequirementOneofCase {
		none = 0;
		bool_literal_req = 1;
		level_req = 2;
		vault_item_req = 3;
		collection_item_req = 4;
		collection_family_req = 5;
		date_req = 6;
		flag_req = 7;
		profession_req = 8;
		profession_node_req = 9;
		profession_num_node_level_req = 10;
		has_walkbox_req = 11;
		has_portkey_req = 12;
		profession_rank_points_req = 13;
		collection_page_req = 14;
		collection_item_placed_requirement = 15;
		event_req = 16;
		quest_completed_req = 17;
		feature_flag_req = 18;
		store_pack_req = 19;
		active_ar_mode_req = 20;
		platform_requirement = 21;
		player_account_age_requirement = 22;
		profession_tier_req = 23;
		account_creation_date_requirement = 24;
		lifetime_metric_req = 25;
	}

	BoolLiteral bool_literal_req = 1;
	LevelRequirement level_req = 2;
	VaultItemRequirement vault_item_req = 3;
	CollectionItemRequirement collection_item_req = 4;
	CollectionFamilyRequirement collection_family_req = 5;
	DateRequirement date_req = 6;
	PlayerFlagRequirement flag_req = 7;
	ProfessionRequirement profession_req = 8;
	ProfessionNodeRequirement profession_node_req = 9;
	ProfessionTotalNodeLevelRequirement profession_num_node_level_req = 10;
	HasWalkboxRequirement has_walkbox_req = 11;
	HasPortkeyRequirement has_portkey_req = 12;
	ProfessionRankPointsRequirement profession_rank_points_req = 13;
	CollectionPageLevelRequirement collection_page_req = 14;
	CollectionItemPlacedRequirement collection_item_placed_requirement = 15;
	EventRequirement event_req = 16;
	QuestCompletedRequirement quest_completed_req = 17;
	FeatureFlagRequirement feature_flag_req = 18;
	StorePackQuantityRequirement store_pack_req = 19;
	ActiveArModeRequirement active_ar_mode_req = 20;
	PlatformRequirement platform_requirement = 21;
	PlayerAccountAgeRequirement player_account_age_requirement = 22;
	ProfessionTierRequirement profession_tier_req = 23;
	AccountCreationDateRequirement account_creation_date_requirement = 24;
	LifetimeMetricRequirement lifetime_metric_req = 25;
}

// ref: Atlas.Proto.Requirements
message Requirements {
	repeated Requirement reqs = 1;
}

// ref: Atlas.Proto.RequirementsQuestProgress
message RequirementsQuestProgress {
}

// ref: Atlas.Proto.RequirementsQuestTask
message RequirementsQuestTask {
	Requirements reqs = 1;
}

// ref: Atlas.Proto.RpgstatProto
message RpgstatProto {
	// ref: Atlas.Proto.RpgstatProto/IconDisplayType
	enum IconDisplayType {
		BOTH = 0;
		PLAYER_VIEW = 1;
		ENEMY_VIEW = 2;
		NEITHER = 3;
	}

	string id = 1;
	RangeInt64 stat_bounds = 2;
}

// ref: Atlas.Proto.RpgstatsBlockProto
message RpgstatsBlockProto {
	string id = 1;
}

// ref: Atlas.Proto.RuneInChallengeCondition
message RuneInChallengeCondition {
	string vault_item_id = 1;
}

// ref: Atlas.Proto.RuneLevelChallengeBonusProto
message RuneLevelChallengeBonusProto {
	int32 rune_lvl = 1;
}

// ref: Atlas.Proto.RunestoneVaultItemProto
message RunestoneVaultItemProto {
	int32 quality = 1;
	bool is_boss = 2;
	string collection_family_gmt_id = 3;
}

// ref: Atlas.Proto.SelfieAvatarAssetProto
message SelfieAvatarAssetProto {
	string id = 1;
	Requirements unlock_conditions = 2;
}

// ref: Atlas.Proto.ShardConversionBonusMetadataProto
message ShardConversionBonusMetadataProto {
	int32 amount = 1;
}

// ref: Atlas.Proto.SharedQualityLevelProto
message SharedQualityLevelProto {
	string name = 1;
	int32 texture_quality = 2;
	int32 shader_lod = 3;
	int32 default_target_fps = 4;
	int32 antialiasing = 5;
	int32 anisotropic_filtering = 7;
	bool billboards_face_camera_position = 9;
	int32 realtime_shadows = 10;
	bool ar_azimuth_blurring = 11;
	map<string, QualityLevelOverridesProto> gamemode_overrides = 13;
	int32 ar_encounter_particle_cap = 14;
	int32 locked_encounter_particle_cap = 15;
	int32 menu_particle_cap = 16;
	bool ar_azimuth_color_grading = 17;
	int32 shadow_map_size = 18;
	int32 encounter_camera_target_scaling = 19;
	int32 advanced_ar_camera_resolution = 20;
	int32 vfx_lod = 21;
	bool force_simple_ar = 22;
}

// ref: Atlas.Proto.SharedSocialGrowingSettingsProto
message SharedSocialGrowingSettingsProto {
	// ref: Atlas.Proto.SharedSocialGrowingSettingsProto/Types/HerbivicusMeterEntryProto
	message HerbivicusMeterEntryProto {
		int32 spell_count = 1;
		int32 additional_number_of_spawning = 2;
	}

	int32 number_of_normal_pots = 1;
	int32 number_of_rental_pots = 2;
	double normal_pot_growing_time_multiplier = 3;
	double rental_pot_growing_time_multiplier = 4;
	repeated HerbivicusMeterEntryProto herbivicus_meter = 5;
	int32 maximum_energy_allowed = 6;
}

// ref: Atlas.Proto.SoundConfigProto
message SoundConfigProto {
	string sound_bank = 1;
	string sound_event = 2;
	repeated AudioParameterProto parameters = 3;
}

// ref: Atlas.Proto.SpeechBubble
message SpeechBubble {
	string character_portrait_image = 1;
	string character_name_lockey = 2;
	string bubble_prefab_name = 3;
	string bubble_content_lockey = 4;
	SoundConfigProto sound_config = 5;
}

// ref: Atlas.Proto.SpellGameBonusMetadataProto
message SpellGameBonusMetadataProto {
	string id = 1;
}

// ref: Atlas.Proto.SpellProto
message SpellProto {
	string id = 1;
	map<string, string> timelines = 2;
	map<string, string> critical_hits = 3;
}

// ref: Atlas.Proto.StaminaVaultItemProto
message StaminaVaultItemProto {
	float impact = 1;
	int32 spell_effect = 2;
}

// ref: Atlas.Proto.StatsTagCondition
message StatsTagCondition {
	string target_type = 1;
	string target_stat = 2;
	ComparisonOperator comparison_operator = 3;
	int64 target_comparison_value = 4;
	bool target_stat_is_percentage = 5;
	ConditionTargetType condition_target_type = 6;
}

// ref: Atlas.Proto.StoreCategoryProto
message StoreCategoryProto {
	string icon_path = 1;
	string title = 2;
	string header = 3;
	ColorProto header_color = 4;
	string background = 5;
	ColorProto background_color = 6;
	repeated string store_subcategories = 7;
	string header_prefab = 8;
	ColorProto item_color = 9;
	bool enabled = 10;
}

// ref: Atlas.Proto.StoreConfigProto
message StoreConfigProto {
	string id = 1;
	repeated StoreRarityProto store_rarities = 2;
}

// ref: Atlas.Proto.StorePackConfigProto
message StorePackConfigProto {
	int32 priority = 1;
	string subcategory_id = 2;
	string icon_path = 3;
	bool show_quantity_banner = 4;
	string quantity_override = 5;
	string prefab_path = 6;
	string marketing_text = 7;
	string description_text = 8;
	bool show_badge = 9;
	int32 bonus_value = 10;
	string rarity_id = 11;
	StorePackConfigSize pack_size = 12;
	bool show_in_hud = 13;
	int32 hud_priority = 14;
	string hud_icon_path = 15;
	string icon2_path = 16;
	string popup_image_override = 17;
	bool hide_pack_on_sold_out = 18;
}

// ref: Atlas.Proto.StorePackProto
message StorePackProto {
	// ref: Atlas.Proto.StorePackProto/TimeReqTuple
	message TimeReqTuple {
	}

	string id = 1;
	LootCollectionProto contents = 2;
	LootCollectionProto cost = 3;
	string iap_id = 4;
	SkuDataProto sku_data = 5;
	Requirements requirements = 6;
}

// ref: Atlas.Proto.StorePackQuantityRequirement
message StorePackQuantityRequirement {
	string store_pack_id = 1;
	ComparisonOperator comparison_operator = 2;
	int64 qty = 3;
}

// ref: Atlas.Proto.StoreRarityProto
message StoreRarityProto {
	string id = 1;
	ColorProto text_color = 2;
	string title = 3;
}

// ref: Atlas.Proto.StoreSubcategoryProto
message StoreSubcategoryProto {
	string id = 1;
}

// ref: Atlas.Proto.StoryboardAdviceInterjectionStep
message StoryboardAdviceInterjectionStep {
	string character_portrait_image = 1;
	string character_name_lockey = 2;
	string content_text_lockey = 3;
	string content_image_name = 4;
	SoundConfigProto sound_config = 5;
	string button_lockey = 6;
}

// ref: Atlas.Proto.StoryboardAdviceOverlayStep
message StoryboardAdviceOverlayStep {
	SpeechBubble speech_bubble = 1;
	bool requires_scrim = 2;
	AdviceOverlayAlignment alignment = 3;
	bool show_continue_action_text = 4;
}

// ref: Atlas.Proto.StoryboardConversationInterjectionStep
message StoryboardConversationInterjectionStep {
	repeated SpeechBubble conversation = 1;
}

// ref: Atlas.Proto.StoryboardGenericDialogStep
message StoryboardGenericDialogStep {
	string title = 1;
	string text = 2;
	string button_text = 3;
}

// ref: Atlas.Proto.StoryboardPauseStep
message StoryboardPauseStep {
}

// ref: Atlas.Proto.StoryboardProto
message StoryboardProto {
	string id = 1;
	Requirements start_reqs = 2;
	string step_flag_gmt_id = 3;
	string complete_flag_gmt_id = 4;
	repeated StoryboardStepProto storyboard_steps = 5;
	StoryboardResetMode reset_mode = 6;
	Requirements reset_reqs = 7;
}

// ref: Atlas.Proto.StoryboardStepProto
message StoryboardStepProto {
	LootCollectionProto rewards = 1;
}

// ref: Atlas.Proto.TeamCompositionCondition
message TeamCompositionCondition {
	ComparisonOperator comparison_operator = 1;
	int32 target_comparison_value = 2;
	string profession_id = 3;
}

// ref: Atlas.Proto.TeamControlProto
message TeamControlProto {
	string id = 1;
	string team_name = 2;
}

// ref: Atlas.Proto.TeamPropertyCondition
message TeamPropertyCondition {
	// ref: Atlas.Proto.TeamPropertyCondition/Types/Criteria
	enum Criteria {
		UNKNOWN = 0;
		FRIENDS = 1;
		NON_FRIENDS = 2;
		SAME_TEAM = 3;
		OTHER_TEAM = 4;
	}

	ComparisonOperator comparison_operator = 1;
	int32 target_comparison_value = 2;
	Criteria criteria = 3;
}

// ref: Atlas.Proto.TempFlooNetworkConfigProto
message TempFlooNetworkConfigProto {
	int32 points_per_button_press = 1;
	int64 button_press_cooldown_ms = 2;
	map<string, int64> stamina_requirements = 3;
}

// ref: Atlas.Proto.TimeActiveBuffExpiration
message TimeActiveBuffExpiration {
	int64 expiry_time_ms = 1;
}

// ref: Atlas.Proto.TimeBuffDuration
message TimeBuffDuration {
	int64 time_ms = 1;
	bool is_override = 2;
}

// ref: Atlas.Proto.TimeOfDayCondition
message TimeOfDayCondition {
	int64 starting_daily_timestamp = 1;
	int64 ending_daily_timestamp = 2;
}

// ref: Atlas.Proto.TimeRemainingCondition
message TimeRemainingCondition {
	ComparisonOperator comparison_operator = 1;
	int64 target_comparison_value = 2;
}

// ref: Atlas.Proto.UnlockPortmanteauProgress
message UnlockPortmanteauProgress {
	int64 current_unlock_count = 1;
}

// ref: Atlas.Proto.UnlockPortmanteauQuestTask
message UnlockPortmanteauQuestTask {
	int64 required_unlock_count = 1;
	float minimum_distance_type = 2;
}

// ref: Atlas.Proto.UsePotionsProgress
message UsePotionsProgress {
	int64 current_use_count = 1;
}

// ref: Atlas.Proto.UsePotionsQuestTask
message UsePotionsQuestTask {
	int64 required_use_count = 1;
	string required_potion = 2;
}

// ref: Atlas.Proto.VaultCapacityLootRewardProto
message VaultCapacityLootRewardProto {
	string vault_category_gmt_id = 1;
	int64 amount = 2;
}

// ref: Atlas.Proto.VaultCategoryProto
message VaultCategoryProto {
	string id = 1;
	CategoryCapacityType capacity_type = 2;
}

// ref: Atlas.Proto.VaultItemActiveBuffSource
message VaultItemActiveBuffSource {
	string vault_item_gmt_id = 1;
}

// ref: Atlas.Proto.VaultItemLootRewardProto
message VaultItemLootRewardProto {
	string item_id = 1;
	int64 amount = 2;
}

// ref: Atlas.Proto.VaultItemProto
message VaultItemProto {
	// ref: Atlas.Proto.VaultItemProto/PotionStateEnum
	enum PotionStateEnum {
		usable = 0;
		map_unusable = 1;
		potion_active = 2;
		stronger_active = 3;
		hpalready_full = 4;
		focus_already_full = 5;
	}

	// ref: Atlas.Proto.VaultItemProto/VaultItemTypeOneofCase
	enum VaultItemTypeOneofCase {
		none = 0;
		currency_item = 2;
		stamina_item = 3;
		detector_item = 4;
		container_item = 5;
		runestone_item = 6;
		potion_item = 7;
		potion_ingredient = 8;
		energy_item = 10;
		cauldron_time_item = 11;
		pot_time_item = 12;
	}

	string id = 1;
	CurrencyVaultItemProto currency_item = 2;
	StaminaVaultItemProto stamina_item = 3;
	DarkDetectorVaultItemProto detector_item = 4;
	ContainerVaultItemProto container_item = 5;
	RunestoneVaultItemProto runestone_item = 6;
	PotionVaultItemProto potion_item = 7;
	PotionIngredientVaultItemProto potion_ingredient = 8;
	int64 cap = 9;
	EnergyVaultItemProto energy_item = 10;
	CauldronTimeItemProto cauldron_time_item = 11;
	PotTimeItemProto pot_time_item = 12;
	int32 relative_value = 100;
	string vault_category_gmt_id = 101;
}

// ref: Atlas.Proto.VaultItemRequirement
message VaultItemRequirement {
	string item_id = 1;
	ComparisonOperator comparison_operator = 2;
	int64 qty = 3;
}

// ref: Atlas.Proto.Vector2Proto
message Vector2Proto {
	float x = 1;
	float y = 2;
}

// ref: Atlas.Proto.Vector3Proto
message Vector3Proto {
	float x = 1;
	float y = 2;
	float z = 3;
}

// ref: Atlas.Proto.VersionProto
message VersionProto {
	string id = 1;
	string data_version = 2;
	string data_branch = 3;
}

// ref: Atlas.Proto.VoiceOverLanguageMapping
message VoiceOverLanguageMapping {
	string language_code = 1;
	string language_folder = 2;
}

// ref: Atlas.Proto.WalkboxRewardProto
message WalkboxRewardProto {
	string walkbox_template_id = 1;
}

// ref: Atlas.Proto.WalkboxTemplateProto
message WalkboxTemplateProto {
	string id = 1;
	float required_distance_km = 2;
}

// ref: Atlas.Proto.WalkDistanceQuestProgress
message WalkDistanceQuestProgress {
	int64 current_micrometers_walked = 1;
}

// ref: Atlas.Proto.WalkDistanceQuestTask
message WalkDistanceQuestTask {
	int64 required_micrometers_to_walk = 1;
}

// ref: Atlas.Proto.WeatherCondition
message WeatherCondition {
	// ref: Atlas.Proto.WeatherCondition/Types/WeatherType
	enum WeatherType {
		UNKNOWN = 0;
		SUNNY = 1;
		CLOUDY = 2;
		RAINING = 3;
		SNOWING = 4;
		SLEETING = 5;
		FULL_MOON = 6;
		NIGHT_TIME = 7;
		DAY_TIME = 8;
		HALF_MOON = 9;
		QUARTER_MOON = 10;
	}

	WeatherType weather_condition = 1;
}

// ref: Atlas.Proto.WinTracesQuestProgress
message WinTracesQuestProgress {
	int64 current_trace_count = 1;
}

// ref: Atlas.Proto.WinTracesQuestTask
message WinTracesQuestTask {
	int64 required_trace_count = 1;
	string encounter_gmt_id = 2;
	string registry_page_gmt_id = 3;
	string family_gmt_id = 4;
	float difficulty = 5;
}

// ref: Atlas.Proto.WrackspurtBonusMetadataProto
message WrackspurtBonusMetadataProto {
	float multiplier = 1;
}


//----- End proto -----
//------------------------------
//----- Begin proto -----

// ref: AppBackgroundResult
enum AppBackgroundResult {
	NONE = 0;
	MAP_STATE = 1;
	FULL_RESET = 2;
	DEFAULT = 3;
}

// ref: CombatMoveType
enum CombatMoveType {
	COMBAT_PLAYER_ATTACK = 0;
	COMBAT_PLAYER_DEFEND = 1;
	COMBAT_PLAYER_AUTO_ADVANCE = 2;
}

// ref: EncounterOrigin
enum EncounterOrigin {
	DITTO_TRACE = 0;
	TUTORIAL_TRACE = 1;
	DEBUG = 2;
}

// ref: TriggerPoint
enum TriggerPoint {
	none = 0;
	all = 1;
	map = 2;
	encounter_spell_cast = 3;
	encounter_intro = 4;
	combat_start = 5;
	combat_lock_on = 6;
	combat_defend = 7;
	portkey_ui = 8;
	registry_ui = 9;
	fortress = 10;
	player_level_milestone = 11;
	challenge_win = 12;
	challenge_lose = 13;
	dark_detector_ui = 14;
	environmental_tags_ui = 15;
	level_up_rewards_flow = 16;
	rngmoment = 17;
	detect_surface = 18;
	search_object = 19;
	inn_ui = 20;
	outpost_interact = 21;
	profession_selection = 22;
	profession_changed = 23;
	trace_spell_glyph = 24;
	challenge_runestone_select = 25;
	challenge_map = 26;
	challenge_look_in = 27;
	challenge_ability_ready = 28;
	passport = 29;
	passport_house = 30;
	passport_wand = 31;
	passport_titles = 32;
	passport_achievements = 33;
	selfie_live_camera = 34;
	selfie_stock = 35;
	selfie_edit_filter = 36;
	selfie_validation = 37;
	selfie_confirmed = 38;
	selfie_gallery = 39;
	selfie_last_photo = 40;
	assignments = 41;
	assignments_daily_completable = 42;
	potion_room = 43;
	master_note = 44;
	cauldron_was_rented = 45;
	greenhouse_ui = 46;
	selfie_validation_over_age = 47;
	potion_room_no_brew = 48;
	potion_room_active_brew = 49;
	potion_room_ready_to_collect = 50;
	potion_start_brew = 51;
	potion_confirm_finish_now = 52;
	potion_recipe_list_open = 53;
	potion_recipe_list_close = 54;
	potion_collect_potion = 55;
	potion_room_rental_cauldron_locked = 56;
	potion_room_rental_cauldron_available = 57;
	potion_room_rental_cauldron_active = 58;
	swish_spell_cast_zero_energy = 59;
	combat_spell_cast_zero_energy = 60;
	passport_share_button_displayed = 61;
	selfie_validation_under_age = 62;
}

// ref: UIAnimationState
enum UIAnimationState {
	NOT_STARTED = 0;
	RUNNING = 1;
	COMPLETE = 2;
}

// ref: UpdateType
enum UpdateType {
	ADD = 0;
	MODIFY = 1;
	REMOVE = 2;
	PREDICTED_MODIFY = 3;
	PREDICTED_REMOVE = 4;
	ROLLED_BACK_MODIFY = 5;
	ROLLED_BACK_REMOVE = 6;
}

// ref: AdminAdjustBalanceOutProto
message AdminAdjustBalanceOutProto {
	// ref: AdminAdjustBalanceOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		BALANCE_TOO_LOW = 3;
	}

	Status status = 1;
}

// ref: AdminAdjustBalanceProto
message AdminAdjustBalanceProto {
	string player_id = 1;
	int32 adjustment = 2;
	string currency_type = 3;
	string reason = 4;
}

// ref: AdminCreateSkuOutProto
message AdminCreateSkuOutProto {
	// ref: AdminCreateSkuOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	Status status = 1;
}

// ref: AdminCreateSkuProto
message AdminCreateSkuProto {
	SkuDataProto sku_data = 1;
}

// ref: AdminDeleteInAppPurchaseItemOutProto
message AdminDeleteInAppPurchaseItemOutProto {
	// ref: AdminDeleteInAppPurchaseItemOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	Status status = 1;
}

// ref: AdminDeleteInAppPurchaseItemProto
message AdminDeleteInAppPurchaseItemProto {
	string player_id = 1;
	string item_id = 2;
	string reason = 3;
	int32 quantity = 4;
}

// ref: AdminGetInAppPurchaseLogsOutProto
message AdminGetInAppPurchaseLogsOutProto {
	repeated PlayerInAppPurchaseLogProto log = 1;
	repeated BalanceSnapshotEntryProto current_balance = 2;
}

// ref: AdminGetInAppPurchaseLogsProto
message AdminGetInAppPurchaseLogsProto {
	string player_id = 1;
	int64 min_timestamp_ms = 2;
	int64 max_timestamp_ms = 3;
}

// ref: AdminGrantInAppPurchaseItemOutProto
message AdminGrantInAppPurchaseItemOutProto {
	// ref: AdminGrantInAppPurchaseItemOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	Status status = 1;
}

// ref: AdminGrantInAppPurchaseItemProto
message AdminGrantInAppPurchaseItemProto {
	string player_id = 1;
	string sku_id = 2;
	string reason = 3;
	int32 quantity = 4;
}

// ref: AdminReadSkusOutProto
message AdminReadSkusOutProto {
	repeated SkuDataProto sku = 1;
}

// ref: AdminReadSkusProto
message AdminReadSkusProto {
}

// ref: AdminUpdateSkuOutProto
message AdminUpdateSkuOutProto {
	// ref: AdminUpdateSkuOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	Status status = 1;
}

// ref: AdminUpdateSkuProto
message AdminUpdateSkuProto {
	SkuDataProto sku_data = 1;
}

// ref: AnonymizeOptions
message AnonymizeOptions {
	bool user_id = 1;
	bool remove = 2;
	bool unknown = 3;
}

// ref: BalanceSnapshotEntryProto
message BalanceSnapshotEntryProto {
	string currency_type = 1;
	int32 quantity = 2;
}

// ref: PlayerInAppPurchaseLogProto
message PlayerInAppPurchaseLogProto {
	int64 timestamp_ms = 1;
	string player_id = 2;
	string type = 3;
	string description = 4;
	string sku_id = 5;
	string currency_used = 6;
	int64 price_paid_e6 = 7;
	string vendor_code = 8;
	repeated BalanceSnapshotEntryProto initial_balance = 9;
	repeated BalanceSnapshotEntryProto final_balance = 10;
	repeated string item_id = 11;
}

// ref: RedeemPasscodeRequestProto
message RedeemPasscodeRequestProto {
	string passcode = 1;
}

// ref: RedeemPasscodeResponseProto
message RedeemPasscodeResponseProto {
	// ref: RedeemPasscodeResponseProto/Types/Result
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NOT_AVAILABLE = 2;
		OVER_INVENTORY_LIMIT = 3;
		ALREADY_REDEEMED = 4;
	}

	// ref: RedeemPasscodeResponseProto/Types/AcquiredItem
	message AcquiredItem {
		string item = 1;
		int64 count = 2;
	}

	Result result = 1;
	repeated AcquiredItem acquired_item = 2;
	bytes acquired_items_proto = 3;
	string passcode = 4;
}

// ref: SkuContentProto
message SkuContentProto {
	string item_type = 1;
	int32 quantity = 2;
}

// ref: SkuDataProto
message SkuDataProto {
	// ref: SkuDataProto/Types/SkuPaymentType
	enum SkuPaymentType {
		UNSET = 0;
		THIRD_PARTY = 1;
		IN_GAME = 2;
	}

	string id = 1;
	bool is_enabled = 2;
	repeated SkuContentProto content = 3;
	repeated SkuPriceProto price = 4;
	SkuPaymentType payment_type = 5;
	int64 last_modified_timestamp_ms = 6;
	repeated SkuPresentationDataProto presentation_data = 7;
	int64 enabled_window_start_ms = 8;
	int64 enabled_window_end_ms = 9;
}

// ref: SkuPresentationDataProto
message SkuPresentationDataProto {
	string key = 1;
	string value = 2;
}

// ref: SkuPriceProto
message SkuPriceProto {
	string currency_type = 1;
	int32 price = 2;
}

// ref: WeatherAlertSettingsProto
message WeatherAlertSettingsProto {
	// ref: WeatherAlertSettingsProto/Types/AlertEnforceSettings
	message AlertEnforceSettings {
		// ref: WeatherAlertSettingsProto/Types/AlertEnforceSettings/Types/EnforceCondition
		message EnforceCondition {
			repeated string color = 1;
			repeated string type = 2;
			repeated string category = 3;
		}

		string country_code = 1;
		WeatherAlertSettingsProto.EnforceCondition when = 2;
	}

	// ref: WeatherAlertSettingsProto/Types/AlertIgnoreSettings
	message AlertIgnoreSettings {
		// ref: WeatherAlertSettingsProto/Types/AlertIgnoreSettings/Types/OverrideCondition
		message OverrideCondition {
			repeated string color = 1;
			repeated string type = 2;
		}

		string country_code = 1;
		WeatherAlertSettingsProto.OverrideCondition when = 2;
	}

	// ref: WeatherAlertSettingsProto/Types/AlertEnforceSettings/Types/EnforceCondition
	message EnforceCondition {
		repeated string color = 1;
		repeated string type = 2;
		repeated string category = 3;
	}

	// ref: WeatherAlertSettingsProto/Types/AlertIgnoreSettings/Types/OverrideCondition
	message OverrideCondition {
		repeated string color = 1;
		repeated string type = 2;
	}

	bool warn_weather = 1;
	WeatherAlertProto.Severity default_severity = 2;
	repeated AlertIgnoreSettings ignores = 3;
	repeated AlertEnforceSettings enforces = 4;
}

// ref: WeatherSettingsProto
message WeatherSettingsProto {
	// ref: WeatherSettingsProto/Types/GameplayWeatherSettingsProto/Types/ConditionMapSettings
	message ConditionMapSettings {
		GameplayWeatherProto.WeatherCondition gameplay_condition = 1;
		repeated string provider_enums = 2;
	}

	// ref: WeatherSettingsProto/Types/DisplayWeatherSettingsProto/Types/DisplayLevelSettings
	message DisplayLevelSettings {
		repeated string condition_enums = 1;
		DisplayWeatherProto.DisplayLevel cloud_level = 2;
		DisplayWeatherProto.DisplayLevel rain_level = 3;
		DisplayWeatherProto.DisplayLevel snow_level = 4;
		DisplayWeatherProto.DisplayLevel fog_level = 5;
		DisplayWeatherProto.DisplayLevel special_effect_level = 6;
	}

	// ref: WeatherSettingsProto/Types/DisplayWeatherSettingsProto
	message DisplayWeatherSettingsProto {
		// ref: WeatherSettingsProto/Types/DisplayWeatherSettingsProto/Types/DisplayLevelSettings
		message DisplayLevelSettings {
			repeated string condition_enums = 1;
			DisplayWeatherProto.DisplayLevel cloud_level = 2;
			DisplayWeatherProto.DisplayLevel rain_level = 3;
			DisplayWeatherProto.DisplayLevel snow_level = 4;
			DisplayWeatherProto.DisplayLevel fog_level = 5;
			DisplayWeatherProto.DisplayLevel special_effect_level = 6;
		}

		// ref: WeatherSettingsProto/Types/DisplayWeatherSettingsProto/Types/WindLevelSettings
		message WindLevelSettings {
			int32 wind_level1_speed = 1;
			int32 wind_level2_speed = 2;
			int32 wind_level3_speed = 3;
		}

		repeated WeatherSettingsProto.DisplayLevelSettings display_level_settings = 1;
		WeatherSettingsProto.WindLevelSettings wind_level_settings = 2;
	}

	// ref: WeatherSettingsProto/Types/GameplayWeatherSettingsProto
	message GameplayWeatherSettingsProto {
		// ref: WeatherSettingsProto/Types/GameplayWeatherSettingsProto/Types/ConditionMapSettings
		message ConditionMapSettings {
			GameplayWeatherProto.WeatherCondition gameplay_condition = 1;
			repeated string provider_enums = 2;
		}

		repeated WeatherSettingsProto.ConditionMapSettings condition_map = 1;
		int32 min_speed_for_windy = 2;
		repeated string conditions_for_windy = 3;
	}

	// ref: WeatherSettingsProto/Types/DisplayWeatherSettingsProto/Types/WindLevelSettings
	message WindLevelSettings {
		int32 wind_level1_speed = 1;
		int32 wind_level2_speed = 2;
		int32 wind_level3_speed = 3;
	}

	GameplayWeatherSettingsProto gameplay_settings = 1;
	DisplayWeatherSettingsProto display_settings = 2;
	WeatherAlertSettingsProto alert_settings = 3;
}


//----- End proto -----
//------------------------------
//----- Begin protos -----

// ref: Niantic.Platform.Protos.NotificationState
enum NotificationState {
	UNSET_STATE = 0;
	VIEWED = 1;
}

// ref: Niantic.Platform.Protos.PlatformClientAction
enum PlatformClientAction {
	UNKNOWN_PLATFORM_CLIENT_ACTION = 0;
	REGISTER_PUSH_NOTIFICATION = 5000;
	UNREGISTER_PUSH_NOTIFICATION = 5001;
	UPDATE_NOTIFICATION_STATUS = 5002;
	OPT_OUT_PUSH_NOTIFICATION_CATEGORY = 5003;
	DOWNLOAD_GAME_MASTER_TEMPLATES = 5004;
	GET_INVENTORY = 5005;
	REDEEM_PASSCODE = 5006;
	PING = 5007;
	ADD_LOGIN_ACTION = 5008;
	REMOVE_LOGIN_ACTION = 5009;
	LIST_LOGIN_ACTION = 5010;
	ADD_NEW_POI = 5011;
	PROXY_SOCIAL_ACTION = 5012;
	CLIENT_TELEMETRY = 5013;
	GET_AVAILABLE_SUBMISSIONS = 5014;
	GET_SIGNED_URL_FOR_PHOTO_UPLOAD = 5015;
}

// ref: Niantic.Platform.Protos.AddLoginActionOutProto
message AddLoginActionOutProto {
	// ref: Niantic.Platform.Protos.AddLoginActionOutProto/Types/Status
	enum Status {
		UNSET = 0;
		AUTH_FAILURE = 1;
		LOGIN_TAKEN = 2;
	}

	bool success = 1;
	repeated LoginDetail login_detail = 2;
	Status status = 3;
}

// ref: Niantic.Platform.Protos.AddLoginActionProto
message AddLoginActionProto {
	IdentityProvider identity_provider = 1;
	bytes inner_message = 2;
}

// ref: Niantic.Platform.Protos.ApnToken
message ApnToken {
	string registration_id = 1;
	string bundle_identifier = 2;
	int32 payload_byte_size = 3;
}

// ref: Niantic.Platform.Protos.ClientInbox
message ClientInbox {
	// ref: Niantic.Platform.Protos.ClientInbox/Types/Label
	enum Label {
		UNSET_LABEL = 0;
		UNREAD = 1;
		NEW = 2;
		IMMEDIATE = 3;
	}

	// ref: Niantic.Platform.Protos.ClientInbox/Types/Notification
	message Notification {
		string notification_id = 1;
		string title_key = 2;
		string category = 3;
		int64 create_timestamp_ms = 4;
		repeated TemplateVariable variables = 5;
		repeated ClientInbox.Label labels = 6;
		int64 expire_time_ms = 7;
	}

	repeated Notification notifications = 1;
	repeated TemplateVariable builtin_variables = 2;
}

// ref: Niantic.Platform.Protos.DebugInfoProto
message DebugInfoProto {
	double latitude = 1;
	double longitude = 2;
}

// ref: Niantic.Platform.Protos.DownloadSettingsActionProto
message DownloadSettingsActionProto {
	string sha1 = 1;
}

// ref: Niantic.Platform.Protos.DownloadSettingsResponseProto
message DownloadSettingsResponseProto {
	string error = 1;
	string sha1 = 2;
	bytes values = 3;
}

// ref: Niantic.Platform.Protos.GcmToken
message GcmToken {
	string registration_id = 1;
}

// ref: Niantic.Platform.Protos.GetAvailableSubmissionsOutProto
message GetAvailableSubmissionsOutProto {
	int32 submissions_left = 1;
	int32 min_player_level = 2;
}

// ref: Niantic.Platform.Protos.GetAvailableSubmissionsProto
message GetAvailableSubmissionsProto {
}

// ref: Niantic.Platform.Protos.GetUploadUrlOutProto
message GetUploadUrlOutProto {
	// ref: Niantic.Platform.Protos.GetUploadUrlOutProto/Types/Status
	enum Status {
		UNSET = 0;
		FAILURES = 1;
		SUCCESS = 2;
	}

	Status status = 1;
	string signed_url = 2;
	string supporting_image_signed_url = 3;
}

// ref: Niantic.Platform.Protos.GetUploadUrlProto
message GetUploadUrlProto {
	string user_id = 1;
	string game_unique_id = 2;
}

// ref: Niantic.Platform.Protos.ListLoginActionOutProto
message ListLoginActionOutProto {
	bool success = 1;
	repeated LoginDetail login_detail = 2;
}

// ref: Niantic.Platform.Protos.LoginDetail
message LoginDetail {
	IdentityProvider identity_provider = 1;
	string email = 2;
}

// ref: Niantic.Platform.Protos.OptOutProto
message OptOutProto {
	repeated string categories = 1;
}

// ref: Niantic.Platform.Protos.PingRequestProto
message PingRequestProto {
	int32 response_size_bytes = 1;
	string random_request_bytes = 2;
	bool use_cache_for_random_request_bytes = 3;
}

// ref: Niantic.Platform.Protos.PingResponseProto
message PingResponseProto {
	string user_info = 1;
	string server_info = 2;
	string random_response_bytes = 3;
}

// ref: Niantic.Platform.Protos.PlayerReputationProto
message PlayerReputationProto {
	// ref: Niantic.Platform.Protos.PlayerReputationProto/Types/CheatReputation
	enum CheatReputation {
		UNSET = 0;
		BOT = 1;
		SPOOFER = 2;
	}

	int64 account_age_ms = 1;
	int64 player_level = 2;
	repeated CheatReputation cheat_reputation = 3;
	bool is_minor = 4;
}

// ref: Niantic.Platform.Protos.PortalCurationImageResult
message PortalCurationImageResult {
	// ref: Niantic.Platform.Protos.PortalCurationImageResult/Types/Result
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FEATURE_DISABLED = 2;
		ALREADY_UPLOADED = 3;
		IMAGE_NOT_FOUND = 4;
		IMAGE_TOO_BIG = 5;
		IMAGE_NOT_SERVABLE = 6;
		PORTAL_NOT_FOUND = 7;
	}

}

// ref: Niantic.Platform.Protos.PushNotificationRegistryOutProto
message PushNotificationRegistryOutProto {
	// ref: Niantic.Platform.Protos.PushNotificationRegistryOutProto/Types/Result
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NO_CHANGE = 2;
	}

	Result result = 1;
}

// ref: Niantic.Platform.Protos.PushNotificationRegistryProto
message PushNotificationRegistryProto {
	ApnToken apn_token = 1;
	GcmToken gcm_token = 2;
}

// ref: Niantic.Platform.Protos.RemoveLoginActionOutProto
message RemoveLoginActionOutProto {
	bool success = 1;
	repeated LoginDetail login_detail = 2;
}

// ref: Niantic.Platform.Protos.RemoveLoginActionProto
message RemoveLoginActionProto {
	IdentityProvider identity_provider = 1;
}

// ref: Niantic.Platform.Protos.SubmitNewPoiOutProto
message SubmitNewPoiOutProto {
	// ref: Niantic.Platform.Protos.SubmitNewPoiOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		INTERNAL_ERROR = 3;
		TOO_MANY_RECENT_SUBMISSIONS = 4;
		INVALID_INPUT = 5;
		MINOR = 6;
	}

	Status status = 1;
	repeated string message = 2;
}

// ref: Niantic.Platform.Protos.SubmitNewPoiProto
message SubmitNewPoiProto {
	string title = 1;
	string long_description = 2;
	string image_gs_file_path = 3;
	int32 lat_e6 = 4;
	int32 lng_e6 = 5;
	string image_serving_url = 6;
	string supporting_image_gs_file_path = 12;
	string supporting_image_serving_url = 13;
	string supporting_statement = 14;
}

// ref: Niantic.Platform.Protos.TemplateVariable
message TemplateVariable {
	string name = 1;
	string literal = 2;
	string key = 3;
	string lookup_table = 4;
	bytes byte_value = 5;
}

// ref: Niantic.Platform.Protos.UpdateNotificationOutProto
message UpdateNotificationOutProto {
	repeated string notification_ids = 1;
	repeated int64 create_timestamp_ms = 2;
	NotificationState state = 3;
}

// ref: Niantic.Platform.Protos.UpdateNotificationProto
message UpdateNotificationProto {
	repeated string notification_ids = 1;
	repeated int64 create_timestamp_ms = 2;
	NotificationState state = 3;
}

// ref: Niantic.Platform.Protos.UploadPoiPhotoByUrlOutProto
message UploadPoiPhotoByUrlOutProto {
	PortalCurationImageResult.Result status = 1;
}

// ref: Niantic.Platform.Protos.UploadPoiPhotoByUrlProto
message UploadPoiPhotoByUrlProto {
	string request_id = 1;
	string image_url = 2;
}


//----- End protos -----
//------------------------------
//----- Begin protos -----

// ref: Niantic.Platform.Iap.Protos.AvailableSkuProto
message AvailableSkuProto {
	string id = 1;
	bool is_third_party_vendor_item = 2;
	repeated CurrencyQuantityProto price = 3;
	repeated CurrencyQuantityProto currency_granted = 4;
	repeated GameItemContentProto game_item_content = 5;
	repeated SkuPresentationProto presentation_data = 6;
	bool can_be_purchased = 7;
}

// ref: Niantic.Platform.Iap.Protos.CurrencyQuantityProto
message CurrencyQuantityProto {
	string currency_type = 1;
	int32 quantity = 2;
}

// ref: Niantic.Platform.Iap.Protos.CurrencyUpdateProto
message CurrencyUpdateProto {
	string currency_name = 1;
	int32 currency_delta = 2;
	int32 currency_balance = 3;
	int32 fiat_purchased_balance = 4;
}

// ref: Niantic.Platform.Iap.Protos.GameItemContentProto
message GameItemContentProto {
	string type = 1;
	int32 quantity = 2;
}

// ref: Niantic.Platform.Iap.Protos.GetAvailableSkusAndBalancesOutProto
message GetAvailableSkusAndBalancesOutProto {
	// ref: Niantic.Platform.Iap.Protos.GetAvailableSkusAndBalancesOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	repeated AvailableSkuProto available_sku = 1;
	repeated CurrencyQuantityProto balance = 2;
	string player_token = 3;
}

// ref: Niantic.Platform.Iap.Protos.GetAvailableSkusAndBalancesProto
message GetAvailableSkusAndBalancesProto {
}

// ref: Niantic.Platform.Iap.Protos.PurchaseSkuOutProto
message PurchaseSkuOutProto {
	// ref: Niantic.Platform.Iap.Protos.PurchaseSkuOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		BALANCE_TOO_LOW = 3;
		SKU_NOT_AVAILABLE = 4;
		OVER_INVENTORY_LIMIT = 5;
	}

}

// ref: Niantic.Platform.Iap.Protos.PurchaseSkuProto
message PurchaseSkuProto {
	string sku_id = 1;
}

// ref: Niantic.Platform.Iap.Protos.RedeemGoogleReceiptOutProto
message RedeemGoogleReceiptOutProto {
	// ref: Niantic.Platform.Iap.Protos.RedeemGoogleReceiptOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	string transaction_token = 1;
}

// ref: Niantic.Platform.Iap.Protos.RedeemGoogleReceiptProto
message RedeemGoogleReceiptProto {
	string receipt = 1;
	string receipt_signature = 2;
	string purchase_currency = 3;
	int32 price_paid_e6 = 4;
	int64 price_paid_e6_long = 5;
}

// ref: Niantic.Platform.Iap.Protos.SkuPresentationProto
message SkuPresentationProto {
	string key = 1;
	string value = 2;
}


//----- End protos -----
//------------------------------
//----- Begin rpc -----

// ref: Atlas.Rpc.ChallengeFinishStatus
enum ChallengeFinishStatus {
	CHALLENGE_FINISH_STATUS_UNKNOWN = 0;
	CHALLENGE_FINISH_STATUS_PLAYER_WON = 1;
	CHALLENGE_FINISH_STATUS_PLAYER_LOSE = 2;
}

// ref: Atlas.Rpc.ChallengeRpcStatus
enum ChallengeRpcStatus {
	CHALLENGE_RPC_UNKNOWN = 0;
	CHALLENGE_RPC_SUCCESS = 1;
	CHALLENGE_RPC_OUT_OF_RANGE = 2;
	CHALLENGE_RPC_NOT_IN_CHAMBER = 3;
	CHALLENGE_RPC_ALREADY_IN_CHAMBER = 4;
	CHALLENGE_RPC_CANNOT_PLACE_RUNESTONE = 5;
	CHALLENGE_RPC_POI_CLOSED = 6;
	CHALLENGE_RPC_FORTRESS_IN_COOLDOWN = 7;
	CHALLENGE_RPC_CANNOT_CHANGE_PROFESSION = 8;
}

// ref: Atlas.Rpc.DayNightTag
enum DayNightTag {
	ENV_DAY_NIGHT_UNSET = 0;
	ENV_DAY = 1;
	ENV_NIGHT = 2;
	ENV_DAWN = 3;
	ENV_DUSK = 4;
}

// ref: Atlas.Rpc.Method
enum Method {
	UNSET = 0;
	DOWNLOAD_SETTINGS = 1;
	CREATE_OR_UPDATE_PLAYER = 2;
	ENCOUNTER_START = 3;
	ENCOUNTER_SPELLCAST = 4;
	ENCOUNTER_FLEE = 5;
	GRANT_ONE_TIME_REWARDS = 6;
	LEVEL_UP_COLLECTION_FAMILY = 7;
	LOOT_OUTPOST = 8;
	PLAYER_LEVEL_UP = 9;
	GET_SERVER_TIME = 10;
	BUY_STORE_PACK = 11;
	CLAIM_PLAYER_NICKNAME = 12;
	ADD_DARK_DETECTOR = 13;
	GET_OUTPOST_DETAILS = 14;
	CHECK_WALKBOXES = 15;
	APPLY_KEY_TO_WALKBOX = 16;
	USE_PORTKEY = 17;
	SET_PLAYER_FLAG_TO_DEFAULT = 18;
	ENCOUNTER_GET_STATE = 19;
	GET_PLAYER_FEATURE_LIST = 20;
	PUSH_ANALYTICS_EVENTS = 24;
	USE_POTION = 25;
	ENCOUNTER_USE_POTION = 26;
	GET_PLAYER_STATE = 27;
	GET_FORTRESS_DETAILS = 28;
	JOIN_CHAMBER = 29;
	LEAVE_CHAMBER = 30;
	GET_CHAMBER_STATE = 33;
	CLAIM_CHAMBER_REWARDS = 34;
	PUSH_PERFORMANCE_METRICS = 35;
	PLAYER_SELECT_TEAM = 36;
	GET_FORTRESS_FLOO_NETWORK_STATISTICS = 37;
	GET_FLOO_NETWORK_SEASON_SCORES = 38;
	GET_FLOO_NETWORK_REGION_SCORES = 39;
	PROFESSION_SELECT = 40;
	PROFESSION_NODE_LEVEL_UNLOCK = 41;
	CONTRIBUTE_FLOO_POWDER_TO_FORTRESS = 42;
	OPEN_CONTAINER = 43;
	UPDATE_PROFILE_FIELD = 44;
	COLLECT_INGREDIENT = 45;
	MAP_ABILITY_START = 46;
	CRAFT_POTION = 47;
	OPEN_FAMILY_CHESTS = 48;
	RELEASE_ESCROWED_REWARDS = 49;
	CLAIM_POTION = 50;
	PLACE_ITEM = 51;
	PRESTIGE_PAGE = 52;
	SET_RUNESTONES = 53;
	APPLY_MASTER_NOTE = 54;
	REMOVE_VAULT_ITEM = 55;
	GET_CURRENCY_BALANCE = 56;
	BUY_POTION_INGREDIENTS = 57;
	INSTANT_FINISH_BREWING = 58;
	ENCOUNTER_START_TUTORIAL = 59;
	STORYBOARD_DO_STEP = 60;
	STORYBOARD_CANCEL = 61;
	ADD_TIME_TO_CAULDRON = 62;
	CLAIM_DAILY_REWARD = 63;
	QUEST_COMPLETE = 64;
	QUEST_ACQUIRE_DAILIES = 65;
	GIVEAWAY_INGREDIENT_GREENHOUSE = 66;
	PROFANITY_FILTER = 67;
	GET_GREENHOUSE_DETAILS = 68;
	PLAYER_HELP_INFO = 69;
	NOTIFY_PRIVACY_POLICY = 70;
	ACCEPT_TERMS_OF_SERVICE = 71;
	STORYBOARD_COMPLETE = 72;
	ACKNOWLEDGE_PUNISHMENT = 73;
	OPT_INTO_MARKETING_EMAILS = 74;
	RENT_POT = 75;
	PLANT_INGREDIENT = 76;
	CAST_SPELL_FOR_GROWING = 77;
	ECHO = 666;
	DBG_UPDATE_INVENTORY = 999000;
	DBG_MODIFY_COLLECTION_ITEMS = 999001;
	DBG_RETURN_COLLECTION_ITEM = 999002;
	DBG_GRANT_LOOT_COLLECTION = 999003;
	DBG_START_ENCOUNTER = 999004;
	DBG_RESET_PLAYER = 999005;
	DBG_GET_SPELL_CAST_INFO = 999006;
	DBG_GET_LOOT_ROLL_INFO = 999007;
	DBG_SIMULATE_WALKING = 999008;
	DBG_SET_PLAYER_FLAG = 999009;
	DBG_PLAYER_SELECT_TEAM = 999011;
	DBG_SET_TEAM_FLOO_POINTS = 999012;
	DBG_RESET_PROFESSION = 999013;
	DBG_GET_CHAMBER_INFO = 999014;
	DBG_WC_ADD_BUFF = 999015;
	DBG_CHALLENGE_WIN = 999016;
	DBG_RESET_STORE_PACK_PURCHASED = 999017;
}

// ref: Atlas.Rpc.MoonPhaseTag
enum MoonPhaseTag {
	ENV_MOON_PHASE_UNSET = 0;
	ENV_NEW = 1;
	ENV_FIRST_QUARTER = 2;
	ENV_FULL = 3;
	ENV_THIRD_QUARTER = 4;
	ENV_WAXING_CRESCENT = 5;
	ENV_WAXING_GIBBOUS = 6;
	ENV_WANING_GIBBOUS = 7;
	ENV_WANING_CRESCENT = 8;
}

// ref: Atlas.Rpc.ProfileFieldOperation
enum ProfileFieldOperation {
	UNSET = 0;
	SET_TITLE = 1;
	SET_THEME = 2;
	SET_HOUSE = 3;
	SET_WAND_CORE = 4;
	SET_WAND_WOOD = 5;
	SET_WAND_FLEXIBILITY = 6;
	SET_WAND_LENGTH = 7;
	ADD_FAVORITE_BADGE = 8;
	REMOVE_FAVORITE_BADGE = 9;
	ADD_FAVORITE_TITLE = 10;
	REMOVE_FAVORITE_TITLE = 11;
	SET_FIRST_NAME = 12;
	SET_LAST_NAME = 13;
	SET_PROFILE_CREATION_LOCATION = 14;
	ADD_UNLOCKED_SELFIE_AVATAR_ASSET = 15;
	ADD_DISCOVERED_MASTER_NOTE = 16;
}

// ref: Atlas.Rpc.AbandonAllRequestAction
message AbandonAllRequestAction {
}

// ref: Atlas.Rpc.AcceptTermsOfServiceRequestProto
message AcceptTermsOfServiceRequestProto {
}

// ref: Atlas.Rpc.AcceptTermsOfServiceResponseProto
message AcceptTermsOfServiceResponseProto {
	// ref: Atlas.Rpc.AcceptTermsOfServiceResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		COMPLETED = 2;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.AcknowledgePunishmentRequestProto
message AcknowledgePunishmentRequestProto {
	// ref: Atlas.Rpc.AcknowledgePunishmentRequestProto/Types/Punishment
	enum Punishment {
		UNKNOWN = 0;
		WARN = 1;
		SUSPEND = 2;
	}

	Punishment punishment = 1;
}

// ref: Atlas.Rpc.AcknowledgePunishmentResponseProto
message AcknowledgePunishmentResponseProto {
	// ref: Atlas.Rpc.AcknowledgePunishmentResponseProto/Types/Result
	enum Result {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR_ANTICHEAT_NOT_ENABLED = 2;
		ERROR_NO_PUNISHMENT_TO_ACK = 3;
	}

	Result result = 1;
}

// ref: Atlas.Rpc.AddDarkDetectorRequestProto
message AddDarkDetectorRequestProto {
	string dark_detector_id = 1;
	string target_outpost_id = 2;
	int32 slot_index = 3;
}

// ref: Atlas.Rpc.AddDarkDetectorResponseProto
message AddDarkDetectorResponseProto {
	// ref: Atlas.Rpc.AddDarkDetectorResponseProto/Types/Result
	enum Result {
		UNKNOWN = 0;
		SUCCESS = 1;
		SLOT_NOT_OPEN = 2;
		NO_ITEM_IN_INVENTORY = 3;
		OUTPOST_TOO_FAR_AWAY = 4;
		POI_CLOSED = 5;
	}

	Result result = 1;
	ClientDarkDetectorAmplifierProto dark_detector_amplifier = 2;
	string partner_id = 5;
}

// ref: Atlas.Rpc.AddTimeToCauldronRequestProto
message AddTimeToCauldronRequestProto {
	int64 cauldron_id = 1;
	string time_item_gmt_id = 2;
}

// ref: Atlas.Rpc.AddTimeToCauldronResponseProto
message AddTimeToCauldronResponseProto {
	// ref: Atlas.Rpc.AddTimeToCauldronResponseProto/Types/AddTimeToCauldronResult
	enum AddTimeToCauldronResult {
		UNKNOWN = 0;
		SUCCESS = 1;
		CAULDRON_NOT_FOUND = 2;
		TIME_ITEM_NOT_FOUND = 3;
		INVALID_CAULDRON_TYPE = 4;
		INSUFFICIENT_RESOURCES = 5;
	}

	AddTimeToCauldronResult result = 1;
}

// ref: Atlas.Rpc.ApplyKeyToWalkboxRequestProto
message ApplyKeyToWalkboxRequestProto {
	// ref: Atlas.Rpc.ApplyKeyToWalkboxRequestProto/Types/WalkboxKeyType
	enum WalkboxKeyType {
		UNKNOWN = 0;
		INFINITE = 1;
		PREMIUM = 2;
	}

	int64 walkbox_id = 1;
	WalkboxKeyType key_type = 2;
}

// ref: Atlas.Rpc.ApplyKeyToWalkboxResponseProto
message ApplyKeyToWalkboxResponseProto {
	// ref: Atlas.Rpc.ApplyKeyToWalkboxResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR = 2;
		INVALID_WALKBOX = 3;
		KEY_UNAVAILABLE = 4;
		ALREADY_UNLOCKING = 5;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.ApplyMasterNoteRequestProto
message ApplyMasterNoteRequestProto {
	int64 cauldron_id = 1;
	repeated MasterNoteGesture gesture = 2;
}

// ref: Atlas.Rpc.ApplyMasterNoteResponseProto
message ApplyMasterNoteResponseProto {
	// ref: Atlas.Rpc.ApplyMasterNoteResponseProto/Types/ApplyMasterNoteResult
	enum ApplyMasterNoteResult {
		UNKNOWN = 0;
		SUCCESS = 1;
		INCORRECT_GESTURE_SEQUENCE = 2;
		NO_POTION_BREWING = 3;
		CAULDRON_HAS_COMPLETED_BREWS = 4;
		MASTER_NOTE_ALREADY_APPLIED = 5;
	}

	ApplyMasterNoteResult result = 1;
}

// ref: Atlas.Rpc.AtlasInventoryItemProto
message AtlasInventoryItemProto {
	// ref: Atlas.Rpc.AtlasInventoryItemProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		profile = 1;
		vault_item = 2;
		collection_item = 3;
		collection_family = 4;
		walkbox = 5;
		player_flags = 6;
		portkey = 7;
		player_active_buff_list = 8;
		collection_page = 9;
		vault_capacity = 11;
		cauldron = 12;
		escrowed_rewards = 13;
		professions_progress_v3 = 14;
		quest_log = 15;
		lifetime_metrics = 16;
	}

	PlayerProfileProto profile = 1;
	InventoryVaultItemProto vault_item = 2;
	InventoryCollectionItemProto collection_item = 3;
	InventoryCollectionFamilyProto collection_family = 4;
	InventoryWalkboxItemProto walkbox = 5;
	InventoryFeatureFlagsProto player_flags = 6;
	InventoryPortkeyItemProto portkey = 7;
	ActiveBuffListProto player_active_buff_list = 8;
	InventoryCollectionPageProto collection_page = 9;
	InventoryVaultCapacityProto vault_capacity = 11;
	InventoryCauldronProto cauldron = 12;
	InventoryEscrowedRewardsProto escrowed_rewards = 13;
	PlayerProfessionsProgressV3Proto professions_progress_v3 = 14;
	InventoryQuestLogProto quest_log = 15;
	LifetimeMetricsProto lifetime_metrics = 16;
}

// ref: Atlas.Rpc.AtlasInventoryKeyProto
message AtlasInventoryKeyProto {
	// ref: Atlas.Rpc.AtlasInventoryKeyProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		profile = 1;
		vault_item = 2;
		collection_item = 3;
		collection_family = 4;
		walkbox = 5;
		player_flags = 6;
		portkey = 7;
		player_active_buff_list = 8;
		collection_page = 9;
		professions_progress = 10;
		vault_capacity = 11;
		cauldron = 12;
		escrowed_rewards = 13;
		professions_progress_v3 = 14;
		quest_log = 15;
		lifetime_metrics = 16;
	}

	bool profile = 1;
	string vault_item = 2;
	string collection_item = 3;
	string collection_family = 4;
	int64 walkbox = 5;
	string player_flags = 6;
	int64 portkey = 7;
	bool player_active_buff_list = 8;
	string collection_page = 9;
	bool professions_progress = 10;
	bool vault_capacity = 11;
	int64 cauldron = 12;
	bool escrowed_rewards = 13;
	bool professions_progress_v3 = 14;
	bool quest_log = 15;
	bool lifetime_metrics = 16;
}

// ref: Atlas.Rpc.BuyStorePackRequestProto
message BuyStorePackRequestProto {
	string pack_id = 1;
}

// ref: Atlas.Rpc.BuyStorePackResponseProto
message BuyStorePackResponseProto {
	// ref: Atlas.Rpc.BuyStorePackResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		ERROR = 1;
		PACK_NOT_AVAILABLE = 2;
		INSUFFICIENT_FUNDS = 3;
		ALREADY_PURCHASED = 4;
		SUCCESS = 5;
		AT_ITEM_CAP = 6;
	}

	Status status = 1;
	LootCollectionProto rewards = 2;
}

// ref: Atlas.Rpc.CastSpellForGrowingRequestProto
message CastSpellForGrowingRequestProto {
	string outpost_id = 1;
	string pot_id = 2;
	int32 spell_energy = 3;
}

// ref: Atlas.Rpc.CastSpellForGrowingResponseProto
message CastSpellForGrowingResponseProto {
	// ref: Atlas.Rpc.CastSpellForGrowingResponseProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		TOO_FAR = 2;
		POI_CLOSED = 3;
		FEATURE_DISABLED = 4;
		INVALID_POT = 5;
		NOT_ENOUGH_SPELL_ENERGY = 6;
		NO_GROWING_IN_PROGRESS = 7;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.ChamberMobState
message ChamberMobState {
	bytes mob_id = 1;
	string encounter_gmt_id = 2;
	int64 hp = 5;
	int64 max_hp = 6;
	int32 level = 7;
	bytes encounter_ticket = 8;
	double x = 9;
	double y = 10;
	ActiveBuffListProto active_buff_list = 11;
	repeated MobReward rewards = 12;
	int64 time_to_spawn = 101;
}

// ref: Atlas.Rpc.ChamberPlayerState
message ChamberPlayerState {
	// ref: Atlas.Rpc.ChamberPlayerState/StateOneofCase
	enum StateOneofCase {
		none = 0;
		waiting = 3;
		in_progress = 4;
		finished = 5;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/StatusOneofCase
	enum StatusOneofCase {
		none = 0;
		healthy = 7;
		knocked_out = 8;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/Types/Healthy
	message Healthy {
		int64 hp = 1;
		bytes engaged_mob_id = 2;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/Types/KnockedOut
	message KnockedOut {
		int64 knockout_time_ms = 1;
		int64 recovery_time_ms = 2;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/Types/MapAbility
	message MapAbility {
		string map_ability_gmt_id = 1;
		float radius = 2;
		int64 cooldown_ms = 3;
		int32 map_ability_level = 4;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerFinishedState
	message PlayerFinishedState {
		bool has_claimed_rewards = 1;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState
	message PlayerInProgressState {
		// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/StatusOneofCase
		enum StatusOneofCase {
			none = 0;
			healthy = 7;
			knocked_out = 8;
		}

		// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/Types/Healthy
		message Healthy {
			int64 hp = 1;
			bytes engaged_mob_id = 2;
		}

		// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/Types/KnockedOut
		message KnockedOut {
			int64 knockout_time_ms = 1;
			int64 recovery_time_ms = 2;
		}

		// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerInProgressState/Types/MapAbility
		message MapAbility {
			string map_ability_gmt_id = 1;
			float radius = 2;
			int64 cooldown_ms = 3;
			int32 map_ability_level = 4;
		}

		double latitude = 1;
		double longitude = 2;
		int64 max_hp = 5;
		repeated ChamberPlayerState.MapAbility map_abilities = 6;
		ChamberPlayerState.Healthy healthy = 7;
		ChamberPlayerState.KnockedOut knocked_out = 8;
		int32 focus = 9;
		int32 max_focus = 10;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerProfessionInfo
	message PlayerProfessionInfo {
		string profession_gmt_id = 1;
	}

	// ref: Atlas.Rpc.ChamberPlayerState/Types/PlayerWaitingState
	message PlayerWaitingState {
	}

	string nickname = 1;
	map<string, int64> runestone_contributions = 2;
	PlayerWaitingState waiting = 3;
	PlayerInProgressState in_progress = 4;
	PlayerFinishedState finished = 5;
	PlayerProfessionInfo profession_info = 6;
	ActiveBuffListProto active_buff_list = 7;
}

// ref: Atlas.Rpc.ChamberState
message ChamberState {
	// ref: Atlas.Rpc.ChamberState/StateOneofCase
	enum StateOneofCase {
		none = 0;
		waiting_to_start = 4;
		in_progress = 5;
		finished = 6;
	}

	// ref: Atlas.Rpc.ChamberState/Types/FinishedState
	message FinishedState {
		ChallengeFinishStatus finish_status = 1;
		LootCollectionProto rewards = 2;
	}

	// ref: Atlas.Rpc.ChamberState/Types/InProgressState
	message InProgressState {
		// ref: Atlas.Rpc.ChamberState/Types/InProgressState/Types/UsedMapAbility
		message UsedMapAbility {
			string map_ability_gmt_id = 1;
			string caster_id = 2;
			float radius = 3;
			int64 casting_timestamp = 4;
			int64 ending_timestamp = 5;
			MapCoordinateProto map_coordinate = 6;
			int32 map_ability_level = 7;
			bytes target_mob_id = 8;
			string target_player_nickname = 9;
		}

		int64 end_time_ms = 1;
		repeated ChamberMobState mobs = 2;
		repeated ChamberState.UsedMapAbility used_map_ability = 3;
		int32 total_mob_count = 4;
	}

	// ref: Atlas.Rpc.ChamberState/Types/InProgressState/Types/UsedMapAbility
	message UsedMapAbility {
		string map_ability_gmt_id = 1;
		string caster_id = 2;
		float radius = 3;
		int64 casting_timestamp = 4;
		int64 ending_timestamp = 5;
		MapCoordinateProto map_coordinate = 6;
		int32 map_ability_level = 7;
		bytes target_mob_id = 8;
		string target_player_nickname = 9;
	}

	// ref: Atlas.Rpc.ChamberState/Types/WaitingToStartState
	message WaitingToStartState {
		int64 start_time_ms = 1;
	}

	string chamber_template_gmt_id = 1;
	repeated ChamberPlayerState player = 2;
	WaitingToStartState waiting_to_start = 4;
	InProgressState in_progress = 5;
	FinishedState finished = 6;
	int64 timestamp = 7;
}

// ref: Atlas.Rpc.CheckWalkboxesRequestProto
message CheckWalkboxesRequestProto {
}

// ref: Atlas.Rpc.CheckWalkboxesResponseProto
message CheckWalkboxesResponseProto {
	// ref: Atlas.Rpc.CheckWalkboxesResponseProto/Types/OpenedWalkboxProto
	message OpenedWalkboxProto {
		string walkbox_gmt_template = 1;
		LootCollectionProto rewards = 2;
		repeated int64 portkey_ids = 3;
	}

	repeated OpenedWalkboxProto opened_walkboxes = 1;
}

// ref: Atlas.Rpc.ClaimByCategoryRequestAction
message ClaimByCategoryRequestAction {
	string vault_category_gmt_id = 1;
}

// ref: Atlas.Rpc.ClaimChamberRewardsRequestProto
message ClaimChamberRewardsRequestProto {
}

// ref: Atlas.Rpc.ClaimChamberRewardsResponseProto
message ClaimChamberRewardsResponseProto {
	ChallengeRpcStatus status = 1;
	ChamberState state = 2;
	ClientPlayerSnapshotProto player_snapshot = 3;
}

// ref: Atlas.Rpc.ClaimDailyRewardRequestProto
message ClaimDailyRewardRequestProto {
}

// ref: Atlas.Rpc.ClaimDailyRewardResponseProto
message ClaimDailyRewardResponseProto {
	uint64 time_until_next_claim = 1;
	string daily_reward_monthly_schedule_id = 2;
	uint32 days_claimed_this_month = 3;
	LootCollectionProto reward = 4;
}

// ref: Atlas.Rpc.ClaimPlayerNicknameRequestProto
message ClaimPlayerNicknameRequestProto {
	string desired_nickname = 1;
}

// ref: Atlas.Rpc.ClaimPlayerNicknameResponseProto
message ClaimPlayerNicknameResponseProto {
	// ref: Atlas.Rpc.ClaimPlayerNicknameResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR = 2;
		NAME_NOT_AVAILABLE = 3;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.ClaimPotionRequestProto
message ClaimPotionRequestProto {
	int64 cauldron_id = 1;
	int32 cauldron_slot = 2;
	LootCollectionProto requested_rewards = 3;
}

// ref: Atlas.Rpc.ClaimPotionResponseProto
message ClaimPotionResponseProto {
	// ref: Atlas.Rpc.ClaimPotionResponseProto/Types/ClaimPotionResult
	enum ClaimPotionResult {
		UNKNOWN = 0;
		SUCCESS = 1;
		EMPTY_SLOT_SELECTED = 2;
		BREWING_NOT_COMPLETE = 3;
		INSUFFICIENT_INVENTORY_SPACE_FOR_POTION = 4;
		CAULDRON_DOES_NOT_CONTAIN_REQUESTED_REWARDS = 5;
	}

	ClaimPotionResult result = 1;
	LootCollectionProto received_rewards = 2;
	LootCollectionProto remaining_rewards = 3;
}

// ref: Atlas.Proto.ClientEnvironmentTagsProto
message ClientEnvironmentTagsProto {
	DayNightTag day_night = 1;
	MoonPhaseTag moon_phase = 2;
}

// ref: Atlas.Proto.ClientEnvironmentTagsProto
message ClientEnvironmentTagsProto {
	DayNightTag day_night = 1;
	MoonPhaseTag moon_phase = 2;
}

// ref: Atlas.Rpc.CollectIngredientRequestProto
message CollectIngredientRequestProto {
	bytes ticket = 1;
}

// ref: Atlas.Rpc.CollectIngredientResponseProto
message CollectIngredientResponseProto {
	// ref: Atlas.Rpc.CollectIngredientResponseProto/Types/CollectIngredientResult
	enum CollectIngredientResult {
		UNKNOWN = 0;
		SUCCESS = 1;
		BAD_TICKET = 2;
		NOT_IN_RANGE = 3;
		ALREADY_COLLECTED = 4;
		FULL_CAPACITY = 5;
	}

	CollectIngredientResult result = 1;
	LootCollectionProto rewards = 2;
}

// ref: Atlas.Rpc.CombatResults
message CombatResults {
	int64 current_state_index = 1;
	bool current_crit = 2;
	int64 next_state_index = 3;
	bool next_crit = 4;
	int64 hp_current_enemy = 5;
	int64 hp_current_player = 6;
	int32 level = 7;
	bool enemy_dodges = 8;
	bool player_dodges = 9;
	TempClientStatsHelper temp_client_stats_helper = 100;
}

// ref: Atlas.Rpc.ContainerConsumptionRequestProto
message ContainerConsumptionRequestProto {
	string vault_item_id = 1;
}

// ref: Atlas.Rpc.ContainerConsumptionResponseProto
message ContainerConsumptionResponseProto {
	// ref: Atlas.Rpc.ContainerConsumptionResponseProto/Types/Status
	enum Status {
		NONE = 0;
		UNKNOWN_CONTAINER_CONSUMPTION_RESULT = 1;
		SUCCESS = 2;
		CONTAINER_NOT_IN_VAULT = 3;
	}

	Status status = 1;
	LootCollectionProto container_contents = 2;
}

// ref: Atlas.Rpc.ContributeFlooPowderToFortressRequest
message ContributeFlooPowderToFortressRequest {
	string fortress_id = 1;
	double fortress_lat = 2;
	double fortress_lng = 3;
	int64 floo_powder = 4;
}

// ref: Atlas.Rpc.ContributeFlooPowderToFortressResponse
message ContributeFlooPowderToFortressResponse {
	// ref: Atlas.Rpc.ContributeFlooPowderToFortressResponse/Types/Result
	enum Result {
		UNKNOWN = 0;
		SUCCESS = 1;
		PLAYER_HAS_NO_TEAM = 2;
		INSUFFICIENT_FLOO_POWDER = 3;
		TOO_FAR_FROM_FORTRESS = 4;
		SEASON_NOT_ACTIVE = 5;
		FLOO_NETWORK_UNAVAILABLE = 6;
	}

	Result result = 1;
	FlooNetworkFortressStatistics fortress_statistics = 2;
}

// ref: Atlas.Rpc.CraftPotionRequestProto
message CraftPotionRequestProto {
	string recipe_gmt_id = 1;
	int64 cauldron_id = 2;
	LootCollectionProto ingredients_to_purchase = 3;
}

// ref: Atlas.Rpc.CraftPotionResponseProto
message CraftPotionResponseProto {
	// ref: Atlas.Rpc.CraftPotionResponseProto/Types/CraftPotionResult
	enum CraftPotionResult {
		UNKNOWN = 0;
		SUCCESS = 1;
		INSUFFICIENT_RESOURCES = 2;
		CAULDRON_QUEUE_FULL = 3;
		CAULDRON_HAS_COMPLETED_BREWS = 4;
		RENTAL_CAULDRON_NOT_AVAILABLE = 5;
		RENTAL_CAULDRON_NOT_ENOUGH_TIME_LEFT = 6;
		PURCHASE_INGREDIENTS_INSUFFICIENT_RESOURCES = 7;
		RECIPE_NOT_ENABLED = 8;
		RECIPE_NOT_UNLOCKED = 9;
	}

	CraftPotionResult result = 1;
	LootCollectionProto rewards = 2;
}

// ref: Atlas.Rpc.CreateOrUpdatePlayerRequestProto
message CreateOrUpdatePlayerRequestProto {
	// ref: Atlas.Rpc.CreateOrUpdatePlayerRequestProto/Types/ClientPlayerLocaleProto
	message ClientPlayerLocaleProto {
		string country = 1;
		string language = 2;
		string timezone = 3;
	}

	ClientPlayerLocaleProto locale = 1;
}

// ref: Atlas.Rpc.CreateOrUpdatePlayerResponseProto
message CreateOrUpdatePlayerResponseProto {
	// ref: Atlas.Rpc.CreateOrUpdatePlayerResponseProto/Types/ClientPlayerDataProto
	message ClientPlayerDataProto {
		int64 creation_time_ms = 1;
		bool update_privacy_policy = 4;
		bool update_terms_of_service = 5;
	}

	// ref: Atlas.Rpc.CreateOrUpdatePlayerResponseProto/Types/PlayerDisciplineInfoProto
	message PlayerDisciplineInfoProto {
		bool warn = 1;
		bool warn_message_acknowledged = 2;
		int64 warn_expire_ms = 3;
		bool was_suspended = 4;
		bool suspended_message_acknowledged = 5;
	}

	bool success = 1;
	ClientPlayerDataProto player = 2;
	bool first_login_of_day = 3;
	PlayerDisciplineInfoProto player_discipline = 4;
}

// ref: Atlas.Rpc.CurrencyQuantityProto
message CurrencyQuantityProto {
	string currency_type = 1;
	int32 quantity = 2;
}

// ref: Atlas.Rpc.DebugPlayerSelectTeamRequestProto
message DebugPlayerSelectTeamRequestProto {
	string team_id = 1;
}

// ref: Atlas.Rpc.DebugPlayerSelectTeamResponseProto
message DebugPlayerSelectTeamResponseProto {
	// ref: Atlas.Rpc.DebugPlayerSelectTeamResponseProto/Types/Result
	enum Result {
		UNKNOWN = 0;
		TEAM_SET = 1;
		TEAM_ID_INVALID = 2;
	}

	Result result = 1;
}

// ref: Atlas.Rpc.DebugSetTeamFlooPointsRequest
message DebugSetTeamFlooPointsRequest {
	string fortress_id = 1;
	double latitude = 2;
	double longitude = 3;
	string team_id = 4;
	int64 floo_points = 5;
}

// ref: Atlas.Rpc.DebugSetTeamFlooPointsResponse
message DebugSetTeamFlooPointsResponse {
	FlooNetworkFortressStatistics fortress_statistics = 1;
}

// ref: Atlas.Rpc.EchoRequestProto
message EchoRequestProto {
}

// ref: Atlas.Rpc.EchoResponseProto
message EchoResponseProto {
	string response = 1;
}

// ref: Atlas.Rpc.EncounterFleeRequestProto
message EncounterFleeRequestProto {
	// ref: Atlas.Rpc.EncounterFleeRequestProto/Types/StageOptions
	enum StageOptions {
		UNKNOWN = 0;
		SWISH = 1;
		COMBAT = 2;
	}

	bytes encounter_id = 1;
	StageOptions stage_options = 2;
}

// ref: Atlas.Rpc.EncounterFleeResponseProto
message EncounterFleeResponseProto {
	// ref: Atlas.Rpc.EncounterFleeResponseProto/Types/Status
	enum Status {
		ENCOUNTER_FLEE_UNKNOWN = 0;
		ENCOUNTER_FLEE_SUCCESS = 1;
		ENCOUNTER_FLEE_NOT_IN_ENCOUNTER = 2;
		ENCOUNTER_FLEE_CLIENT_STALE_DATA = 3;
		ENCOUNTER_FLEE_ERROR = 4;
		ENCOUNTER_FLEE_WC_PLAYER_NOT_IN_CHAMBER = 5;
		ENCOUNTER_FLEE_WC_NOT_IN_PROGRESS = 6;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.EncounterGetStateCombatStageResultProto
message EncounterGetStateCombatStageResultProto {
	CombatResults results = 1;
}

// ref: Atlas.Rpc.EncounterGetStateRequestProto
message EncounterGetStateRequestProto {
	bytes encounter_id = 1;
}

// ref: Atlas.Rpc.EncounterGetStateResponseProto
message EncounterGetStateResponseProto {
	// ref: Atlas.Rpc.EncounterGetStateResponseProto/Types/Status
	enum Status {
		ENCOUNTER_GET_STATE_UNKNOWN = 0;
		ENCOUNTER_GET_STATE_SUCCESS = 1;
		ENCOUNTER_GET_STATE_NOT_IN_ENCOUNTER = 2;
		ENCOUNTER_GET_STATE_CLIENT_STALE_DATA = 3;
		ENCOUNTER_GET_STATE_ERROR = 4;
		ENCOUNTER_GET_STATE_WC_PLAYER_NOT_IN_CHAMBER = 5;
		ENCOUNTER_GET_STATE_WC_NOT_IN_PROGRESS = 6;
	}

	Status status = 1;
	int32 current_stage_index = 2;
	EncounterGetStateStageResultProto stage = 3;
}

// ref: Atlas.Rpc.EncounterGetStateStageResultProto
message EncounterGetStateStageResultProto {
	// ref: Atlas.Rpc.EncounterGetStateStageResultProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		swish = 1;
		combat = 2;
	}

	EncounterGetStateSwishStageResultProto swish = 1;
	EncounterGetStateCombatStageResultProto combat = 2;
}

// ref: Atlas.Rpc.EncounterGetStateSwishStageResultProto
message EncounterGetStateSwishStageResultProto {
}

// ref: Atlas.Rpc.EncounterInteractCombatStageOptionsProto
message EncounterInteractCombatStageOptionsProto {
	// ref: Atlas.Rpc.EncounterInteractCombatStageOptionsProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		attack = 1;
		defend = 2;
		auto_advance = 3;
	}

	// ref: Atlas.Rpc.EncounterInteractCombatStageOptionsProto/Types/Attack
	message Attack {
		repeated string energy_gmt_id = 1;
		float skill_modifier = 2;
	}

	// ref: Atlas.Rpc.EncounterInteractCombatStageOptionsProto/Types/AutoAdvance
	message AutoAdvance {
	}

	// ref: Atlas.Rpc.EncounterInteractCombatStageOptionsProto/Types/Defend
	message Defend {
		bool block_success = 1;
		repeated string energy_gmt_id = 2;
	}

	Attack attack = 1;
	Defend defend = 2;
	AutoAdvance auto_advance = 3;
}

// ref: Atlas.Rpc.EncounterInteractCombatStageResultProto
message EncounterInteractCombatStageResultProto {
	// ref: Atlas.Rpc.EncounterInteractCombatStageResultProto/Types/Status
	enum Status {
		COMBAT_INTERACT_RESULT_UNKNOWN = 0;
		COMBAT_INTERACT_RESULT_ENEMY_DEFEATED = 1;
		COMBAT_INTERACT_RESULT_CONTINUE = 2;
		COMBAT_INTERACT_RESULT_PLAYER_DEFEATED = 3;
		COMBAT_INTERACT_RESULT_OUT_OF_ENERGY = 4;
		COMBAT_INTERACT_RESULT_ERROR = 5;
	}

	Status status = 1;
	CombatResults results = 2;
}

// ref: Atlas.Rpc.EncounterInteractRequestProto
message EncounterInteractRequestProto {
	bytes encounter_id = 1;
	EncounterInteractStageOptionsProto stage_options = 2;
}

// ref: Atlas.Rpc.EncounterInteractResponseProto
message EncounterInteractResponseProto {
	// ref: Atlas.Rpc.EncounterInteractResponseProto/Types/EncounterType
	enum EncounterType {
		UNKNOWN = 0;
		TRACE_SWISH = 1;
		TRACE_COMBAT = 2;
		WC_COMBAT = 3;
		INGREDIENT = 4;
	}

	EncounterInteractStatusProto status = 1;
	EncounterInteractStageResultProto stage = 2;
	EncounterType encounter_type = 3;
}

// ref: Atlas.Rpc.EncounterInteractStageOptionsProto
message EncounterInteractStageOptionsProto {
	// ref: Atlas.Rpc.EncounterInteractStageOptionsProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		swish = 1;
		combat = 2;
	}

	EncounterInteractSwishStageOptionsProto swish = 1;
	EncounterInteractCombatStageOptionsProto combat = 2;
}

// ref: Atlas.Rpc.EncounterInteractStageResultProto
message EncounterInteractStageResultProto {
	// ref: Atlas.Rpc.EncounterInteractStageResultProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		swish = 1;
		combat = 2;
	}

	EncounterInteractSwishStageResultProto swish = 1;
	EncounterInteractCombatStageResultProto combat = 2;
}

// ref: Atlas.Rpc.EncounterInteractStatusProto
message EncounterInteractStatusProto {
	// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/ClientStaleData/Types/Reason
	enum Reason {
		ENCOUNTER_INTERACT_UNKNOWN = 0;
		ENCOUNTER_INTERACT_NOT_IN_ENCOUNTER = 1;
		ENCOUNTER_INTERACT_WC_PLAYER_NOT_IN_CHAMBER = 2;
		ENCOUNTER_INTERACT_WC_NOT_IN_PROGRESS = 3;
		ENCOUNTER_INTERACT_WC_ACTION_ON_COOLDOWN = 4;
	}

	// ref: Atlas.Rpc.EncounterInteractStatusProto/StatusOneofCase
	enum StatusOneofCase {
		none = 0;
		continue = 1;
		next_stage = 2;
		win = 3;
		lose = 4;
		client_stale_data = 5;
		error = 6;
	}

	// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/ClientStaleData
	message ClientStaleData {
		// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/ClientStaleData/Types/Reason
		enum Reason {
			ENCOUNTER_INTERACT_UNKNOWN = 0;
			ENCOUNTER_INTERACT_NOT_IN_ENCOUNTER = 1;
			ENCOUNTER_INTERACT_WC_PLAYER_NOT_IN_CHAMBER = 2;
			ENCOUNTER_INTERACT_WC_NOT_IN_PROGRESS = 3;
			ENCOUNTER_INTERACT_WC_ACTION_ON_COOLDOWN = 4;
		}

		EncounterInteractStatusProto.Reason reason = 1;
	}

	// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/Continue
	message Continue {
	}

	// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/Error
	message Error {
		string description = 1;
	}

	// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/Lose
	message Lose {
	}

	// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/NextStage
	message NextStage {
		int32 next_stage_index = 1;
	}

	// ref: Atlas.Rpc.EncounterInteractStatusProto/Types/Win
	message Win {
		LootCollectionProto rewards = 1;
		LootCollectionProto one_time_rewards = 2;
	}

	Continue continue = 1;
	NextStage next_stage = 2;
	Win win = 3;
	Lose lose = 4;
	ClientStaleData client_stale_data = 5;
	Error error = 6;
}

// ref: Atlas.Rpc.EncounterInteractSwishStageOptionsProto
message EncounterInteractSwishStageOptionsProto {
	repeated string energy_gmt_id = 1;
	bool is_client_hit = 2;
	float accuracy_bonus = 3;
	float professions_rps_match = 4;
	bool coerce_spellcast_success = 100;
	bool coerce_spellcast_failure = 101;
	bool coerce_flee = 102;
	bool coerce_no_flee = 103;
}

// ref: Atlas.Rpc.EncounterInteractSwishStageResultProto
message EncounterInteractSwishStageResultProto {
	// ref: Atlas.Rpc.EncounterInteractSwishStageResultProto/Types/Status
	enum Status {
		SWISH_INTERACT_RESULT_UNKNOWN = 0;
		SWISH_INTERACT_RESULT_SUCCESS = 1;
		SWISH_INTERACT_RESULT_RESIST = 2;
		SWISH_INTERACT_RESULT_FLED = 3;
		SWISH_INTERACT_RESULT_OUT_OF_ENERGY = 4;
		SWISH_INTERACT_RESULT_ERROR = 5;
	}

	Status status = 1;
	double success_rate = 2;
	double flee_rate = 3;
}

// ref: Atlas.Rpc.EncounterStartCombatStageResultProto
message EncounterStartCombatStageResultProto {
	int64 hp_max_enemy = 1;
	repeated int64 enemy_damage_unblocked = 2;
	repeated int64 enemy_damage_blocked = 3;
	int64 hp_max_player = 4;
	map<string, int64> player_damage_per_energy = 5;
	float player_crit_multiplier = 6;
}

// ref: Atlas.Rpc.EncounterStartPortkeyStageResultProto
message EncounterStartPortkeyStageResultProto {
}

// ref: Atlas.Rpc.EncounterStartRequestProto
message EncounterStartRequestProto {
	bytes encounter_ticket = 1;
}

// ref: Atlas.Rpc.EncounterStartResponseProto
message EncounterStartResponseProto {
	// ref: Atlas.Rpc.EncounterStartResponseProto/Types/Status
	enum Status {
		ENCOUNTER_START_UNKNOWN = 0;
		ENCOUNTER_START_SUCCESS = 1;
		ENCOUNTER_START_NOT_AVAILABLE = 2;
		ENCOUNTER_START_NOT_IN_RANGE = 3;
		ENCOUNTER_START_ALREADY_HAPPENED = 4;
		ENCOUNTER_START_ALREADY_STARTED = 5;
		ENCOUNTER_START_CLIENT_STALE_DATA = 6;
		ENCOUNTER_START_BAD_ENCOUNTER_TICKET = 7;
		ENCOUNTER_START_WC_PLAYER_NOT_IN_CHAMBER = 8;
		ENCOUNTER_START_WC_NOT_IN_PROGRESS = 9;
		ENCOUNTER_START_WC_MOB_NOT_FOUND = 10;
		ENCOUNTER_START_WC_MOB_IS_DEFEATED = 11;
		ENCOUNTER_START_WC_PLAYER_ALREADY_ENGAGED = 12;
		ENCOUNTER_START_WC_MOB_ALREADY_ENGAGED = 13;
		ENCOUNTER_TUTORIAL_COMPLETED = 14;
		ENCOUNTER_START_EXPIRY_TIME_REACHED = 15;
		ENCOUNTER_START_WC_ACTION_ON_COOLDOWN = 16;
	}

	Status status = 1;
	bytes encounter_id = 2;
	repeated EncounterStartStageResultProto stages = 3;
	CombatResults first_stage_combat_results = 4;
}

// ref: Atlas.Rpc.EncounterStartStageResultProto
message EncounterStartStageResultProto {
	// ref: Atlas.Rpc.EncounterStartStageResultProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		swish = 1;
		combat = 2;
		portkey = 3;
	}

	EncounterStartSwishStageResultProto swish = 1;
	EncounterStartCombatStageResultProto combat = 2;
	EncounterStartPortkeyStageResultProto portkey = 3;
}

// ref: Atlas.Rpc.EncounterStartSwishStageResultProto
message EncounterStartSwishStageResultProto {
}

// ref: Atlas.Rpc.EncounterStartTutorialRequestProto
message EncounterStartTutorialRequestProto {
}

// ref: Atlas.Rpc.EncounterStartTutorialResponseProto
message EncounterStartTutorialResponseProto {
	EncounterStartResponseProto response = 1;
}

// ref: Atlas.Rpc.EncounterUsePotionRequestProto
message EncounterUsePotionRequestProto {
	string potion_id = 1;
	bytes encounter_id = 2;
}

// ref: Atlas.Rpc.EncounterUsePotionResponseProto
message EncounterUsePotionResponseProto {
	// ref: Atlas.Rpc.EncounterUsePotionResponseProto/Types/EncounterUsePotionResult
	enum EncounterUsePotionResult {
		UNKNOWN_ENCOUNTER_USE_POTION_RESULT = 0;
		POTION_USED = 1;
		POTION_NOT_IN_VAULT = 2;
		POTION_EFFECTS_ALREADY_ACTIVE = 3;
		POTION_NOT_USABLE_FOR_ENCOUNTERS = 4;
		INCORRECT_ENCOUNTER_ID = 5;
		ENCOUNTER_USE_POTION_ERROR = 6;
		ENCOUNTER_USE_POTION_WC_PLAYER_NOT_IN_CHAMBER = 7;
		ENCOUNTER_USE_POTION_WC_NOT_IN_PROGRESS = 8;
		ENCOUNTER_USE_POTION_WC_POTION_USED_BUT_PLAYER_DISENGAGED = 9;
	}

	EncounterUsePotionResult result = 1;
	CombatResults maybe_updated_combat_results = 2;
}

// ref: Atlas.Proto.GameEntityProto
message GameEntityProto {
	// ref: Atlas.Proto.GameEntityProto/TypeOneofCase
	enum TypeOneofCase {
		none = 0;
		poi = 1;
		trace = 2;
		landmark = 3;
		potion_ingredient = 4;
		weather = 5;
		environment_tags = 6;
	}

	ClientMapPoiProto poi = 1;
	ClientMapTraceProto trace = 2;
	ClientMapLandmarkProto landmark = 3;
	ClientMapPotionIngredientProto potion_ingredient = 4;
	ClientWeatherProto weather = 5;
	ClientEnvironmentTagsProto environment_tags = 6;
}

// ref: Atlas.Rpc.GetAllStorePacksRequestProto
message GetAllStorePacksRequestProto {
}

// ref: Atlas.Rpc.GetAllStorePacksResponseProto
message GetAllStorePacksResponseProto {
	// ref: Atlas.Rpc.GetAllStorePacksResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	repeated StorePackProto store_pack = 1;
	Status status = 2;
}

// ref: Atlas.Rpc.GetChamberStateRequestProto
message GetChamberStateRequestProto {
}

// ref: Atlas.Rpc.GetChamberStateResponseProto
message GetChamberStateResponseProto {
	ChallengeRpcStatus status = 1;
	ChamberState state = 2;
	ClientPlayerSnapshotProto player_snapshot = 3;
	int64 next_call_timestamp = 4;
}

// ref: Atlas.Rpc.GetCurrencyBalanceRequestProto
message GetCurrencyBalanceRequestProto {
}

// ref: Atlas.Rpc.GetCurrencyBalanceResponseProto
message GetCurrencyBalanceResponseProto {
	// ref: Atlas.Rpc.GetCurrencyBalanceResponseProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	Status status = 1;
	repeated CurrencyQuantityProto balance = 3;
}

// ref: Atlas.Rpc.GetFlooNetworkRegionScoresRequest
message GetFlooNetworkRegionScoresRequest {
	string season_id = 1;
	string region_id = 2;
}

// ref: Atlas.Rpc.GetFlooNetworkRegionScoresResponse
message GetFlooNetworkRegionScoresResponse {
	string season_id = 1;
	string region_id = 2;
	FlooNetworkRegionScores scores = 3;
	string region_name = 4;
}

// ref: Atlas.Rpc.GetFlooNetworkSeasonScoresRequest
message GetFlooNetworkSeasonScoresRequest {
	string season_id = 1;
}

// ref: Atlas.Rpc.GetFlooNetworkSeasonScoresResponse
message GetFlooNetworkSeasonScoresResponse {
	string season_id = 1;
	FlooNetworkSeasonScores scores = 2;
}

// ref: Atlas.Rpc.GetFortressDetailsRequestProto
message GetFortressDetailsRequestProto {
	string fortress_id = 1;
	double latitude = 4;
	double longitude = 5;
}

// ref: Atlas.Rpc.GetFortressDetailsResponseProto
message GetFortressDetailsResponseProto {
	// ref: Atlas.Rpc.GetFortressDetailsResponseProto/Types/ChamberPreview
	message ChamberPreview {
		string chamber_template_gmt_id = 1;
		uint32 player_count = 2;
		int64 start_time_ms = 3;
	}

	string fortress_template_gmt_id = 1;
	repeated ChamberPreview chambers = 2;
	string partner_id = 4;
	PoiDetails poi_details = 5;
	PoiAccessibility poi_accessibility = 6;
}

// ref: Atlas.Rpc.GetFortressFlooNetworkStatisticsRequest
message GetFortressFlooNetworkStatisticsRequest {
	string fortress_id = 1;
	double latitude = 2;
	double longitude = 3;
}

// ref: Atlas.Rpc.GetFortressFlooNetworkStatisticsResponse
message GetFortressFlooNetworkStatisticsResponse {
	FlooNetworkFortressStatistics fortress_statistics = 1;
	int64 temp_next_add_pts_timestamp_ms = 2;
}

// ref: Atlas.Rpc.GetGreenhouseDetailsRequestProto
message GetGreenhouseDetailsRequestProto {
	string outpost_id = 1;
	double latitude = 2;
	double longitude = 3;
}

// ref: Atlas.Rpc.GetGreenhouseDetailsResponseProto
message GetGreenhouseDetailsResponseProto {
	// ref: Atlas.Rpc.GetGreenhouseDetailsResponseProto/Types/ClientPotProto
	message ClientPotProto {
		// ref: Atlas.Rpc.GetGreenhouseDetailsResponseProto/Types/ClientPotProto/Types/RentalDetailsProto
		message RentalDetailsProto {
			string renter = 1;
			int64 rental_start_time_ms = 2;
			int64 rental_expiration_time_ms = 3;
		}

		string id = 1;
		string recipe_gmt_id = 2;
		string planter = 3;
		repeated string contributor = 4;
		int64 growing_completion_time_ms = 5;
		int32 spell_count = 6;
		GetGreenhouseDetailsResponseProto.RentalDetailsProto rental_details = 7;
	}

	// ref: Atlas.Rpc.GetGreenhouseDetailsResponseProto/Types/ClientPotProto/Types/RentalDetailsProto
	message RentalDetailsProto {
		string renter = 1;
		int64 rental_start_time_ms = 2;
		int64 rental_expiration_time_ms = 3;
	}

	string partner_id = 1;
	PoiDetails poi_details = 2;
	PoiAccessibility poi_accessibility = 3;
	repeated ClientPotProto normal_pot = 4;
	repeated ClientPotProto rental_pot = 5;
}

// ref: Atlas.Rpc.GetLexiconInventoryResponseProto
message GetLexiconInventoryResponseProto {
	bool success = 1;
	InventoryDeltaProto inventory_delta = 2;
	map<string, int64> volatile_vault_deltas = 3;
}

// ref: Atlas.Rpc.GetOutpostDetailsRequestProto
message GetOutpostDetailsRequestProto {
	string id = 1;
	double latitude = 2;
	double longitude = 3;
}

// ref: Atlas.Rpc.GetOutpostDetailsResponseProto
message GetOutpostDetailsResponseProto {
	repeated string image_urls = 1;
	OutpostMenu current_menu = 2;
	string partner_id = 3;
	PoiDetails poi_details = 4;
	PoiAccessibility poi_accessibility = 5;
}

// ref: Atlas.Rpc.GetPlayerFeatureListRequestProto
message GetPlayerFeatureListRequestProto {
}

// ref: Atlas.Rpc.GetPlayerFeatureListResponseProto
message GetPlayerFeatureListResponseProto {
	repeated string enabled_feature_list = 1;
	repeated DisabledFeatureConfigProto disabled_feature_list = 2;
}

// ref: Atlas.Rpc.GetPlayerStateRequestProto
message GetPlayerStateRequestProto {
}

// ref: Atlas.Rpc.GetPlayerStateResponseProto
message GetPlayerStateResponseProto {
	ClientPlayerProto player = 1;
}

// ref: Atlas.Rpc.GetServerTimeRequestProto
message GetServerTimeRequestProto {
}

// ref: Atlas.Rpc.GetServerTimeResponseProto
message GetServerTimeResponseProto {
	int64 server_time_ms = 1;
	uint64 time_until_daily_rollover = 2;
}

// ref: Atlas.Rpc.GetStorePackInfoRequestProto
message GetStorePackInfoRequestProto {
	string pack_id = 1;
}

// ref: Atlas.Rpc.GetStorePackInfoResponseProto
message GetStorePackInfoResponseProto {
	// ref: Atlas.Rpc.GetStorePackInfoResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	StorePackProto store_pack = 1;
	Status status = 2;
}

// ref: Atlas.Rpc.GiveAwayGreenhouseRequestProto
message GiveAwayGreenhouseRequestProto {
	string outpost_id = 1;
	double latitude = 2;
	double longitude = 3;
}

// ref: Atlas.Rpc.GiveAwayGreenhouseResponseProto
message GiveAwayGreenhouseResponseProto {
	// ref: Atlas.Rpc.GiveAwayGreenhouseResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		ERROR = 1;
		TOO_FAR = 2;
		ON_COOLDOWN = 3;
		SUCCESS = 4;
		POI_CLOSED = 5;
	}

	Status status = 1;
	LootCollectionProto loot = 2;
	int64 next_loot_time = 3;
}

// ref: Atlas.Rpc.InstantFinishBrewingRequestProto
message InstantFinishBrewingRequestProto {
	int64 cauldron_id = 1;
}

// ref: Atlas.Rpc.InstantFinishBrewingResponseProto
message InstantFinishBrewingResponseProto {
	// ref: Atlas.Rpc.InstantFinishBrewingResponseProto/Types/InstantFinishBrewingResult
	enum InstantFinishBrewingResult {
		UNKNOWN = 0;
		SUCCESS = 1;
		INSUFFICIENT_RESOURCES = 2;
		EMPTY_CAULDRON_SELECTED = 3;
	}

	InstantFinishBrewingResult result = 1;
}

// ref: Atlas.Rpc.InventoryCauldronProto
message InventoryCauldronProto {
	int64 id = 1;
	string template_id = 2;
	repeated InventoryCauldronSlotProto cauldron_slot = 3;
	int64 brewing_start_timestamp = 4;
	int64 availability_start_timestamp = 5;
	int64 availability_time = 6;
}

// ref: Atlas.Rpc.InventoryCauldronSlotProto
message InventoryCauldronSlotProto {
	LootCollectionProto rewards = 1;
	int64 time_to_brew = 2;
	string recipe_gmt_id = 3;
	bool master_note_applied = 4;
}

// ref: Atlas.Rpc.InventoryCollectionFamilyProto
message InventoryCollectionFamilyProto {
	string id = 1;
	int32 family_xp = 2;
	int32 family_level = 3;
	int32 rewards_collected_level = 4;
	int32 current_chests_opened = 5;
}

// ref: Atlas.Rpc.InventoryCollectionItemProto
message InventoryCollectionItemProto {
	string id = 1;
	int32 times_encountered = 2;
	int32 times_returned = 3;
	bool first_time_rewards_collected = 4;
	string found_location = 5;
	int64 found_time = 6;
	bool placed = 8;
	int32 current_returned = 9;
	uint32 shards = 10;
}

// ref: Atlas.Rpc.InventoryCollectionPageProto
message InventoryCollectionPageProto {
	string id = 1;
	string first_sticker_gmt_id = 2;
	int64 first_sticker_timestamp = 3;
	string last_sticker_gmt_id = 4;
	int64 last_sticker_timestamp = 5;
	int32 level = 6;
}

// ref: Atlas.Rpc.InventoryCompletedQuestProto
message InventoryCompletedQuestProto {
	string quest_gmt_id = 1;
	int64 completed_day_since_epoch_if_daily = 2;
}

// ref: Atlas.Rpc.InventoryEscrowedRewardsProto
message InventoryEscrowedRewardsProto {
	LootCollectionProto rewards = 1;
}

// ref: Atlas.Rpc.InventoryFeatureFlagProto
message InventoryFeatureFlagProto {
	// ref: Atlas.Rpc.InventoryFeatureFlagProto/ValueOneofCase
	enum ValueOneofCase {
		none = 0;
		bval = 2;
		lval = 3;
		sval = 4;
		fval = 5;
	}

	string id = 1;
	bool bval = 2;
	int64 lval = 3;
	string sval = 4;
	float fval = 5;
}

// ref: Atlas.Rpc.InventoryFeatureFlagsProto
message InventoryFeatureFlagsProto {
	string id = 1;
	repeated InventoryFeatureFlagProto flags = 2;
}

// ref: Atlas.Rpc.InventoryInProgressQuestProto
message InventoryInProgressQuestProto {
	string quest_gmt_id = 1;
	repeated QuestProgress progress_per_task = 2;
	int32 version = 3;
	int64 start_day_since_epoch_if_daily = 4;
}

// ref: Atlas.Rpc.InventoryPortkeyItemProto
message InventoryPortkeyItemProto {
	int64 id = 1;
	int64 timestamp = 2;
	string template_id = 3;
}

// ref: Atlas.Rpc.InventoryQuestLogProto
message InventoryQuestLogProto {
	repeated InventoryInProgressQuestProto quests = 1;
	repeated InventoryCompletedQuestProto completed_quests = 2;
}

// ref: Atlas.Rpc.InventoryVaultCapacityProto
message InventoryVaultCapacityProto {
	map<string, int64> category_capacity = 1;
}

// ref: Atlas.Rpc.InventoryVaultItemProto
message InventoryVaultItemProto {
	string id = 1;
	int64 qty = 2;
}

// ref: Atlas.Rpc.InventoryWalkboxItemProto
message InventoryWalkboxItemProto {
	// ref: Atlas.Rpc.InventoryWalkboxItemProto/Types/UnlockingStatus
	enum UnlockingStatus {
		UNKNOWN = 0;
		NOT_STARTED = 1;
		INFINITE_UNLOCKER = 2;
		PREMIUM_UNLOCKER = 3;
	}

	int64 id = 1;
	string template_id = 2;
	UnlockingStatus status = 3;
	float completion_pedometer_km = 4;
	int64 timestamp = 5;
}

// ref: Atlas.Rpc.JoinChamberRequestProto
message JoinChamberRequestProto {
	string fortress_id = 1;
	string chamber_template_gmt_id = 2;
	string reg_runestone_vaultitem_gmt_id = 3;
	double fortress_latitude = 4;
	double fortress_longitude = 5;
}

// ref: Atlas.Rpc.JoinChamberResponseProto
message JoinChamberResponseProto {
	ChallengeRpcStatus status = 1;
	ChamberState state = 2;
	ClientPlayerSnapshotProto player_snapshot = 3;
	string partner_id = 4;
	uint64 fortress_cooldown_left_ms = 5;
}

// ref: Atlas.Rpc.LeaveChamberRequestProto
message LeaveChamberRequestProto {
}

// ref: Atlas.Rpc.LeaveChamberResponseProto
message LeaveChamberResponseProto {
	ChallengeRpcStatus status = 1;
	string partner_id = 2;
	string fortress_id = 3;
}

// ref: Atlas.Rpc.LevelUpCollectionFamilyRequestProto
message LevelUpCollectionFamilyRequestProto {
	string collection_family_id = 1;
}

// ref: Atlas.Rpc.LevelUpCollectionFamilyResponseProto
message LevelUpCollectionFamilyResponseProto {
	bool did_level_up = 1;
	int32 family_level = 2;
}

// ref: Atlas.Rpc.LifetimeMetricsProto
message LifetimeMetricsProto {
	// ref: Atlas.Rpc.LifetimeMetricsProto/Types/CollectedMetrics
	message CollectedMetrics {
		map<string, int64> item_quantity = 1;
		map<string, int64> category_quantity = 2;
	}

	// ref: Atlas.Rpc.LifetimeMetricsProto/Types/FamilyMetrics
	message FamilyMetrics {
		int64 family_xp = 1;
		int64 family_chest = 2;
		int64 family_sticker = 3;
	}

	// ref: Atlas.Rpc.LifetimeMetricsProto/Types/MapEncounterMetrics
	message MapEncounterMetrics {
		int64 swish_completed = 1;
		int64 swish_user_fled = 2;
		int64 swish_captured = 3;
		int64 combat_completed = 4;
		int64 combat_user_fled = 5;
		int64 combat_captured = 6;
	}

	// ref: Atlas.Rpc.LifetimeMetricsProto/Types/PoiLootedMetrics
	message PoiLootedMetrics {
		int64 inn = 1;
		int64 greenhouse = 2;
	}

	// ref: Atlas.Rpc.LifetimeMetricsProto/Types/UsedMetrics
	message UsedMetrics {
		map<string, int64> item_quantity = 1;
		map<string, int64> category_quantity = 2;
		map<int32, int64> dark_detectors = 3;
	}

	// ref: Atlas.Rpc.LifetimeMetricsProto/Types/WcMetrics
	message WcMetrics {
		int64 completed = 1;
		int64 won = 2;
	}

	map<string, FamilyMetrics> family_metrics = 1;
	PoiLootedMetrics poi_looted = 2;
	MapEncounterMetrics map_encounter = 3;
	WcMetrics wc = 4;
	CollectedMetrics collected = 5;
	UsedMetrics used = 6;
}

// ref: Atlas.Rpc.LootOutpostRequestProto
message LootOutpostRequestProto {
	string outpost_id = 1;
	double latitude = 2;
	double longitude = 3;
	int64 menu_timestamp = 4;
}

// ref: Atlas.Rpc.LootOutpostResponseProto
message LootOutpostResponseProto {
	// ref: Atlas.Rpc.LootOutpostResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		ERROR = 1;
		TOO_FAR = 2;
		ON_COOLDOWN = 3;
		SUCCESS = 4;
		POI_CLOSED = 5;
	}

	Status status = 1;
	int64 awarded_food_key = 2;
	int64 next_loot_time = 3;
	LootCollectionProto loot = 4;
	string partner_id = 5;
}

// ref: Atlas.Rpc.MapAbilityStartRequestProto
message MapAbilityStartRequestProto {
	// ref: Atlas.Rpc.MapAbilityStartRequestProto/TargetOneofCase
	enum TargetOneofCase {
		none = 0;
		player_nickname = 2;
		map_coordinate = 3;
		mob_id = 4;
	}

	string map_ability_gmt_id = 1;
	string player_nickname = 2;
	MapCoordinateProto map_coordinate = 3;
	bytes mob_id = 4;
}

// ref: Atlas.Rpc.MapAbilityStartResponseProto
message MapAbilityStartResponseProto {
	// ref: Atlas.Rpc.MapAbilityStartResponseProto/Types/Status
	enum Status {
		NONE = 0;
		SUCCESS = 1;
		PLAYER_DOES_NOT_HAVE_ABILITY = 2;
		ABILITY_UNAVAILABLE = 3;
		TARGET_UNAVAILABLE = 4;
		CHALLENGE_OVER = 5;
		ERROR = 6;
		CHAMBER_NOT_IN_PROGRESS = 7;
		PLAYER_NOT_IN_CHAMBER = 8;
		NOT_ENOUGH_FOCUS = 9;
		TARGET_INVALID = 10;
		STRONGER_BUFF_EXISTS = 11;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.MapCoordinateProto
message MapCoordinateProto {
	double latitude = 1;
	double longitude = 2;
	double x = 3;
	double y = 4;
}

// ref: Atlas.Rpc.NotifyPrivacyPolicyRequestProto
message NotifyPrivacyPolicyRequestProto {
}

// ref: Atlas.Rpc.NotifyPrivacyPolicyResponseProto
message NotifyPrivacyPolicyResponseProto {
	// ref: Atlas.Rpc.NotifyPrivacyPolicyResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		COMPLETED = 2;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.OpenFamilyChestRequestProto
message OpenFamilyChestRequestProto {
	string collection_family_id = 1;
}

// ref: Atlas.Rpc.OpenFamilyChestResponseProto
message OpenFamilyChestResponseProto {
	int32 family_level = 1;
	repeated LootCollectionProto chest_reward = 2;
	int32 family_xp = 3;
	int32 current_chests_opened = 4;
}

// ref: Atlas.Rpc.OptIntoEmailsRequestProto
message OptIntoEmailsRequestProto {
	EmailOptsProto email_opts = 1;
}

// ref: Atlas.Rpc.OptIntoEmailsResponseProto
message OptIntoEmailsResponseProto {
	// ref: Atlas.Rpc.OptIntoEmailsResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		FAILED = 2;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.OutpostMenu
message OutpostMenu {
	map<int64, LootRewardProto> menu_options = 1;
	int64 menu_timestamp = 2;
}

// ref: Atlas.Rpc.PlaceItemRequestProto
message PlaceItemRequestProto {
	string collection_item_id = 1;
}

// ref: Atlas.Rpc.PlaceItemResponseProto
message PlaceItemResponseProto {
	// ref: Atlas.Rpc.PlaceItemResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		NOT_READY = 2;
	}

	Status status = 1;
	string collection_item_id = 2;
	repeated LootCollectionProto completion_rewards = 3;
}

// ref: Atlas.Rpc.PlantIngredientRequestProto
message PlantIngredientRequestProto {
	string outpost_id = 1;
	string pot_id = 2;
	string recipe_gmt_id = 3;
}

// ref: Atlas.Rpc.PlantIngredientResponseProto
message PlantIngredientResponseProto {
	// ref: Atlas.Rpc.PlantIngredientResponseProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		TOO_FAR = 2;
		POI_CLOSED = 3;
		FEATURE_DISABLED = 4;
		INVALID_POT = 5;
		RECIPE_DISABLED = 6;
		RECIPE_LOCKED = 7;
		INSUFFICIENT_RESOURCES = 8;
		GROWING_IN_PROGRESS = 9;
		RENTAL_EXPIRED = 10;
		RENTER_HAS_PRIORITY = 11;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.PlayerHelpInfoRequest
message PlayerHelpInfoRequest {
}

// ref: Atlas.Rpc.PlayerHelpInfoResponse
message PlayerHelpInfoResponse {
	string player_id = 1;
}

// ref: Atlas.Rpc.PlayerLevelUpRequestProto
message PlayerLevelUpRequestProto {
}

// ref: Atlas.Rpc.PlayerLevelUpResponseProto
message PlayerLevelUpResponseProto {
	bool did_level_up = 1;
	int32 new_level = 2;
	LootCollectionProto granted_rewards = 3;
}

// ref: Atlas.Rpc.PlayerProfessionProgressV3Proto
message PlayerProfessionProgressV3Proto {
	// ref: Atlas.Rpc.PlayerProfessionProgressV3Proto/Types/RankProgressV3/Types/NodeProgressV3
	message NodeProgressV3 {
		uint32 level = 1;
		int64 last_updated_timestamp = 2;
		LootCollectionProto unlocked_levels_cost = 3;
	}

	// ref: Atlas.Rpc.PlayerProfessionProgressV3Proto/Types/RankProgressV3
	message RankProgressV3 {
		// ref: Atlas.Rpc.PlayerProfessionProgressV3Proto/Types/RankProgressV3/Types/NodeProgressV3
		message NodeProgressV3 {
			uint32 level = 1;
			int64 last_updated_timestamp = 2;
			LootCollectionProto unlocked_levels_cost = 3;
		}

		map<string, NodeProgressV3> node_progress = 1;
	}

	uint32 rank_points = 2;
	map<string, RankProgressV3> rank_progress_map = 3;
}

// ref: Atlas.Rpc.PlayerProfessionsProgressV3Proto
message PlayerProfessionsProgressV3Proto {
	map<string, PlayerProfessionProgressV3Proto> profession_progress = 1;
}

// ref: Atlas.Rpc.PlayerProfileProto
message PlayerProfileProto {
	// ref: Atlas.Rpc.PlayerProfileProto/Types/WandOptions
	message WandOptions {
		string core_id = 1;
		string wood_id = 2;
		string flexibility_id = 3;
		string length_id = 4;
	}

	string nickname = 1;
	int32 level = 2;
	float distance_walked_km = 3;
	int64 max_hp = 4;
	int64 attack_power = 5;
	string player_team_id = 6;
	string profession_id = 7;
	string title_id = 8;
	repeated string unlocked_title_ids = 9;
	string theme_id = 10;
	repeated string unlocked_theme_ids = 11;
	string house_id = 12;
	WandOptions wand = 13;
	repeated string favorite_badge_ids = 14;
	repeated string unlocked_badge_ids = 15;
	repeated string favorite_title_ids = 16;
	string first_name = 17;
	string last_name = 18;
	string profile_creation_location = 19;
	repeated string unlocked_selfie_asset_ids = 20;
	int64 total_swish_success_spell = 21;
	repeated string discovered_potions_master_note_ids = 22;
	map<string, int64> master_note_discovery_status = 23;
	map<string, int64> swish_spellcasts = 24;
	map<string, int64> store_pack_purchased = 25;
	EmailOptsProto email_opts = 26;
	int64 lifetime_inn_looted = 27;
	int64 lifetime_greenhouse_looted = 28;
	int64 lifetime_map_encounter_won = 29;
	int64 lifetime_wc_won = 30;
}

// ref: Atlas.Rpc.PlayerSelectTeamRequestProto
message PlayerSelectTeamRequestProto {
	string team_id = 1;
}

// ref: Atlas.Rpc.PlayerSelectTeamResponseProto
message PlayerSelectTeamResponseProto {
	// ref: Atlas.Rpc.PlayerSelectTeamResponseProto/Types/Result
	enum Result {
		UNKNOWN = 0;
		TEAM_SET = 1;
		TEAM_ID_INVALID = 2;
		PLAYER_ALREADY_HAS_TEAM = 3;
	}

	Result result = 1;
}

// ref: Atlas.Rpc.PoiDetails
message PoiDetails {
	string name = 1;
	string description = 2;
	repeated string image_urls = 3;
}

// ref: Atlas.Rpc.PortkeyBonusGameNodeRewards
message PortkeyBonusGameNodeRewards {
	repeated PortkeyBonusGameRewardTuple rewards = 1;
}

// ref: Atlas.Rpc.PortkeyBonusGameRewardTuple
message PortkeyBonusGameRewardTuple {
	LootRewardProto reward = 1;
	float multiplier = 2;
	string category_proto_id = 3;
}

// ref: Atlas.Rpc.PrestigePageRequestProto
message PrestigePageRequestProto {
	string collection_page_id = 1;
}

// ref: Atlas.Rpc.PrestigePageResponseProto
message PrestigePageResponseProto {
	// ref: Atlas.Rpc.PrestigePageResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		NOT_READY = 2;
	}

	Status status = 1;
	string collection_page_id = 2;
}

// ref: Atlas.Rpc.ProfanityFilterRequest
message ProfanityFilterRequest {
	repeated string text = 1;
}

// ref: Atlas.Rpc.ProfanityFilterResponse
message ProfanityFilterResponse {
	// ref: Atlas.Rpc.ProfanityFilterResponse/Types/Status
	enum Status {
		UNSET = 0;
		UNKNOWN = 1;
		ALLOW = 2;
		REJECT = 3;
	}

	repeated Status status = 1;
}

// ref: Atlas.Rpc.ProfessionNodeLevelUnlockRequestProto
message ProfessionNodeLevelUnlockRequestProto {
	string profession_node_id = 1;
	uint32 level = 2;
	string profession_rank_id = 4;
}

// ref: Atlas.Rpc.ProfessionNodeLevelUnlockResponseProto
message ProfessionNodeLevelUnlockResponseProto {
	// ref: Atlas.Rpc.ProfessionNodeLevelUnlockResponseProto/Types/Status
	enum Status {
		NONE = 0;
		SUCCESS = 1;
		PROFESSION_NODE_GMT_ID_INVALID = 2;
		DOES_NOT_MEET_REQUIREMENTS = 3;
		INVALID_PROFESSION_NODE_FOR_PROFESSION = 4;
		PROFESSION_LEVEL_IS_COMPLETED = 5;
		PROFESSION_LEVEL_INVALID = 6;
		INSUFFICIENT_RESOURCES = 7;
		ERROR = 8;
		ERROR_ADDING_BUFFS = 9;
		ERROR_PLAYER_IN_CHALLENGE = 10;
		PROFESSION_RANK_GMT_ID_INVALID = 11;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.ProfessionSelectRequestProto
message ProfessionSelectRequestProto {
	string profession_gmt_id = 1;
}

// ref: Atlas.Rpc.ProfessionSelectResponseProto
message ProfessionSelectResponseProto {
	// ref: Atlas.Rpc.ProfessionSelectResponseProto/Types/Status
	enum Status {
		NONE = 0;
		SUCCESS = 1;
		PROFESSION_GMT_ID_INVALID = 2;
		PROFESSION_UNAVAILABLE = 3;
		ERROR = 4;
		PROFESSION_ALREADY_ACTIVE = 5;
		ERROR_ADDING_BUFFS = 6;
		ERROR_PLAYER_IN_CHALLENGE = 7;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.QuestAcquireDailiesRequestProto
message QuestAcquireDailiesRequestProto {
}

// ref: Atlas.Rpc.QuestAcquireDailiesResponseProto
message QuestAcquireDailiesResponseProto {
	repeated string added_quest_gmt_ids = 1;
	repeated string replaced_quest_gmt_ids = 2;
	repeated string deleted_quest_gmt_ids = 3;
}

// ref: Atlas.Rpc.QuestCompleteRequestProto
message QuestCompleteRequestProto {
	string quest_gmt_id = 1;
}

// ref: Atlas.Rpc.QuestCompleteResponseProto
message QuestCompleteResponseProto {
	// ref: Atlas.Rpc.QuestCompleteResponseProto/Types/Status
	enum Status {
		QUEST_COMPLETE_UNKNOWN = 0;
		QUEST_COMPLETE_SUCCESS = 1;
		QUEST_COMPLETE_STILL_IN_PROGRESS = 2;
		QUEST_COMPLETE_ALREADY_COMPLETE = 3;
		QUEST_COMPLETE_NOT_IN_QUEST_LOG = 4;
		QUEST_COMPLETE_DAILY_TOO_OLD = 5;
		QUEST_COMPLETE_DAILY_NOT_ENABLED_IN_GAME_CONFIG = 6;
		QUEST_COMPLETE_ERROR = 7;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.ReleaseEscrowedRewardsRequestProto
message ReleaseEscrowedRewardsRequestProto {
	// ref: Atlas.Rpc.ReleaseEscrowedRewardsRequestProto/ActionOneofCase
	enum ActionOneofCase {
		none = 0;
		claim_by_category = 1;
		abandon_all = 2;
	}

	ClaimByCategoryRequestAction claim_by_category = 1;
	AbandonAllRequestAction abandon_all = 2;
}

// ref: Atlas.Rpc.ReleaseEscrowedRewardsResponseProto
message ReleaseEscrowedRewardsResponseProto {
	// ref: Atlas.Rpc.ReleaseEscrowedRewardsResponseProto/Types/Status
	enum Status {
		UNSET = 0;
		CLAIM_SUCCESS = 1;
		NO_ESCROW_ERROR = 2;
		FULL_CAPACITY_ERROR = 3;
		CATEGORY_UNKNOWN_ERROR = 4;
		ABANDON_ALL_SUCCESS = 5;
	}

	Status status = 1;
	LootCollectionProto claimed_rewards = 2;
}

// ref: Atlas.Rpc.RemoveVaultItemRequestProto
message RemoveVaultItemRequestProto {
	string vault_item_id = 1;
	uint64 quantity = 2;
}

// ref: Atlas.Rpc.RemoveVaultItemResponseProto
message RemoveVaultItemResponseProto {
	// ref: Atlas.Rpc.RemoveVaultItemResponseProto/Types/Status
	enum Status {
		NONE = 0;
		SUCCESS = 1;
		VAULT_ITEM_NOT_FOUND = 2;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.RentPotRequestProto
message RentPotRequestProto {
	string outpost_id = 1;
	string pot_id = 2;
	string time_item_gmt_id = 3;
}

// ref: Atlas.Rpc.RentPotResponseProto
message RentPotResponseProto {
	// ref: Atlas.Rpc.RentPotResponseProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		TOO_FAR = 2;
		POI_CLOSED = 3;
		FEATURE_DISABLED = 4;
		INVALID_POT = 5;
		POT_ALREADY_RENTED = 6;
		INSUFFICIENT_RESOURCES = 7;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.SetFeatureFlagToDefaultRequestProto
message SetFeatureFlagToDefaultRequestProto {
	string player_flag_id = 1;
}

// ref: Atlas.Rpc.SetFeatureFlagToDefaultResponseProto
message SetFeatureFlagToDefaultResponseProto {
	bool did_set_flag = 1;
}

// ref: Atlas.Rpc.SetRunestonesRequestProto
message SetRunestonesRequestProto {
	string reg_runestone_vaultitem_gmt_id = 1;
	string boss_runestone_vaultitem_gmt_id_or_empty = 2;
}

// ref: Atlas.Rpc.SetRunestonesResponseProto
message SetRunestonesResponseProto {
	ChallengeRpcStatus status = 1;
	ChamberState state = 2;
	ClientPlayerSnapshotProto player_snapshot = 3;
	string fortress_id = 4;
	string partner_id = 5;
}

// ref: Atlas.Rpc.StoryboardCompleteRequest
message StoryboardCompleteRequest {
	string storyboard_gmt_id = 1;
}

// ref: Atlas.Rpc.StoryboardCompleteResponse
message StoryboardCompleteResponse {
	// ref: Atlas.Rpc.StoryboardCompleteResponse/Types/Status
	enum Status {
		STORYBOARD_COMPLETE_UNKNOWN = 0;
		STORYBOARD_COMPLETE_SUCCESS = 1;
		STORYBOARD_COMPLETE_ALREADY_COMPLETED = 2;
		STORYBOARD_COMPLETE_STEPS_MISMATCH = 3;
		STORYBOARD_COMPLETE_ERROR = 4;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.StoryboardDoStepRequest
message StoryboardDoStepRequest {
	string storyboard_gmt_id = 1;
	int64 step_number = 2;
	int32 request_version = 1000;
}

// ref: Atlas.Rpc.StoryboardDoStepResponse
message StoryboardDoStepResponse {
	// ref: Atlas.Rpc.StoryboardDoStepResponse/Types/Status
	enum Status {
		STORYBOARD_DO_STEP_UNKNOWN = 0;
		STORYBOARD_DO_STEP_SUCCESS = 1;
		STORYBOARD_DO_STEP_BAD_STEP_NUMBER = 2;
		STORYBOARD_DO_STEP_NO_RESET_ALLOWED = 3;
		STORYBOARD_DO_STEP_RESET_REQUIREMENTS_FAILED = 4;
		STORYBOARD_DO_STEP_START_REQUIREMENTS_FAILED = 5;
		STORYBOARD_DO_STEP_ERROR = 6;
		STORYBOARD_DO_STEP_SUCCESS_AND_COMPLETION = 7;
	}

	Status status = 1;
	LootCollectionProto rewards = 2;
}

// ref: Atlas.Rpc.StoryboardSkipRequest
message StoryboardSkipRequest {
	string storyboard_gmt_id = 1;
}

// ref: Atlas.Rpc.StoryboardSkipResponse
message StoryboardSkipResponse {
	// ref: Atlas.Rpc.StoryboardSkipResponse/Types/Status
	enum Status {
		STORYBOARD_SKIP_UNKNOWN = 0;
		STORYBOARD_SKIP_SUCCESS = 1;
		STORYBOARD_SKIP_ERROR = 2;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.TempClientStatsHelper
message TempClientStatsHelper {
	map<string, int64> player_active_stats = 1;
	map<string, int64> enemy_active_stats = 2;
	int64 hp_max_enemy = 3;
	repeated int64 enemy_damage_unblocked = 4;
	repeated int64 enemy_damage_blocked = 5;
	int64 hp_max_player = 6;
	map<string, int64> player_damage_per_energy = 7;
}

// ref: Atlas.Rpc.UpdateProfileFieldRequestProto
message UpdateProfileFieldRequestProto {
	// ref: Atlas.Rpc.UpdateProfileFieldRequestProto/Types/ProfileFieldUpdate
	message ProfileFieldUpdate {
		ProfileFieldOperation operation = 1;
		string value = 2;
	}

	repeated ProfileFieldUpdate updates = 1;
}

// ref: Atlas.Rpc.UpdateProfileFieldResponseProto
message UpdateProfileFieldResponseProto {
	// ref: Atlas.Rpc.UpdateProfileFieldResponseProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		INVALID_VALUE = 2;
		ERROR = 3;
	}

	Status status = 1;
}

// ref: Atlas.Rpc.UsePortkeyRequestProto
message UsePortkeyRequestProto {
	int64 portkey_id = 1;
}

// ref: Atlas.Rpc.UsePortkeyResponseProto
message UsePortkeyResponseProto {
	// ref: Atlas.Rpc.UsePortkeyResponseProto/Types/Status
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR = 2;
		INVALID_PORTKEY = 3;
	}

	Status status = 1;
	LootCollectionProto portkey_rewards = 2;
	repeated PortkeyBonusGameNodeRewards all_bonus_nodes_rewards = 4;
}

// ref: Atlas.Rpc.UsePotionRequestProto
message UsePotionRequestProto {
	string potion_id = 1;
}

// ref: Atlas.Rpc.UsePotionResponseProto
message UsePotionResponseProto {
	// ref: Atlas.Rpc.UsePotionResponseProto/Types/UsePotionResult
	enum UsePotionResult {
		UNKNOWN_USE_POTION_RESULT = 0;
		POTION_USED = 1;
		POTION_NOT_IN_VAULT = 2;
		POTION_EFFECTS_ALREADY_ACTIVE = 3;
		POTION_NOT_USABLE_IN_OVERWORLD = 4;
	}

	UsePotionResult result = 1;
}


//----- End rpc -----
//------------------------------
//----- Begin rpc -----

// ref: Niantic.Rpc.ClientWeatherProto
message ClientWeatherProto {
	int64 s2_cell_id = 1;
	DisplayWeatherProto display_weather = 2;
	GameplayWeatherProto gameplay_weather = 3;
	repeated WeatherAlertProto alerts = 4;
}

// ref: Niantic.Rpc.DisplayWeatherProto
message DisplayWeatherProto {
	// ref: Niantic.Rpc.DisplayWeatherProto/Types/DisplayLevel
	enum DisplayLevel {
		LEVEL_0 = 0;
		LEVEL_1 = 1;
		LEVEL_2 = 2;
		LEVEL_3 = 3;
	}

	DisplayLevel cloud_level = 1;
	DisplayLevel rain_level = 2;
	DisplayLevel wind_level = 3;
	DisplayLevel snow_level = 4;
	DisplayLevel fog_level = 5;
	int32 wind_direction = 6;
	DisplayLevel special_effect_level = 7;
}

// ref: Niantic.Rpc.GameplayWeatherProto
message GameplayWeatherProto {
	// ref: Niantic.Rpc.GameplayWeatherProto/Types/WeatherCondition
	enum WeatherCondition {
		NONE = 0;
		CLEAR = 1;
		RAINY = 2;
		PARTLY_CLOUDY = 3;
		OVERCAST = 4;
		WINDY = 5;
		SNOW = 6;
		FOG = 7;
	}

	WeatherCondition gameplay_condition = 1;
}

// ref: Niantic.Rpc.WeatherAlertProto
message WeatherAlertProto {
	// ref: Niantic.Rpc.WeatherAlertProto/Types/Severity
	enum Severity {
		NONE = 0;
		MODERATE = 1;
		EXTREME = 2;
	}

	Severity severity = 1;
	bool warn_weather = 2;
}


//----- End rpc -----
//------------------------------
//----- Begin telemetry -----

// ref: Niantic.Platform.Telemetry.TelemetryDomainId
enum TelemetryDomainId {
	TELEMETRY_NO_DOMAIN_ID = 0;
	TELEMETRY_DITTO = 1;
	TELEMETRY_GAME = 2;
}

// ref: Niantic.Platform.Telemetry.ClientTelemetryOutProto
message ClientTelemetryOutProto {
	// ref: Niantic.Platform.Telemetry.ClientTelemetryOutProto/Types/Status
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		ERROR_INVALID_REQUEST = 3;
		ERROR_INVALID_PROTO = 4;
		ERROR_UNSET_TELEMETRY_ID = 5;
	}

	Status status = 1;
	int32 rows_written = 2;
}

// ref: Niantic.Platform.Telemetry.ClientTelemetryProto
message ClientTelemetryProto {
	repeated PlatformDataId data_id = 1;
	repeated bytes application_data = 2;
}

// ref: Niantic.Platform.Telemetry.Distribution
message Distribution {
	// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/BucketTypeOneofCase
	enum BucketTypeOneofCase {
		none = 0;
		linear_buckets = 1;
		exponential_buckets = 2;
		explicit_buckets = 3;
	}

	// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions
	message BucketOptions {
		// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/BucketTypeOneofCase
		enum BucketTypeOneofCase {
			none = 0;
			linear_buckets = 1;
			exponential_buckets = 2;
			explicit_buckets = 3;
		}

		// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/Types/ExplicitBuckets
		message ExplicitBuckets {
			repeated int64 bounds = 1;
		}

		// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/Types/ExponentialBuckets
		message ExponentialBuckets {
			int64 num_finite_buckets = 1;
			float growth_factor = 2;
			float scale = 3;
		}

		// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/Types/LinearBuckets
		message LinearBuckets {
			int64 num_finite_buckets = 1;
			int64 width = 2;
			int64 offset = 3;
		}

		Distribution.LinearBuckets linear_buckets = 1;
		Distribution.ExponentialBuckets exponential_buckets = 2;
		Distribution.ExplicitBuckets explicit_buckets = 3;
	}

	// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/Types/ExplicitBuckets
	message ExplicitBuckets {
		repeated int64 bounds = 1;
	}

	// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/Types/ExponentialBuckets
	message ExponentialBuckets {
		int64 num_finite_buckets = 1;
		float growth_factor = 2;
		float scale = 3;
	}

	// ref: Niantic.Platform.Telemetry.Distribution/Types/BucketOptions/Types/LinearBuckets
	message LinearBuckets {
		int64 num_finite_buckets = 1;
		int64 width = 2;
		int64 offset = 3;
	}

	// ref: Niantic.Platform.Telemetry.Distribution/Types/Range
	message Range {
		int64 min = 1;
		int64 max = 2;
	}

	int64 count = 1;
	float mean = 2;
	double sum_of_squared_deviation = 3;
	Range range = 4;
	BucketOptions bucket_options = 5;
	repeated int64 bucket_counts = 6;
}

// ref: Niantic.Platform.Telemetry.PlatformDataId
message PlatformDataId {
	int32 telemetry_id = 1;
	TelemetryDomainId telemetry_domain_id = 2;
}

// ref: Niantic.Platform.Telemetry.PlatformEventData
message PlatformEventData {
	TelemetryCommon common_telemetry = 1;
}

// ref: Niantic.Platform.Telemetry.PlatformMetricData
message PlatformMetricData {
	// ref: Niantic.Platform.Telemetry.PlatformMetricData/DatapointValueOneofCase
	enum DatapointValueOneofCase {
		none = 0;
		long_value = 2;
		double_value = 3;
		boolean_value = 4;
		distribution = 5;
	}

	// ref: Niantic.Platform.Telemetry.PlatformMetricData/Types/Kind
	enum Kind {
		UNSPECIFIED = 0;
		GAUGE = 1;
		DELTA = 2;
		CUMULATIVE = 3;
	}

	TelemetryCommon common_telemetry = 1;
	int64 long_value = 2;
	double double_value = 3;
	bool boolean_value = 4;
	Distribution distribution = 5;
	Kind metric_kind = 6;
}

// ref: Niantic.Platform.Telemetry.PlatformServerData
message PlatformServerData {
	string user_id = 1;
	string telemetry_id = 2;
	string session_id = 3;
	repeated int32 experiment_ids = 4;
}

// ref: Niantic.Platform.Telemetry.TelemetryCommon
message TelemetryCommon {
	int64 timestamp = 1;
	string correlation_vector = 2;
}


//----- End telemetry -----
//------------------------------
//----- Begin telemetry -----

// ref: Niantic.Platform.Analytics.Telemetry.ClientTelemetryBatchProto
message ClientTelemetryBatchProto {
	// ref: Niantic.Platform.Analytics.Telemetry.ClientTelemetryBatchProto/Types/TelemetryScopeId
	enum TelemetryScopeId {
		UNSET = 0;
		DITTO = 1;
		GAME = 2;
	}

	TelemetryScopeId telemetry_scope_id = 1;
	repeated ClientTelemetryRecordProto events = 2;
	repeated ClientTelemetryRecordProto metrics = 3;
	string api_version = 4;
	string message_version = 5;
}

// ref: Niantic.Platform.Analytics.Telemetry.ClientTelemetryClientSettingsProto
message ClientTelemetryClientSettingsProto {
	bool is_upload_enabled = 1;
	int64 max_upload_size_in_bytes = 2;
	int64 update_interval_in_sec = 3;
	int64 settings_update_interval_in_sec = 4;
	int64 max_envelope_queue_size = 5;
	double sampling_probability = 6;
	bool use_player_based_sampling = 7;
	double player_hash = 8;
	string player_external_omni_id = 9;
	bool disable_omni_sending = 10;
	map<string, double> special_sampling_probability_map = 11;
	string player_external_ua_id = 12;
}

// ref: Niantic.Platform.Analytics.Telemetry.ClientTelemetryRecordProto
message ClientTelemetryRecordProto {
	string record_id = 1;
	bytes encoded_message = 2;
	int64 client_timestamp_ms = 3;
	int64 metric_id = 4;
}

// ref: Niantic.Platform.Analytics.Telemetry.ClientTelemetrySettingsRequestProto
message ClientTelemetrySettingsRequestProto {
}

// ref: Niantic.Platform.Analytics.Telemetry.Datapoint
message Datapoint {
	// ref: Niantic.Platform.Analytics.Telemetry.Datapoint/Types/Kind
	enum Kind {
		UNSPECIFIED = 0;
		GAUGE = 1;
		DELTA = 2;
		CUMULATIVE = 3;
	}

	// ref: Niantic.Platform.Analytics.Telemetry.Datapoint/ValueOneofCase
	enum ValueOneofCase {
		none = 0;
		long = 1;
		double = 2;
		boolean = 3;
	}

	int64 long = 1;
	double double = 2;
	bool boolean = 3;
	Kind kind = 4;
}


//----- End telemetry -----
//------------------------------
//----- Begin token -----

// ref: Niantic.Platform.Auth.Token.FbTokenProto
message FbTokenProto {
	string token = 1;
}

// ref: Niantic.Platform.Auth.Token.SuperAwesomeTokenProto
message SuperAwesomeTokenProto {
	string token = 1;
}


//----- End token -----
//------------------------------
